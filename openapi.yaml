openapi: 3.0.0
info:
  title: 'MangaUpdates API'
  description: "This API powers our website.\nMost API functions are public and do not require an account. For user-based functions, you must register an account.\nCurrently, user registration must be done through our main website and is disabled via this API.\n\nDownload OpenAPI Specification: [openapi.yaml](openapi.yaml)\n\nPlease contact us at the following emails if you have questions:\n\n* lambchopsil@mangaupdates.com\n* manick@mangaupdates.com\n\n## Warranties\n\nMangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.\n\n## Acceptable Use Policy\n\n* You will credit MangaUpdates when using data provided by this API.\n* You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data.\n* You will NOT use MangaUpdates data or API in a way that will:\n    * Deceive or defraud users\n    * Assist or perform an illegal action\n    * Create spam\n    * Damage the database\n\nWe reserve the right to change this policy at any time."
  version: 1.0.0
servers:
  -
    url: 'https://api.mangaupdates.com/v1'
paths:
  /aboutus/category:
    post:
      tags:
        - aboutus
      summary: 'add a category'
      operationId: addAboutusCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AboutusCategoryModelUpdateV1'
      responses:
        '200':
          description: 'Category was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
  '/aboutus/category/{category_id}':
    get:
      tags:
        - aboutus
      summary: 'returns a single category'
      operationId: retrieveAboutusCategory
      parameters:
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
        -
          name: category_id
          in: path
          description: 'Aboutus Category id'
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: 'Category not found'
        '200':
          description: 'Return category record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AboutusCategoryModelV1'
    delete:
      tags:
        - aboutus
      summary: 'remove a category'
      operationId: deleteAboutusCategory
      parameters:
        -
          name: category_id
          in: path
          description: 'Aboutus Category id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Category was removed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Category does not exist'
        '401':
          description: 'Category does not have correct role'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - aboutus
      summary: 'update a category'
      operationId: updateAboutusCategory
      parameters:
        -
          name: category_id
          in: path
          description: 'id of category'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AboutusCategoryModelUpdateV1'
      responses:
        '200':
          description: 'Category was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Category not found'
      security:
        -
          bearerAuth: []
  /aboutus/users:
    get:
      tags:
        - aboutus
      summary: 'returns categories and users'
      operationId: retrieveAboutusCategoriesAndUsers
      responses:
        '200':
          description: 'List of categories and users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AboutusCategoryModelV1'
  /aboutus:
    get:
      tags:
        - aboutus
      summary: 'returns description of site'
      operationId: retrieveAboutusDescription
      parameters:
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: 'Description of the site'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AboutusDescriptionModelV1'
    post:
      tags:
        - aboutus
      summary: 'update description of site'
      operationId: updateAboutusDescription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AboutusDescriptionModelV1'
      responses:
        '200':
          description: 'Description of the site updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Error updating description'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have appropriate role'
      security:
        -
          bearerAuth: []
  /aboutus/reorder:
    post:
      tags:
        - aboutus
      summary: 'reorder aboutus'
      operationId: reorderAboutus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AboutusCategoryReorderModelV1'
      responses:
        '200':
          description: 'Categories and users were reordered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
  '/aboutus/category/{category_id}/users':
    post:
      tags:
        - aboutus
      summary: 'add a user to a category'
      operationId: addAboutusCategoryUser
      parameters:
        -
          name: category_id
          in: path
          description: 'Aboutus Category id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AboutusUserModelUpdateV1'
      responses:
        '200':
          description: 'User was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Category does not exist'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
  '/aboutus/category/{category_id}/users/{entry_id}':
    delete:
      tags:
        - aboutus
      summary: 'remove a user from a category'
      operationId: deleteAboutusCategoryUser
      parameters:
        -
          name: category_id
          in: path
          description: 'Aboutus Category id'
          required: true
          schema:
            type: integer
        -
          name: entry_id
          in: path
          description: 'Aboutus Category User Entry id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'User was removed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'User does not exist'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
  /account/captcha:
    get:
      tags:
        - account
      summary: 'retrieve the public captcha key'
      operationId: captcha
      responses:
        '200':
          description: 'Return captcha record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
  '/account/delete/confirm/{auth_hash}':
    post:
      tags:
        - account
      summary: 'confirm deletion of your account'
      operationId: confirmDeleteAccount
      parameters:
        -
          name: auth_hash
          in: path
          description: 'auth hash from email confirmation'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Account was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
  '/account/delete/{captcha_response}':
    post:
      tags:
        - account
      summary: 'delete your account'
      operationId: deleteAccount
      parameters:
        -
          name: captcha_response
          in: path
          description: 'response of captcha'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Account was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/account/forgotpass/confirm/{auth_hash}':
    post:
      tags:
        - account
      summary: 'update a password change using an auth hash'
      operationId: confirmAndChangePassword
      parameters:
        -
          name: auth_hash
          in: path
          description: 'auth hash from email confirmation'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModelUpdatePasswordV1'
      responses:
        '200':
          description: 'Password was changed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
  '/account/forgotpass/{captcha_response}':
    post:
      tags:
        - account
      summary: 'send a forgotten password email'
      operationId: forgotPassword
      parameters:
        -
          name: captcha_response
          in: path
          description: 'response of captcha'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountForgotPassModelV1'
      responses:
        '200':
          description: 'Email was sent'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
  /account/login:
    put:
      tags:
        - account
      summary: 'create a session token'
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountLoginModelV1'
      responses:
        '200':
          description: 'Login successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'Invalid credentials or user error'
  /account/logout:
    post:
      tags:
        - account
      summary: 'remove a session token'
      operationId: logout
      responses:
        '200':
          description: 'Logout successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User is not logged in'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
  /account/profile:
    get:
      tags:
        - account
      summary: 'get the profile for the current user'
      operationId: profile
      responses:
        '404':
          description: 'User not found'
        '401':
          description: 'User required'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '200':
          description: 'Return user record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModelV1'
      security:
        -
          bearerAuth: []
  '/account/register/confirm/{auth_hash}':
    post:
      tags:
        - account
      summary: 'confirm a new member registration'
      operationId: confirmRegistration
      parameters:
        -
          name: auth_hash
          in: path
          description: 'auth hash from email confirmation'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Member was confirmed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
  '/account/register/{captcha_response}':
    post:
      tags:
        - account
      summary: 'register a new member'
      operationId: registerMember
      parameters:
        -
          name: captcha_response
          in: path
          description: 'response of captcha'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModelRegisterV1'
      responses:
        '200':
          description: 'Member was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
  '/account/resendauth/{id}':
    post:
      tags:
        - account
      summary: 'send an auth email to a user'
      operationId: resendAuthEmail
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Auth email was sent'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
  '/account/sendforgot/{id}':
    post:
      tags:
        - account
      summary: 'send a forgotten password email to a user'
      operationId: sendForgotEmail
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Auth email was sent'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
  /authors:
    post:
      tags:
        - authors
      summary: 'add an author'
      operationId: addAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorsModelUpdateV1'
      responses:
        '200':
          description: 'Author was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/authors/{id}':
    get:
      tags:
        - authors
      summary: 'get a specific author'
      operationId: retrieveAuthor
      parameters:
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
        -
          name: id
          in: path
          description: 'Author id'
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: 'Author not found'
        '200':
          description: 'Return author record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorsModelV1'
    delete:
      tags:
        - authors
      summary: 'delete an author'
      operationId: deleteAuthor
      parameters:
        -
          name: id
          in: path
          description: 'id of author'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Author delete transaction submitted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Author not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - authors
      summary: 'update an author'
      operationId: updateAuthor
      parameters:
        -
          name: id
          in: path
          description: 'id of author'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorsModelUpdateV1'
      responses:
        '200':
          description: 'Author was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'Field is locked'
        '404':
          description: 'Author not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/authors/{id}/locks':
    get:
      tags:
        - authors
      summary: 'get locks for a specific author'
      operationId: retrieveAuthorLocks
      parameters:
        -
          name: id
          in: path
          description: 'Author id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: 'Author not found'
        '200':
          description: 'Return author lock records'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorsLockModelV1'
      security:
        -
          bearerAuth: []
  '/authors/{id}/locks/{item}/lock':
    post:
      tags:
        - authors
      summary: 'lock a field of an author'
      operationId: lockAuthorField
      parameters:
        -
          name: id
          in: path
          description: 'id of author'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: item
          in: path
          description: 'field name'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorsLockModelUpdateV1'
      responses:
        '200':
          description: 'Field was locked'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Service or validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '409':
          description: 'State Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Author not found'
      security:
        -
          bearerAuth: []
  '/authors/{id}/locks/{item}/unlock':
    post:
      tags:
        - authors
      summary: 'unlock a field of an author'
      operationId: unlockAuthorField
      parameters:
        -
          name: id
          in: path
          description: 'id of author'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: item
          in: path
          description: 'field name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Field was unlocked'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '409':
          description: 'State Conflict'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Author not found'
      security:
        -
          bearerAuth: []
  /authors/search:
    post:
      tags:
        - authors
      summary: 'search authors'
      operationId: searchAuthorsPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorsSearchRequestV1'
      responses:
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '200':
          description: 'List of authors'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorsSearchResponseV1'
  '/authors/{id}/series':
    post:
      tags:
        - authors
      summary: 'get the list of series for a specific author'
      operationId: retrieveAuthorSeries
      parameters:
        -
          name: id
          in: path
          description: 'Author id'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorsSeriesListRequestV1'
      responses:
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Author not found'
        '200':
          description: 'Return series list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorsSeriesListResponseV1'
  '/authors/{id}/image':
    post:
      tags:
        - authors
      summary: 'update the image of an author'
      operationId: updateImage
      parameters:
        -
          name: id
          in: path
          description: 'id of author'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                image:
                  description: 'Image to update'
                  type: string
                  format: binary
              type: object
      responses:
        '200':
          description: 'Image was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'Field is locked'
        '404':
          description: 'Author not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - authors
      summary: 'delete the image of an author'
      operationId: deleteImage
      parameters:
        -
          name: id
          in: path
          description: 'id of author'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Image was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Author not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  /categories/bulk/combine:
    post:
      tags:
        - categories
      summary: 'combine two categories across the database'
      operationId: bulkCombineSeriesCategories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesCategoryUpdateModelV1'
      responses:
        '200':
          description: 'Transaction has started'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '412':
          description: 'Five second update delay'
  /categories/bulk/delete:
    post:
      tags:
        - categories
      summary: 'delete a category across the database'
      operationId: bulkDeleteSeriesCategories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoriesModelUpdateV1'
      responses:
        '200':
          description: 'Transaction has started'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '412':
          description: 'Five second update delay'
  /categories/findByPrefix:
    post:
      tags:
        - categories
      summary: 'find a category by prefix'
      operationId: findCategoryByPrefix
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoriesModelUpdateV1'
      responses:
        '200':
          description: 'Return categories records'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoriesModelV1'
  /categories/findByExact:
    post:
      tags:
        - categories
      summary: 'find a category by name'
      operationId: findCategoryByExact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoriesModelUpdateV1'
      responses:
        '404':
          description: 'Category not found'
        '200':
          description: 'Return categories record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesModelV1'
  /categories/search:
    post:
      tags:
        - categories
      summary: 'search categories'
      operationId: searchCategoriesPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoriesSearchRequestV1'
      responses:
        '200':
          description: 'Return categories records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesSearchResponseV1'
  /convo:
    post:
      tags:
        - convo
      summary: 'add an convo'
      operationId: addConvo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvoModelAddV1'
      responses:
        '200':
          description: 'Convo was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  /convo/bulk/abandon:
    post:
      tags:
        - convo
      summary: 'abandon convos in bulk'
      operationId: abandonConvoBulk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvoBulkModelV1'
      responses:
        '200':
          description: 'Bulk abandon result'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
  /convo/bulk/delete:
    post:
      tags:
        - convo
      summary: 'delete convos in bulk'
      operationId: deleteConvoBulk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvoBulkModelV1'
      responses:
        '200':
          description: 'Bulk deletion result'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
  '/convo/{id}':
    get:
      tags:
        - convo
      summary: 'get a specific convo'
      operationId: retrieveConvo
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
      responses:
        '404':
          description: 'Convo not found'
        '200':
          description: 'Return convo record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvoModelV1'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - convo
      summary: 'delete a convo'
      operationId: deleteConvo
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Convo was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Convo not found'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - convo
      summary: 'update a convo'
      operationId: updateConvo
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvoModelUpdateV1'
      responses:
        '200':
          description: 'Convo was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/convo/ignore/{user_id}':
    get:
      tags:
        - convo
      summary: 'return whether the user is ignored'
      operationId: isUserIgnored
      parameters:
        -
          name: user_id
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'User ignore record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvoUserIgnoreModelV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'User does not exists'
      security:
        -
          bearerAuth: []
    post:
      tags:
        - convo
      summary: 'ignore a user'
      operationId: ignoreUser
      parameters:
        -
          name: user_id
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'User was ignored'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'User does not exists'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - convo
      summary: 'remove ignore for a user'
      operationId: unIgnoreUser
      parameters:
        -
          name: user_id
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'User ignore was removed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'User does not exist'
      security:
        -
          bearerAuth: []
  /convo/inbox:
    get:
      tags:
        - convo
      summary: 'display unread messages'
      operationId: convoInbox
      responses:
        '200':
          description: 'List of convos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvoSearchResponseV1'
      security:
        -
          bearerAuth: []
  /convo/inbox/count:
    get:
      tags:
        - convo
      summary: 'retrieve number of unread messages'
      operationId: convoInboxCount
      responses:
        '200':
          description: 'Return number of new convos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvoSearchResponseV1'
      security:
        -
          bearerAuth: []
  /convo/sent:
    post:
      tags:
        - convo
      summary: 'display sent messages'
      operationId: convoSent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerPageSearchRequestV1'
      responses:
        '200':
          description: 'List of convos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvoSearchResponseV1'
      security:
        -
          bearerAuth: []
  /convo/received:
    post:
      tags:
        - convo
      summary: 'display received (and read) messages'
      operationId: convoReceived
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerPageSearchRequestV1'
      responses:
        '200':
          description: 'List of convos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvoSearchResponseV1'
      security:
        -
          bearerAuth: []
  '/convo/{id}/messages':
    post:
      tags:
        - convo
      summary: 'add a message to a convo'
      operationId: addConvoMessage
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvoMessageModelUpdateV1'
      responses:
        '200':
          description: 'Message was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/convo/{id}/messages/list':
    post:
      tags:
        - convo
      summary: 'list convo messages'
      operationId: listConvoMessages
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvoMessageListRequestV1'
      responses:
        '200':
          description: 'List of convo messages'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvoMessageSearchResponseV1'
        '404':
          description: 'Convo not found'
      security:
        -
          bearerAuth: []
  '/convo/{id}/messages/{message_id}':
    get:
      tags:
        - convo
      summary: 'get a specific convo message'
      operationId: retrieveConvoMessage
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: message_id
          in: path
          description: 'Convo message id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
      responses:
        '404':
          description: 'Convo message not found'
        '200':
          description: 'Return convo message record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvoMessageModelV1'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - convo
      summary: 'update a convo message'
      operationId: updateConvoMessage
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
        -
          name: message_id
          in: path
          description: 'Convo message id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvoMessageModelUpdateV1'
      responses:
        '200':
          description: 'Message was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '403':
          description: 'Permission error'
        '404':
          description: 'Message does not exist'
      security:
        -
          bearerAuth: []
  '/convo/{id}/messages/{message_id}/location':
    get:
      tags:
        - convo
      summary: 'get a specific convo message location'
      operationId: retrieveConvoMessageLocation
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: message_id
          in: path
          description: 'Convo message id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Return convo message record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
  '/convo/{id}/messages/search':
    post:
      tags:
        - convo
      summary: 'search convo'
      operationId: searchConvoMessagesPost
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvoMessageSearchRequestV1'
      responses:
        '200':
          description: 'List of convo messages'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvoMessageSearchResponseV1'
        '404':
          description: 'Convo not found'
      security:
        -
          bearerAuth: []
  '/convo/{id}/abandon':
    post:
      tags:
        - convo
      summary: 'abandon a convo'
      operationId: abandonConvo
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Convo was abandoned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Convo not found'
      security:
        -
          bearerAuth: []
  '/convo/{id}/invite':
    post:
      tags:
        - convo
      summary: 'invite a user to a convo'
      operationId: inviteUserToConvo
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ConvoParticipantModelAddV1'
      responses:
        '200':
          description: 'User was invited'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Convo does not exists'
      security:
        -
          bearerAuth: []
  '/convo/{id}/join':
    post:
      tags:
        - convo
      summary: 'join a convo'
      operationId: joinConvo
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Join successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Convo does not exists'
      security:
        -
          bearerAuth: []
  '/convo/{id}/kick/{user_id}':
    post:
      tags:
        - convo
      summary: 'kick a user from a convo'
      operationId: kickUserFromConvo
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
        -
          name: user_id
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'User was kicked from convo'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '403':
          description: 'Permission error'
        '404':
          description: 'Convo or user not found'
      security:
        -
          bearerAuth: []
  '/convo/{id}/participants':
    get:
      tags:
        - convo
      summary: 'get list of convo participants'
      operationId: retrieveConvoParticipants
      parameters:
        -
          name: id
          in: path
          description: 'Convo id'
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: 'Convo not found'
        '200':
          description: 'Return convo participants'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConvoParticipantModelV1'
      security:
        -
          bearerAuth: []
  /convo/search:
    post:
      tags:
        - convo
      summary: 'search convo'
      operationId: searchConvoPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvoSearchRequestV1'
      responses:
        '200':
          description: 'List of convos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvoSearchResponseV1'
      security:
        -
          bearerAuth: []
  /faq:
    get:
      tags:
        - faq
      summary: 'retrieve all categories and questions'
      operationId: retrieveAllFaqCategoriesAndQuestions
      responses:
        '200':
          description: 'Return category and question records'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FaqCategoryQuestionsModelV1'
    post:
      tags:
        - faq
      summary: 'add a faq category'
      operationId: addFaqCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaqCategoryModelUpdateV1'
      responses:
        '200':
          description: 'Faq category was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
  '/faq/{category_id}':
    get:
      tags:
        - faq
      summary: 'get a specific category'
      operationId: retrieveFaqCategory
      parameters:
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
        -
          name: category_id
          in: path
          description: 'Faq category id'
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: 'Category not found'
        '200':
          description: 'Return category record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaqCategoryModelV1'
    delete:
      tags:
        - faq
      summary: 'delete a faq category'
      operationId: deleteFaqCategory
      parameters:
        -
          name: category_id
          in: path
          description: 'id of faq category'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Faq Category was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Faq Category not found'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - faq
      summary: 'update a faq category'
      operationId: updateFaqCategory
      parameters:
        -
          name: category_id
          in: path
          description: 'id of faq category'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaqCategoryModelUpdateV1'
      responses:
        '200':
          description: 'Faq was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
  '/faq/{category_id}/questions':
    get:
      tags:
        - faq
      summary: 'retrieve all quesitons for a category'
      operationId: retrieveAllFaqCategoryQuestions
      parameters:
        -
          name: category_id
          in: path
          description: 'Faq category id'
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: 'Category not found'
        '200':
          description: 'Return question records'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FaqQuestionModelV1'
    post:
      tags:
        - faq
      summary: 'add a faq question'
      operationId: addFaqQuestion
      parameters:
        -
          name: category_id
          in: path
          description: 'id of category to add question to'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaqQuestionModelUpdateV1'
      responses:
        '200':
          description: 'Faq question was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
  '/faq/{category_id}/questions/{question_id}':
    get:
      tags:
        - faq
      summary: 'get a specific question for a category'
      operationId: retrieveFaqQuestion
      parameters:
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
        -
          name: category_id
          in: path
          description: 'Faq category id'
          required: true
          schema:
            type: integer
        -
          name: question_id
          in: path
          description: 'Faq question id'
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: 'Category or question not found'
        '200':
          description: 'Return question record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaqQuestionModelV1'
    delete:
      tags:
        - faq
      summary: 'delete an faq'
      operationId: deleteFaqQuestion
      parameters:
        -
          name: category_id
          in: path
          description: 'Faq category id'
          required: true
          schema:
            type: integer
        -
          name: question_id
          in: path
          description: 'Faq question id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Faq question was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Faq category or question not found'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - faq
      summary: 'update a faq question'
      operationId: updateFaqQuestion
      parameters:
        -
          name: category_id
          in: path
          description: 'Faq category id'
          required: true
          schema:
            type: integer
        -
          name: question_id
          in: path
          description: 'Faq question id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaqQuestionModelUpdateV1'
      responses:
        '200':
          description: 'Faq was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
  /faq/reorder:
    post:
      tags:
        - faq
      summary: 'reorder faq'
      operationId: reorderFaq
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FaqCategoryReorderModelV1'
      responses:
        '200':
          description: 'Faq was reordered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
  '/forums/{forum_id}/admins/{user_id}':
    put:
      tags:
        - forum
      summary: 'add a forum admin'
      operationId: addForumAdmin
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: user_id
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Forum admin was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - forum
      summary: 'remove a forum admin'
      operationId: removeForumAdmin
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: user_id
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Forum admin was removed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
  '/forums/{forum_id}':
    get:
      tags:
        - forum
      summary: 'retrieve a forum'
      operationId: retrieveForum
      parameters:
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Return topic record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumForumModelV1'
        '404':
          description: 'Forum not found'
    post:
      tags:
        - forum
      summary: 'add a forum topic'
      operationId: addTopic
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumTopicModelAddV1'
      responses:
        '200':
          description: 'Forum topic was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'User is under a warn restriction'
      security:
        -
          bearerAuth: []
  /forums/log:
    post:
      tags:
        - forum
      summary: 'show forum admin log'
      operationId: showLogPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumAdminHistorySearchRequestV1'
      responses:
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have appropriate role'
        '200':
          description: 'Return log records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumAdminHistorySearchResponseV1'
  /forums:
    get:
      tags:
        - forum
      summary: 'show forum categories and forums'
      operationId: listCategories
      responses:
        '200':
          description: 'List of forums'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ForumCategoryModelListV1'
      security:
        -
          bearerAuth: []
  /forums/popular:
    get:
      tags:
        - forum
      summary: 'show popular forums'
      operationId: listPopularForums
      responses:
        '200':
          description: 'List of forums'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ForumForumModelListV1'
      security:
        -
          bearerAuth: []
  '/forums/{forum_id}/topics/{topic_id}/my_posts':
    get:
      tags:
        - forum
      summary: 'list posts in topic that I made'
      operationId: listPostsByMe
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Return post id list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumPostByUserResponseV1'
        '401':
          description: 'User does not have correct role'
  '/forums/{forum_id}/topics/{topic_id}/list':
    post:
      tags:
        - forum
      summary: 'list posts in topic'
      operationId: listPosts
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerPageSearchRequestV1'
      responses:
        '200':
          description: 'Return post records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumPostListResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Forum or topic not found'
  '/forums/{forum_id}/list':
    post:
      tags:
        - forum
      summary: 'list topics'
      operationId: listTopics
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: with_first_post
          in: query
          description: 'Also return the first post of each topic'
          required: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumTopicListRequestV1'
      responses:
        '200':
          description: 'Return topic records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumTopicListResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Forum not found'
  /forums/global:
    get:
      tags:
        - forum
      summary: 'list global topics'
      operationId: listGlobalTopics
      responses:
        '200':
          description: 'Return topic records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumTopicListResponseV1'
  '/forums/lookup/series/{series_id}':
    get:
      tags:
        - forum
      summary: 'lookup a series to find the forum id'
      operationId: lookupSeries
      parameters:
        -
          name: series_id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Series lookup response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumLookupResponseV1'
        '404':
          description: 'Series or forum not found'
      security:
        -
          bearerAuth: []
  '/forums/lookup/topic/{topic_id}':
    get:
      tags:
        - forum
      summary: 'lookup a topic to find the forum id'
      operationId: lookupTopic
      parameters:
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Topic lookup response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumLookupResponseV1'
        '404':
          description: 'Topic not found'
      security:
        -
          bearerAuth: []
  '/forums/lookup/post/{post_id}':
    get:
      tags:
        - forum
      summary: 'lookup a post to find the forum and topic id'
      operationId: lookupPost
      parameters:
        -
          name: post_id
          in: path
          description: 'Post id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Post lookup response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumLookupResponseV1'
        '404':
          description: 'Post not found'
      security:
        -
          bearerAuth: []
  /forums/temp_poll_images:
    get:
      tags:
        - forum
      summary: 'retrieve temporary poll images'
      operationId: retrieveTemporaryPollImages
      responses:
        '200':
          description: 'Return image records'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ForumPollTempImageModelV1'
    post:
      tags:
        - forum
      summary: 'add a temporary poll image'
      operationId: addTemporaryPollImage
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                image:
                  description: 'Image to update'
                  type: string
                  format: binary
                caption:
                  description: 'Image caption'
                  type: string
              type: object
      responses:
        '200':
          description: 'Image was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'User is under a warn restriction'
      security:
        -
          bearerAuth: []
  '/forums/{forum_id}/topics/{topic_id}/poll':
    patch:
      tags:
        - forum
      summary: 'update a forum topic poll (if present)'
      operationId: updateTopicPoll
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumPollModelUpdateV1'
      responses:
        '200':
          description: 'Topic poll was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
  '/forums/{forum_id}/topics/{topic_id}/poll/vote/{choice_id}':
    post:
      tags:
        - forum
      summary: 'add a vote to a forum poll'
      operationId: addPollVote
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
        -
          name: choice_id
          in: path
          description: 'Choice id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Poll vote was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'User is under a warn restriction'
      security:
        -
          bearerAuth: []
  '/forums/{forum_id}/topics/{topic_id}/poll/vote':
    get:
      tags:
        - forum
      summary: 'retrieve my vote from the poll'
      operationId: retrieveVote
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Return poll vote record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumPollVoteModelV1'
        '401':
          description: 'User does not have correct role'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Poll or vote not found'
      security:
        -
          bearerAuth: []
  '/forums/{forum_id}/topics/{topic_id}':
    get:
      tags:
        - forum
      summary: 'retrieve a forum topic'
      operationId: retrieveTopic
      parameters:
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Return topic record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumTopicModelV1'
        '404':
          description: 'Topic not found'
    post:
      tags:
        - forum
      summary: 'add a forum post'
      operationId: addPost
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumPostModelUpdateV1'
      responses:
        '200':
          description: 'Forum post was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'User is under a warn restriction'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - forum
      summary: 'delete a topic'
      operationId: deleteTopic
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Topic delete transaction submitted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - forum
      summary: 'update a forum topic'
      operationId: updateTopic
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumTopicModelUpdateV1'
      responses:
        '200':
          description: 'Forum topic was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
  '/forums/{forum_id}/topics/{topic_id}/posts/{post_id}':
    get:
      tags:
        - forum
      summary: 'retrieve a forum post'
      operationId: retrievePost
      parameters:
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
        -
          name: post_id
          in: path
          description: 'Post id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Return post record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumPostModelV1'
        '404':
          description: 'Post not found'
    delete:
      tags:
        - forum
      summary: 'delete a post'
      operationId: deletePost
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
        -
          name: post_id
          in: path
          description: 'Post id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Post delete transaction submitted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - forum
      summary: 'update a forum post'
      operationId: updatePost
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
        -
          name: post_id
          in: path
          description: 'Post id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumPostModelUpdateV1'
      responses:
        '200':
          description: 'Forum post was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'User is under a warn restriction'
      security:
        -
          bearerAuth: []
  '/forums/{forum_id}/topics/{topic_id}/posts/{post_id}/report':
    post:
      tags:
        - forum
      summary: 'report a forum post'
      operationId: reportPost
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
        -
          name: post_id
          in: path
          description: 'Post id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumPostReportModelUpdateV1'
      responses:
        '200':
          description: 'Forum post was reported'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'User is under a warn restriction'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - forum
      summary: 'delete a post report'
      operationId: deletePostReport
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
        -
          name: post_id
          in: path
          description: 'Post id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Post report was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
  /forums/report:
    get:
      tags:
        - forum
      summary: 'show reported posts'
      operationId: listReportedPosts
      responses:
        '200':
          description: 'Return Reported Posts'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ForumPostReportModelV1'
        '401':
          description: 'User does not have appropriate role'
      security:
        -
          bearerAuth: []
  '/forums/{forum_id}/topics/{topic_id}/posts/{post_id}/location':
    get:
      tags:
        - forum
      summary: 'retrieve a forum post location within topic'
      operationId: retrievePostLocation
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
        -
          name: post_id
          in: path
          description: 'Post id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Return post record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Post not found'
  /forums/search:
    post:
      tags:
        - forum
      summary: 'search forum'
      operationId: searchForumPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumSearchRequestV1'
      responses:
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '200':
          description: 'Return search results'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumSearchResponseV1'
  '/forums/{forum_id}/search':
    post:
      tags:
        - forum
      summary: 'search specific forum'
      operationId: searchSpecificForumPost
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumSearchRequestV1'
      responses:
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '200':
          description: 'Return search results'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumSearchResponseV1'
  '/forums/{forum_id}/topics/{topic_id}/search':
    post:
      tags:
        - forum
      summary: 'search specific topic'
      operationId: searchSpecificTopicPost
      parameters:
        -
          name: forum_id
          in: path
          description: 'Forum id'
          required: true
          schema:
            type: integer
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumSearchRequestV1'
      responses:
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '200':
          description: 'Return search results'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumSearchResponseV1'
  '/forums/warn/{user_id}/history':
    get:
      tags:
        - forum
      summary: 'show warn history for a user'
      operationId: listWarnHistoryForUser
      parameters:
        -
          name: user_id
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Warn history'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ForumWarnModelV1'
        '401':
          description: 'User does not have appropriate role'
      security:
        -
          bearerAuth: []
  '/forums/warn/{user_id}':
    get:
      tags:
        - forum
      summary: 'gets the current warn status for user'
      operationId: getCurrentWarnForUser
      parameters:
        -
          name: user_id
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Warn status'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumWarnModelV1'
      security:
        -
          bearerAuth: []
    put:
      tags:
        - forum
      summary: 'update a user warn level'
      operationId: updateUserWarnLevel
      parameters:
        -
          name: user_id
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForumWarnModelUpdateV1'
      responses:
        '200':
          description: 'User warn was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Member not found'
      security:
        -
          bearerAuth: []
  /genres:
    get:
      tags:
        - genre
      summary: 'get genres'
      operationId: retrieveGenres
      responses:
        '200':
          description: 'Return genres'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenreModelStatsV1'
    post:
      tags:
        - genre
      summary: 'add a genre'
      operationId: addGenre
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenreModelUpdateV1'
      responses:
        '200':
          description: 'Genre add transaction submitted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
  '/genres/{id}':
    get:
      tags:
        - genre
      summary: 'get genres'
      operationId: retrieveGenreById
      parameters:
        -
          name: id
          in: path
          description: 'Genre id'
          required: true
          schema:
            type: integer
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: 'Return genre'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreModelStatsV1'
    delete:
      tags:
        - genre
      summary: 'delete a genre'
      operationId: deleteGenre
      parameters:
        -
          name: id
          in: path
          description: 'id of genre'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Genre was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Genre not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - genre
      summary: 'update a genre'
      operationId: updateGenre
      parameters:
        -
          name: id
          in: path
          description: 'id of genre'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenreModelUpdateV1'
      responses:
        '200':
          description: 'Genre was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Genre not found'
      security:
        -
          bearerAuth: []
  /groups:
    post:
      tags:
        - groups
      summary: 'add an group'
      operationId: addGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupsModelUpdateV1'
      responses:
        '200':
          description: 'Group was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/groups/{id}':
    get:
      tags:
        - groups
      summary: 'get a specific group'
      operationId: retrieveGroup
      parameters:
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
        -
          name: id
          in: path
          description: 'Group id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: 'Group not found'
        '200':
          description: 'Return group record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupsModelV1'
    delete:
      tags:
        - groups
      summary: 'delete a group'
      operationId: deleteGroup
      parameters:
        -
          name: id
          in: path
          description: 'id of group'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Group delete transaction submitted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Group not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - groups
      summary: 'update an group'
      operationId: updateGroup
      parameters:
        -
          name: id
          in: path
          description: 'id of group'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupsModelUpdateV1'
      responses:
        '200':
          description: 'Group was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Group not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/groups/{id}/reject':
    post:
      tags:
        - groups
      summary: 'reject and delete a group'
      operationId: rejectGroup
      parameters:
        -
          name: id
          in: path
          description: 'id of group'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Group reject transaction submitted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Group not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  /groups/search:
    post:
      tags:
        - groups
      summary: 'search groups'
      operationId: searchGroupsPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupsSearchRequestV1'
      responses:
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '200':
          description: 'List of groups'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupsSearchResponseV1'
  '/groups/{id}/series':
    get:
      tags:
        - groups
      summary: 'get the list of series and release frequency for a specific group'
      operationId: retrieveGroupSeries
      parameters:
        -
          name: id
          in: path
          description: 'Group id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: 'Group not found'
        '200':
          description: 'Return series list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupsSeriesListResponseV1'
  /lists:
    get:
      tags:
        - lists
      summary: 'retrieve list of user lists'
      operationId: retrieveLists
      responses:
        '200':
          description: 'Return list records'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListsModelV1'
      security:
        -
          bearerAuth: []
    post:
      tags:
        - lists
      summary: 'add a custom user list'
      operationId: addCustomList
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListsModelUpdateV1'
      responses:
        '200':
          description: 'List was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/lists/{id}':
    get:
      tags:
        - lists
      summary: 'retrieve list metadata and options'
      operationId: retrieveListById
      parameters:
        -
          name: id
          in: path
          description: 'List id'
          required: true
          schema:
            type: integer
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
      responses:
        '404':
          description: 'List not found'
        '200':
          description: 'Return list record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsModelV1'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - lists
      summary: 'remove a custom list'
      operationId: deleteCustomList
      parameters:
        -
          name: id
          in: path
          description: 'id of list'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Custom list was removed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'User list not found'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - lists
      summary: 'update a user list'
      operationId: updateList
      parameters:
        -
          name: id
          in: path
          description: 'id of list'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListsModelUpdateV1'
      responses:
        '200':
          description: 'User list was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'User list not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/lists/public/{user_id}':
    get:
      tags:
        - lists
      summary: 'retrieve list of user lists'
      operationId: retrievePublicLists
      parameters:
        -
          name: user_id
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Return list records'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListsModelV1'
      security:
        -
          bearerAuth: []
  '/lists/public/{user_id}/stats':
    get:
      tags:
        - lists
      summary: 'retrieve stats for user public lists'
      operationId: retrievePublicListStats
      parameters:
        -
          name: user_id
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Return public list stats records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsPublicStatsModelV1'
      security:
        -
          bearerAuth: []
  '/lists/public/{user_id}/search/{id}':
    post:
      tags:
        - lists
      summary: 'search lists'
      operationId: searchPublicListsPost
      parameters:
        -
          name: user_id
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
        -
          name: id
          in: path
          description: 'list id to search'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListsSearchRequestV1'
      responses:
        '200':
          description: 'Return list records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsPublicSearchResponseV1'
      security:
        -
          bearerAuth: []
  '/lists/{id}/search':
    post:
      tags:
        - lists
      summary: 'search lists'
      operationId: searchListsPost
      parameters:
        -
          name: id
          in: path
          description: 'list id to search'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListsSearchRequestV1'
      responses:
        '200':
          description: 'Return list records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsSearchResponseV1'
      security:
        -
          bearerAuth: []
  /lists/series:
    post:
      tags:
        - lists
      summary: 'add a series to a list'
      operationId: addListSeries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ListsSeriesModelUpdateV1'
      responses:
        '200':
          description: 'Series was added'
        '400':
          description: 'Validation or service error'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/lists/{id}/series/bulk':
    post:
      tags:
        - lists
      summary: 'add a list of series to a list'
      operationId: addListSeriesBulk
      parameters:
        -
          name: id
          in: path
          description: 'id of list'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ListsBulkAddModelV1'
      responses:
        '200':
          description: 'Series were (partially) added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'User list not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  /lists/series/delete:
    post:
      tags:
        - lists
      summary: 'remove a series from a list'
      operationId: deleteListSeries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
      responses:
        '200':
          description: 'Series were removed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/lists/series/{series_id}':
    get:
      tags:
        - lists
      summary: 'retrieve list series item'
      operationId: retrieveListSeries
      parameters:
        -
          name: series_id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
      responses:
        '404':
          description: 'List or series not found'
        '200':
          description: 'Return list series record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsSeriesModelV1'
      security:
        -
          bearerAuth: []
  /lists/series/update:
    post:
      tags:
        - lists
      summary: 'update a series list item'
      operationId: updateListSeries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ListsSeriesModelUpdateV1'
      responses:
        '200':
          description: 'Series list items were updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/lists/similar/{list_name}/{series_id}':
    get:
      tags:
        - lists
      summary: 'retrieve users who have similar interests based on series'
      operationId: retrieveSimilarUsersBySeries
      parameters:
        -
          name: list_name
          in: path
          description: 'name of list'
          required: true
          schema:
            type: string
            enum:
              - read
              - wish
              - complete
              - unfinished
              - hold
        -
          name: series_id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: 'List or series not found'
        '200':
          description: 'Return similar user records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsSimilarUsersResponseV1'
      security:
        -
          bearerAuth: []
  /misc/time:
    get:
      tags:
        - misc
      summary: 'get the current time'
      operationId: time
      responses:
        '200':
          description: 'Current Time'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeV1'
  /misc/online:
    get:
      tags:
        - misc
      summary: 'list online users'
      operationId: listOnlineUsers
      responses:
        '200':
          description: 'Return online users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MiscOnlineUsersModelV1'
  '/misc/slow-transaction-status/{transaction_id}':
    get:
      tags:
        - misc
      summary: 'get the status of a bulk transaction'
      operationId: retrieveSlowTransactionStatus
      parameters:
        -
          name: transaction_id
          in: path
          description: 'the transaction id'
          required: true
          schema:
            type: string
      responses:
        '404':
          description: 'Transaction not found'
        '200':
          description: 'Return transaction status'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MiscSlowTransactionStatusResponseV1'
  /misc/stats:
    get:
      tags:
        - misc
      summary: 'show various site stats'
      operationId: siteStats
      responses:
        '200':
          description: 'Return site stats'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MiscStatsModelV1'
  /poll:
    get:
      tags:
        - poll
      summary: 'get the active poll'
      operationId: retrievePoll
      responses:
        '200':
          description: 'Return poll record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PollModelV1'
    post:
      tags:
        - poll
      summary: 'add a new poll'
      operationId: addPoll
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PollModelUpdateV1'
      responses:
        '200':
          description: 'Poll was successfully added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - poll
      summary: 'archive the active poll'
      operationId: archivePoll
      responses:
        '200':
          description: 'Poll was successfully archived'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
  /poll/old:
    get:
      tags:
        - poll
      summary: 'get old polls'
      operationId: retrieveOldPolls
      responses:
        '200':
          description: 'Return poll records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
  /poll/vote:
    post:
      tags:
        - poll
      summary: 'vote in a poll'
      operationId: votePollNoAnswer
      responses:
        '200':
          description: 'Vote was successfully added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
  '/poll/vote/{answer_id}':
    post:
      tags:
        - poll
      summary: 'vote in a poll answer'
      operationId: votePollAnswer
      parameters:
        -
          name: answer_id
          in: path
          description: 'id of answer to vote for'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Vote was successfully added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
  /poll/vote/status:
    get:
      tags:
        - poll
      summary: 'get information about whether the user has voted'
      operationId: retrieveVoteStatus
      responses:
        '200':
          description: 'Return poll voter status record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PollVoteStatusModelV1'
  /publishers:
    post:
      tags:
        - publishers
      summary: 'add an publisher'
      operationId: addPublisher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishersModelUpdateV1'
      responses:
        '200':
          description: 'Publisher was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/publishers/{id}':
    get:
      tags:
        - publishers
      summary: 'get a specific publisher'
      operationId: retrievePublisher
      parameters:
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
        -
          name: id
          in: path
          description: 'Publisher id'
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: 'Publisher not found'
        '200':
          description: 'Return publisher record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishersModelV1'
    delete:
      tags:
        - publishers
      summary: 'delete a publisher'
      operationId: deletePublisher
      parameters:
        -
          name: id
          in: path
          description: 'id of publisher'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Publisher delete transaction submitted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Publisher not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - publishers
      summary: 'update a publisher'
      operationId: updatePublisher
      parameters:
        -
          name: id
          in: path
          description: 'id of publisher'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishersModelUpdateV1'
      responses:
        '200':
          description: 'Publisher was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Publisher not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  /publishers/search:
    post:
      tags:
        - publishers
      summary: 'search publishers'
      operationId: searchPublishersPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishersSearchRequestV1'
      responses:
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '200':
          description: 'Return publisher records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishersSearchResponseV1'
  '/publishers/{id}/series':
    get:
      tags:
        - publishers
      summary: 'get the list of series for a specific publisher'
      operationId: retrievePublisherSeries
      parameters:
        -
          name: id
          in: path
          description: 'Publisher id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: 'Publisher not found'
        '200':
          description: 'Return series list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishersSeriesListResponseV1'
  /publishers/publication:
    get:
      tags:
        - publishers
      summary: 'get the list of series for a specific publication'
      operationId: retrievePublicationSeries
      parameters:
        -
          name: pubname
          in: query
          description: 'Publication name'
          required: true
          schema:
            type: string
      responses:
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Publication not found'
        '200':
          description: 'Return series list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishersPublicationResponseV1'
  /releases:
    post:
      tags:
        - releases
      summary: 'add an release'
      operationId: addRelease
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ReleaseModelUpdateV1'
      responses:
        '200':
          description: 'Release was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/releases/{id}':
    get:
      tags:
        - releases
      summary: 'get a specific release'
      operationId: retrieveRelease
      parameters:
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
        -
          name: id
          in: path
          description: 'Release id'
          required: true
          schema:
            type: integer
      responses:
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Release not found'
        '200':
          description: 'Return release record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseModelV1'
    delete:
      tags:
        - releases
      summary: 'delete a release'
      operationId: deleteRelease
      parameters:
        -
          name: id
          in: path
          description: 'id of release'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Release was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Release not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - releases
      summary: 'update an release'
      operationId: updateRelease
      parameters:
        -
          name: id
          in: path
          description: 'id of release'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseModelUpdateV1'
      responses:
        '200':
          description: 'Release was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Release not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  /releases/moderate:
    post:
      tags:
        - releases
      summary: 'search releases to moderate'
      operationId: moderateReleasesPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseModerateRequestV1'
      responses:
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '200':
          description: 'Return release records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseModerateResponseV1'
      security:
        -
          bearerAuth: []
  /releases/days:
    get:
      tags:
        - releases
      summary: 'show releases by day'
      operationId: listReleasesByDay
      parameters:
        -
          name: page
          in: query
          description: 'Start page'
          required: false
          schema:
            type: integer
            format: int64
        -
          name: include_metadata
          in: query
          description: 'Include series metadata (if available)'
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: 'Return release records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseSearchResponseV1'
  /releases/rss:
    get:
      tags:
        - releases
      summary: 'releases rss feed'
      operationId: releaseRssFeed
      responses:
        '200':
          description: 'Return release feed'
          content:
            application/xml:
              schema:
                type: string
  /releases/search:
    post:
      tags:
        - releases
      summary: 'search releases'
      operationId: searchReleasesPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseSearchRequestV1'
      responses:
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '200':
          description: 'Return release records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseSearchResponseV1'
      security:
        -
          bearerAuth: []
  /reviews:
    post:
      tags:
        - reviews
      summary: 'add a review'
      operationId: addReview
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewModelUpdateV1'
      responses:
        '200':
          description: 'Review was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/reviews/{id}/comments':
    post:
      tags:
        - reviews
      summary: 'add a review comment'
      operationId: addReviewComment
      parameters:
        -
          name: id
          in: path
          description: 'Review id'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCommentModelUpdateV1'
      responses:
        '200':
          description: 'Review comment was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/reviews/{id}/comments/{comment_id}':
    get:
      tags:
        - reviews
      summary: 'get a specific review comment'
      operationId: retrieveReviewComment
      parameters:
        -
          name: id
          in: path
          description: 'Review id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: comment_id
          in: path
          description: 'Review comment id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
      responses:
        '404':
          description: 'Review or comment not found'
        '200':
          description: 'Return review comment record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCommentModelV1'
    delete:
      tags:
        - reviews
      summary: 'delete a review comment'
      operationId: deleteReviewComment
      parameters:
        -
          name: id
          in: path
          description: 'id of review'
          required: true
          schema:
            type: integer
        -
          name: comment_id
          in: path
          description: 'id of review comment'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Review comment was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role or own the review comment'
        '404':
          description: 'Review or comment not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - reviews
      summary: 'update a review comment'
      operationId: updateReviewComment
      parameters:
        -
          name: id
          in: path
          description: 'id of review'
          required: true
          schema:
            type: integer
        -
          name: comment_id
          in: path
          description: 'id of review comment'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCommentModelUpdateV1'
      responses:
        '200':
          description: 'Review comment was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role or own the review comment'
        '404':
          description: 'Review or comment not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  /reviews/comments/moderation:
    post:
      tags:
        - reviews
      summary: 'moderate review comments'
      operationId: reviewCommentsModerationPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCommentSearchRequestV1'
      responses:
        '200':
          description: 'Return reviews comment moderation records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCommentSearchResponseV1'
  '/reviews/{id}/comments/search':
    post:
      tags:
        - reviews
      summary: 'search review comments'
      operationId: searchReviewCommentsPost
      parameters:
        -
          name: id
          in: path
          description: 'Review id'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCommentSearchRequestV1'
      responses:
        '200':
          description: 'Return review comment records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCommentSearchResponseV1'
  '/reviews/{id}':
    get:
      tags:
        - reviews
      summary: 'get a specific review'
      operationId: retrieveReview
      parameters:
        -
          name: id
          in: path
          description: 'Review id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
      responses:
        '404':
          description: 'Review not found'
        '200':
          description: 'Return review record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewModelV1'
    delete:
      tags:
        - reviews
      summary: 'delete a review'
      operationId: deleteReview
      parameters:
        -
          name: id
          in: path
          description: 'id of review'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Review was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Review not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - reviews
      summary: 'update a review'
      operationId: updateReview
      parameters:
        -
          name: id
          in: path
          description: 'id of review'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewModelUpdateV1'
      responses:
        '200':
          description: 'Review was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role or own the review'
        '404':
          description: 'Review not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  /reviews/search:
    post:
      tags:
        - reviews
      summary: 'search reviews'
      operationId: searchReviewsPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewSearchRequestV1'
      responses:
        '200':
          description: 'Return review records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewSearchResponseV1'
  /series:
    post:
      tags:
        - series
      summary: 'add an series'
      operationId: addSeries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesModelUpdateV1'
      responses:
        '200':
          description: 'Series was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/series/{id}/categories/combine':
    post:
      tags:
        - series
      summary: 'combine two series categories'
      operationId: combineSeriesCategories
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesCategoryUpdateModelV1'
      responses:
        '200':
          description: 'Series categories were combined'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Series or category not found'
        '412':
          description: 'Five second update delay'
  '/series/{id}/categories/delete':
    post:
      tags:
        - series
      summary: 'deletes a series category'
      operationId: deleteSeriesCategory
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoriesModelUpdateV1'
      responses:
        '200':
          description: 'Series category was removed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Series or category not found'
        '412':
          description: 'Five second update delay'
  '/series/{id}/categories/rename':
    post:
      tags:
        - series
      summary: 'renames a series category'
      operationId: renameSeriesCategory
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesCategoryUpdateModelV1'
      responses:
        '200':
          description: 'Series category was renamed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Series or category not found'
        '412':
          description: 'Five second update delay'
  '/series/{id}/categories/votes':
    get:
      tags:
        - series
      summary: 'get category votes for the current user'
      operationId: retrieveSeriesCategoryVotes
      parameters:
        -
          name: id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Return vote records'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SeriesCategoryVoteModelV1'
  '/series/{id}/categories/vote':
    post:
      tags:
        - series
      summary: 'add a vote for a category on a series'
      operationId: addSeriesCategoryVote
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesCategoryVoteModelV1'
      responses:
        '200':
          description: 'Series category vote was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Series not found'
  '/series/{id}/categories/vote/delete':
    post:
      tags:
        - series
      summary: 'remove series category vote for user'
      operationId: removeSeriesCategoryVote
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesCategoryVoteDeleteModelV1'
      responses:
        '200':
          description: 'Series category vote was removed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Series or comment not found'
      security:
        -
          bearerAuth: []
  '/series/{id}/comments':
    post:
      tags:
        - series
      summary: 'add a series comment'
      operationId: addSeriesComment
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesCommentModelUpdateV1'
      responses:
        '200':
          description: 'Series comment was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/series/{id}/comments/{comment_id}':
    get:
      tags:
        - series
      summary: 'get a specific series comment'
      operationId: retrieveSeriesComment
      parameters:
        -
          name: id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: comment_id
          in: path
          description: 'Series comment id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
      responses:
        '404':
          description: 'Series or comment not found'
        '200':
          description: 'Return series comment record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesCommentModelV1'
    delete:
      tags:
        - series
      summary: 'delete a series comment'
      operationId: deleteSeriesComment
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
        -
          name: comment_id
          in: path
          description: 'id of series comment'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Series comment was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role or own the series comment'
        '404':
          description: 'Series or comment not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - series
      summary: 'update a series comment'
      operationId: updateSeriesComment
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
        -
          name: comment_id
          in: path
          description: 'id of series comment'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesCommentModelUpdateV1'
      responses:
        '200':
          description: 'Series comment was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role or own the series comment'
        '404':
          description: 'Series or comment not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  /series/comments/moderation:
    post:
      tags:
        - series
      summary: 'moderate series comments'
      operationId: seriesCommentsModerationPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesCommentSearchRequestV1'
      responses:
        '200':
          description: 'Return series comment moderation records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesCommentModerationResponseV1'
  '/series/{id}/comments/{comment_id}/report':
    post:
      tags:
        - series
      summary: 'report a series comment'
      operationId: reportSeriesComment
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
        -
          name: comment_id
          in: path
          description: 'id of series comment'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesCommentReportModelV1'
      responses:
        '200':
          description: 'Series comment was reported'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Series or comment not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/series/{id}/comments/my_comment':
    get:
      tags:
        - series
      summary: 'get my series comment'
      operationId: retrieveMySeriesComment
      parameters:
        -
          name: id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
      responses:
        '404':
          description: 'Series or comment not found'
        '200':
          description: 'Return series comment record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesCommentModelV1'
  '/series/{id}/comments/{comment_id}/location':
    get:
      tags:
        - series
      summary: 'get a specific series comment location'
      operationId: retrieveSeriesCommentLocation
      parameters:
        -
          name: id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: comment_id
          in: path
          description: 'Series comment id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Return series comment location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
  '/series/{id}/comments/search':
    post:
      tags:
        - series
      summary: 'search series comments'
      operationId: searchSeriesCommentsPost
      parameters:
        -
          name: id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesCommentSearchRequestV1'
      responses:
        '200':
          description: 'Return series comment records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesCommentSearchResponseV1'
  '/series/{id}/comments/{comment_id}/useful':
    put:
      tags:
        - series
      summary: 'set usefulness of a series comment'
      operationId: addSeriesCommentUsefulFlag
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
        -
          name: comment_id
          in: path
          description: 'id of series comment'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesCommentUsefulModelV1'
      responses:
        '200':
          description: 'Series comment useful was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Series or comment not found'
    delete:
      tags:
        - series
      summary: 'remove usefulness of a series comment'
      operationId: removeSeriesCommentUsefulFlag
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
        -
          name: comment_id
          in: path
          description: 'id of series comment'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Series comment useful was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '404':
          description: 'Series or comment not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/series/{id}':
    get:
      tags:
        - series
      summary: 'get a specific series'
      operationId: retrieveSeries
      parameters:
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
        -
          name: id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: 'Series not found'
        '200':
          description: 'Return series record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesModelV1'
    delete:
      tags:
        - series
      summary: 'delete a series'
      operationId: deleteSeries
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Series was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Series not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - series
      summary: 'update an series'
      operationId: updateSeries
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesModelUpdateV1'
      responses:
        '200':
          description: 'Series was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'Field is locked'
        '404':
          description: 'Series not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/series/{id}/groups':
    get:
      tags:
        - series
      summary: 'get the list of groups scanlating a specific series'
      operationId: retrieveSeriesGroups
      parameters:
        -
          name: id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: 'Series not found'
        '200':
          description: 'Return series list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesGroupListResponseV1'
  '/series/{id}/history':
    post:
      tags:
        - series
      summary: 'search series history'
      operationId: searchSeriesHistoryPost
      parameters:
        -
          name: id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerPageSearchRequestV1'
      responses:
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '200':
          description: 'Return series records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesHistorySearchResponseV1'
  '/series/{id}/locks':
    get:
      tags:
        - series
      summary: 'get a specific series lock'
      operationId: retrieveSeriesLocks
      parameters:
        -
          name: id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: 'Series not found'
        '200':
          description: 'Return series lock records'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SeriesLockModelV1'
      security:
        -
          bearerAuth: []
  '/series/{id}/locks/{item}/lock':
    post:
      tags:
        - series
      summary: 'lock a field of an series'
      operationId: lockSeriesField
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: item
          in: path
          description: 'field name'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesLockModelUpdateV1'
      responses:
        '200':
          description: 'Field was locked'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Series not found'
        '409':
          description: 'Field is already locked'
      security:
        -
          bearerAuth: []
  '/series/{id}/locks/{item}/unlock':
    post:
      tags:
        - series
      summary: 'unlock a field of an series'
      operationId: unlockSeriesField
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: item
          in: path
          description: 'field name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Field was unlocked'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Series not found'
        '409':
          description: 'Field is already unlocked'
      security:
        -
          bearerAuth: []
  '/series/{id}/rank/{type}':
    get:
      tags:
        - series
      summary: 'get a specific series rank location'
      operationId: retrieveSeriesRankLocation
      parameters:
        -
          name: id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: type
          in: path
          description: 'Stat type'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Return series rank location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
      security:
        -
          bearerAuth: []
  '/series/{id}/rating':
    get:
      tags:
        - series
      summary: 'get a specific series rating for a user'
      operationId: retrieveUserSeriesRating
      parameters:
        -
          name: id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: 'Series not found'
        '200':
          description: 'Return series rating records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesRatingModelV1'
      security:
        -
          bearerAuth: []
    put:
      tags:
        - series
      summary: 'update the user rating for a series'
      operationId: updateUserSeriesRating
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesRatingModelV1'
      responses:
        '200':
          description: 'Series rating was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Series not found'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - series
      summary: 'delete a series rating for a user'
      operationId: deleteUserSeriesRating
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Series rating was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Series not found'
      security:
        -
          bearerAuth: []
  '/series/{id}/ratingrainbow':
    get:
      tags:
        - series
      summary: 'get a the series rating rainbow'
      operationId: retrieveSeriesRatingRainbow
      parameters:
        -
          name: id
          in: path
          description: 'Series id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: 'Series not found'
        '200':
          description: 'Return series rating records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesRatingRainbowModelV1'
      security:
        -
          bearerAuth: []
  '/series/{id}/rss':
    get:
      tags:
        - series
      summary: 'releases rss feed for a specific series'
      operationId: seriesReleaseRssFeed
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Return release feed'
          content:
            application/xml:
              schema:
                type: string
  /series/search:
    post:
      tags:
        - series
      summary: 'search series'
      operationId: searchSeriesPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeriesSearchRequestV1'
      responses:
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '200':
          description: 'Return series records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesSearchResponseV1'
  '/series/{id}/image':
    post:
      tags:
        - series
      summary: 'update the image of an series'
      operationId: updateSeriesImage
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                image:
                  description: 'Image to update'
                  type: string
                  format: binary
              type: object
      responses:
        '200':
          description: 'Image was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'Field is locked'
        '404':
          description: 'Series not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - series
      summary: 'delete the image of an series'
      operationId: deleteSeriesImage
      parameters:
        -
          name: id
          in: path
          description: 'id of series'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Image was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Series not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/membergroups/{id}':
    get:
      tags:
        - members
      summary: 'get user group'
      operationId: retrieveUserGroupById
      parameters:
        -
          name: id
          in: path
          description: 'user group id'
          required: true
          schema:
            type: string
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: 'Return user group'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupModelV1'
    put:
      tags:
        - members
      summary: 'add or update a user group'
      operationId: addOrUpdateUserGroup
      parameters:
        -
          name: id
          in: path
          description: 'user group id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupModelUpdateV1'
      responses:
        '200':
          description: 'user group was added or updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - members
      summary: 'delete a user group'
      operationId: deleteUserGroup
      parameters:
        -
          name: id
          in: path
          description: 'id of user group'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'User group was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'user group not found'
      security:
        -
          bearerAuth: []
  /membergroups:
    get:
      tags:
        - members
      summary: 'get user groups'
      operationId: retrieveUserGroups
      responses:
        '200':
          description: 'Return User Groups'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroupModelV1'
  /members:
    post:
      tags:
        - members
      summary: 'add a member'
      operationId: addMember
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModelUpdateV1'
      responses:
        '200':
          description: 'Member was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/members/{id}/requests':
    get:
      tags:
        - members
      summary: 'search change requests for a specific user'
      operationId: searchMemberChangeRequests
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: page
          in: query
          description: 'Start page'
          required: false
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page'
          required: false
          schema:
            type: integer
        -
          name: orderby
          in: query
          description: 'order by field'
          required: false
          schema:
            type: string
            default: time
            enum:
              - score
              - time
        -
          name: asc
          in: query
          description: 'Direction of results'
          required: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
      responses:
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Record not found'
        '200':
          description: 'Return member change requests'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserChangeRequestSearchResponseV1'
      security:
        -
          bearerAuth: []
    post:
      tags:
        - members
      summary: 'add a change request'
      operationId: addMemberChangeRequest
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChangeRequestModelUpdateV1'
      responses:
        '200':
          description: 'Change request was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Record not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/members/{id}/requests/{request_id}':
    get:
      tags:
        - members
      summary: 'get change requests for a specific user'
      operationId: retrieveMemberChangeRequest
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: request_id
          in: path
          description: 'Change request id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Record not found'
        '200':
          description: 'Return member change requests'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserChangeRequestModelV1'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - members
      summary: 'add a change request'
      operationId: deleteMemberChangeRequest
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: request_id
          in: path
          description: 'Change request id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Change request was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Record not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - members
      summary: 'update a change request'
      operationId: updateMemberChangeRequest
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: request_id
          in: path
          description: 'Change request id'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChangeRequestModelUpdateV1'
      responses:
        '200':
          description: 'Change request was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Record not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/members/{id}':
    get:
      tags:
        - members
      summary: 'get a specific members'
      operationId: retrieveMember
      parameters:
        -
          name: unrenderedFields
          in: query
          description: 'Output fields in unrendered form for editing'
          required: false
          schema:
            type: boolean
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: 'Member not found'
        '200':
          description: 'Return user record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModelV1'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - members
      summary: 'delete a member'
      operationId: deleteMember
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Member was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Member not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
    patch:
      tags:
        - members
      summary: 'update a member'
      operationId: updateMember
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModelUpdateV1'
      responses:
        '200':
          description: 'Member was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/members/{id}/genre/filters':
    get:
      tags:
        - members
      summary: 'get genre filters for a specific user'
      operationId: retrieveMemberGenreFilters
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
        '200':
          description: 'Return member filter records'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGenreFilterModelV1'
      security:
        -
          bearerAuth: []
  '/members/{id}/genre/{genre_id}/filter':
    post:
      tags:
        - members
      summary: 'filter a genre for a user'
      operationId: addMemberGenreFilter
      parameters:
        -
          name: id
          in: path
          description: 'id of member'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: genre_id
          in: path
          description: 'genre id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Filter was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Service or validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'Member does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - members
      summary: 'remove a filter for a genre for a user'
      operationId: removeMemberGenreFilter
      parameters:
        -
          name: id
          in: path
          description: 'id of member'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: genre_id
          in: path
          description: 'genre id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Filter was removed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Service or validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'Member does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
      security:
        -
          bearerAuth: []
  '/members/{id}/genre/highlights':
    get:
      tags:
        - members
      summary: 'get highlights for a specific user'
      operationId: retrieveMemberGenreHighlights
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
        '200':
          description: 'Return member highlight records'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGenreHighlightModelV1'
      security:
        -
          bearerAuth: []
  '/members/{id}/genre/{genre_id}/highlight':
    post:
      tags:
        - members
      summary: 'highlight a genre for a user'
      operationId: addMemberGenreHighlight
      parameters:
        -
          name: id
          in: path
          description: 'id of member'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: genre_id
          in: path
          description: 'genre id'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGenreHighlightModelUpdateV1'
      responses:
        '200':
          description: 'Highlight was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Service or validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'Member does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - members
      summary: 'remove a highlight for a genre for a user'
      operationId: removeMemberGenreHighlight
      parameters:
        -
          name: id
          in: path
          description: 'id of member'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: genre_id
          in: path
          description: 'genre id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Highlight was removed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Service or validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'Member does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
      security:
        -
          bearerAuth: []
  '/members/{id}/genre/reset':
    post:
      tags:
        - members
      summary: 'reset genre highlights and filters for a user'
      operationId: resetGenreSettings
      parameters:
        -
          name: id
          in: path
          description: 'id of member'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Filters and highlights were reset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'Member does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
      security:
        -
          bearerAuth: []
  '/members/{id}/group/filters':
    get:
      tags:
        - members
      summary: 'get group filters for a specific user'
      operationId: retrieveMemberGroupFilters
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
        '200':
          description: 'Return member filter records'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroupFilterModelV1'
      security:
        -
          bearerAuth: []
  '/members/{id}/group/{group_id}/filter':
    post:
      tags:
        - members
      summary: 'filter a group for a user'
      operationId: addUserGroupFilter
      parameters:
        -
          name: id
          in: path
          description: 'id of member'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: group_id
          in: path
          description: 'group id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Filter was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Service or validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'Member does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - members
      summary: 'remove a filter for a group for a user'
      operationId: removeUserGroupFilter
      parameters:
        -
          name: id
          in: path
          description: 'id of member'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: group_id
          in: path
          description: 'group id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Filter was removed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Service or validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'Member does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
      security:
        -
          bearerAuth: []
  '/members/{id}/avatars':
    get:
      tags:
        - members
      summary: 'get avatars for a specific user'
      operationId: retrieveMemberAvatars
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: 'Member not found'
        '200':
          description: 'Return user record'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvatarModelV1'
      security:
        -
          bearerAuth: []
  /members/search:
    post:
      tags:
        - members
      summary: 'search members'
      operationId: searchMembersPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSearchRequestV1'
      responses:
        '200':
          description: 'Return user records'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchResponseV1'
  '/members/{id}/topics':
    get:
      tags:
        - members
      summary: 'get topic subscriptions for a specific user'
      operationId: retrieveMemberTopicSubscriptions
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
        '200':
          description: 'Return member topic subscriptions'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSubscribedTopicModelV1'
      security:
        -
          bearerAuth: []
  '/members/{id}/topics/{topic_id}':
    get:
      tags:
        - members
      summary: 'get a subscription to a specific topic for a user'
      operationId: retrieveMemberTopicSubscription
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: topic_id
          in: path
          description: 'Topic id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member or subscription not found'
        '200':
          description: 'Return member topic subscriptions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscribedTopicModelV1'
      security:
        -
          bearerAuth: []
    post:
      tags:
        - members
      summary: 'add a topic subscription for a user'
      operationId: addUserTopicSubscription
      parameters:
        -
          name: id
          in: path
          description: 'id of member'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: topic_id
          in: path
          description: 'topic id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Topic Subscription was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Service or validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'Member does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member or Forum/Topic not found'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - members
      summary: 'remove a topic subscription for a user'
      operationId: removeUserTopicSubscription
      parameters:
        -
          name: id
          in: path
          description: 'id of member'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: topic_id
          in: path
          description: 'topic id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Topic subscription was removed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Service or validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'Member does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
      security:
        -
          bearerAuth: []
  '/members/{id}/avatar':
    post:
      tags:
        - members
      summary: 'add a new member avatar'
      operationId: addMemberAvatar
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                image:
                  description: 'Image to update'
                  type: string
                  format: binary
                title:
                  description: 'Title of the new avatar'
                  type: string
              type: object
      responses:
        '200':
          description: 'Image was added'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/members/{id}/avatar/{avatar_id}':
    delete:
      tags:
        - members
      summary: 'delete a member avatar'
      operationId: deleteMemberAvatar
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: avatar_id
          in: path
          description: 'Avatar id'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Avatar was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '403':
          description: 'User does not have permission'
        '404':
          description: 'Member or avatar not found'
        '412':
          description: 'Five second update delay'
      security:
        -
          bearerAuth: []
  '/members/{id}/upgrade/approve':
    post:
      tags:
        - members
      summary: 'upgrade a member'
      operationId: approveMemberUpgrade
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Member was upgraded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Member not found'
      security:
        -
          bearerAuth: []
  '/members/{id}/upgrade/reject':
    post:
      tags:
        - members
      summary: 'reject a member upgrade'
      operationId: rejectMemberUpgrade
      parameters:
        -
          name: id
          in: path
          description: 'Member id'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Member upgrade was rejected'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '400':
          description: 'Validation or service error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseV1'
        '401':
          description: 'User does not have correct role'
        '404':
          description: 'Member not found'
      security:
        -
          bearerAuth: []
components:
  schemas:
    AboutusCategoryModelV1:
      required:
        - category_id
      properties:
        category_id:
          title: category_id
          type: integer
        position:
          title: position
          type: integer
        title:
          title: title
          type: string
        users:
          title: users
          type: array
          items:
            $ref: '#/components/schemas/AboutusUserModelV1'
    AboutusCategoryModelUpdateV1:
      properties:
        title:
          title: title
          type: string
    AboutusCategoryReorderModelV1:
      required:
        - category_id
      properties:
        category_id:
          title: category_id
          type: integer
        position:
          title: position
          type: integer
        users:
          title: users
          type: array
          items:
            $ref: '#/components/schemas/AboutusUserReorderModelV1'
    AboutusDescriptionModelV1:
      properties:
        description:
          title: description
          type: string
    AboutusUserModelV1:
      required:
        - entry_id
      properties:
        entry_id:
          title: entry_id
          type: integer
        position:
          title: position
          type: integer
        username:
          title: username
          type: string
        user_id:
          title: user_id
          type: integer
    AboutusUserModelUpdateV1:
      properties:
        username:
          title: username
          type: string
    AboutusUserReorderModelV1:
      required:
        - entry_id
      properties:
        entry_id:
          title: entry_id
          type: integer
        position:
          title: position
          type: integer
    AccountForgotPassModelV1:
      properties:
        email:
          title: email
          type: string
    AccountLoginModelV1:
      properties:
        username:
          title: username
          type: string
        password:
          title: password
          type: string
          format: password
    ApiResponseV1:
      title: ApiResponseV1
      required:
        - status
        - reason
      properties:
        status:
          type: string
        reason:
          type: string
        context:
          type: object
      type: object
    AuthorsLockModelV1:
      properties:
        field:
          title: field
          type: string
        reason:
          title: reason
          type: string
        user_id:
          title: user_id
          type: integer
        username:
          title: username
          type: string
        time_locked:
          $ref: '#/components/schemas/TimeV1'
    AuthorsLockModelUpdateV1:
      properties:
        reason:
          title: reason
          type: string
    AuthorsModelV1:
      properties:
        id:
          title: id
          type: integer
        name:
          title: name
          type: string
        url:
          title: url
          type: string
        associated:
          title: associated
          type: array
          items:
            title: AuthorsModelV1Associated
            properties:
              name:
                title: name
                type: string
            type: object
        image:
          $ref: '#/components/schemas/ImageModelV1'
        actualname:
          title: actualname
          type: string
        birthday:
          $ref: '#/components/schemas/BirthdayModelV1'
        birthplace:
          title: birthplace
          type: string
        bloodtype:
          title: bloodtype
          type: string
          enum:
            - N/A
            - A
            - B
            - AB
            - O
        gender:
          title: gender
          type: string
          enum:
            - N/A
            - Male
            - Female
            - Other
        genres:
          title: genres
          type: array
          items:
            title: AuthorsModelV1Genres
            type: string
        stats:
          title: AuthorsModelV1Stats
          properties:
            total_series:
              title: total_series
              type: integer
          type: object
        social:
          title: AuthorsModelV1Social
          properties:
            officialsite:
              title: officialsite
              type: string
            facebook:
              title: facebook
              type: string
            twitter:
              title: twitter
              type: string
          type: object
        comments:
          title: comments
          type: string
        last_updated:
          $ref: '#/components/schemas/TimeV1'
        added_by:
          $ref: '#/components/schemas/UserModelSearchV1'
        admin:
          title: AuthorsModelV1Admin
          properties:
            approved:
              title: approved
              type: boolean
          type: object
    AuthorsModelUpdateV1:
      properties:
        name:
          title: name
          type: string
        associated:
          title: associated
          type: array
          items:
            title: AuthorsModelUpdateV1Associated
            properties:
              name:
                title: name
                type: string
            type: object
        actualname:
          title: actualname
          type: string
        birthday:
          $ref: '#/components/schemas/BirthdayModelV1'
        birthplace:
          title: birthplace
          type: string
        bloodtype:
          title: bloodtype
          type: string
          enum:
            - N/A
            - A
            - B
            - AB
            - O
        gender:
          title: gender
          type: string
          enum:
            - N/A
            - Male
            - Female
            - Other
        social:
          title: AuthorsModelUpdateV1Social
          properties:
            officialsite:
              title: officialsite
              type: string
            facebook:
              title: facebook
              type: string
            twitter:
              title: twitter
              type: string
          type: object
        comments:
          title: comments
          type: string
        admin:
          title: AuthorsModelUpdateV1Admin
          properties:
            approved:
              title: approved
              type: boolean
          type: object
    AuthorsModelSearchV1:
      properties:
        id:
          title: id
          type: integer
        name:
          title: name
          type: string
        url:
          title: url
          type: string
        genres:
          title: genres
          type: array
          items:
            title: AuthorsModelSearchV1Genres
            type: string
        stats:
          title: AuthorsModelSearchV1Stats
          properties:
            total_series:
              title: total_series
              type: integer
          type: object
        added_by:
          $ref: '#/components/schemas/UserModelSearchV1'
    AuthorsSearchRequestV1:
      properties:
        search:
          title: search
          type: string
        added_by:
          title: added_by
          type: integer
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
        letter:
          title: letter
          type: string
        genre:
          title: genre
          type: array
          items:
            title: AuthorsSearchRequestV1Genre
            type: string
        orderby:
          title: orderby
          type: string
          enum:
            - name
            - series
            - score
        pending:
          title: pending
          type: boolean
    AuthorsSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: AuthorsSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/AuthorsModelSearchV1'
              hit_name:
                title: hit_name
                type: string
              hit_genre:
                title: hit_genre
                type: array
                items:
                  title: AuthorsSearchResponseV1ResultsHitGenre
                  type: string
            type: object
    AuthorsSeriesListRequestV1:
      properties:
        orderby:
          title: orderby
          type: string
          enum:
            - title
            - year
    AuthorsSeriesListResponseV1:
      properties:
        total_series:
          title: total_series
          type: integer
        series_list:
          title: series_list
          type: array
          items:
            title: AuthorsSeriesListResponseV1SeriesList
            properties:
              title:
                title: title
                type: string
              series_id:
                title: series_id
                type: integer
              year:
                title: year
                type: string
              last_updated:
                $ref: '#/components/schemas/TimeV1'
              genres:
                title: genres
                type: array
                items:
                  title: AuthorsSeriesListResponseV1SeriesListGenres
                  type: string
              metadata:
                title: AuthorsSeriesListResponseV1SeriesListMetadata
                properties:
                  user_list: { $ref: '#/components/schemas/ListsSeriesModelV1' }
                type: object
            type: object
        genre_list:
          title: genre_list
          type: array
          items:
            title: AuthorsSeriesListResponseV1GenreList
            properties:
              genre:
                title: genre
                type: string
              count:
                title: count
                type: integer
            type: object
    CategoriesModelSearchV1:
      properties:
        category:
          title: category
          type: string
        usage:
          title: usage
          type: integer
        votes:
          title: votes
          type: integer
        votes_plus:
          title: votes_plus
          type: integer
        votes_minus:
          title: votes_minus
          type: integer
    CategoriesModelV1:
      properties:
        series_id:
          title: series_id
          type: integer
        category:
          title: category
          type: string
        votes:
          title: votes
          type: integer
        votes_plus:
          title: votes_plus
          type: integer
        votes_minus:
          title: votes_minus
          type: integer
        added_by:
          title: added_by
          type: integer
    CategoriesModelUpdateV1:
      properties:
        category:
          title: category
          type: string
    CategoriesSearchRequestV1:
      properties:
        search:
          title: search
          type: string
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
        letter:
          title: letter
          type: string
        orderby:
          title: orderby
          type: string
          enum:
            - category
            - agree
            - disagree
            - usage
    CategoriesSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: CategoriesSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/CategoriesModelSearchV1'
            type: object
    BirthdayModelV1:
      properties:
        month:
          title: month
          type: integer
        day:
          title: day
          type: integer
        year:
          title: year
          type: integer
        as_string:
          title: as_string
          type: string
        zodiac:
          title: zodiac
          type: string
    PerPageSearchRequestV1:
      properties:
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
    ConvoBulkModelV1:
      properties:
        convo_id_list:
          title: convo_id_list
          type: array
          items:
            title: ConvoBulkModelV1ConvoIdList
            type: integer
    ConvoMessageListRequestV1:
      properties:
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
    ConvoMessageModelV1:
      properties:
        message_id:
          title: message_id
          type: integer
        convo_id:
          title: convo_id
          type: integer
        author_id:
          title: author_id
          type: integer
        author_name:
          title: author_name
          type: string
        is_admin:
          title: is_admin
          type: boolean
        content:
          title: content
          type: string
        time_added:
          $ref: '#/components/schemas/TimeV1'
        last_edit:
          $ref: '#/components/schemas/TimeV1'
    ConvoMessageModelUpdateV1:
      properties:
        content:
          title: content
          type: string
    ConvoMessageSearchRequestV1:
      properties:
        search:
          title: search
          type: string
        added_by:
          title: added_by
          type: integer
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
    ConvoMessageSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: ConvoMessageSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/ConvoMessageModelV1'
              metadata:
                title: ConvoMessageSearchResponseV1ResultsMetadata
                properties:
                  user_ignored: { title: user_ignored, type: boolean }
                type: object
            type: object
    ConvoModelAddV1:
      properties:
        topic:
          title: topic
          type: string
        participants:
          title: participants
          type: array
          items:
            $ref: '#/components/schemas/ConvoParticipantModelAddV1'
        message:
          $ref: '#/components/schemas/ConvoMessageModelUpdateV1'
    ConvoModelV1:
      properties:
        convo_id:
          title: convo_id
          type: integer
        topic:
          title: topic
          type: string
        author_id:
          title: author_id
          type: integer
        author_name:
          title: author_name
          type: string
        time_added:
          $ref: '#/components/schemas/TimeV1'
        last_edit:
          $ref: '#/components/schemas/TimeV1'
    ConvoModelUpdateV1:
      properties:
        topic:
          title: topic
          type: string
    ConvoParticipantModelAddV1:
      properties:
        to:
          title: to
          type: string
    ConvoParticipantModelV1:
      properties:
        user_id:
          title: user_id
          type: integer
        username:
          title: username
          type: string
        is_admin:
          title: is_admin
          type: boolean
        time_added:
          $ref: '#/components/schemas/TimeV1'
        last_time_seen:
          $ref: '#/components/schemas/TimeV1'
        joined:
          title: joined
          type: boolean
    ConvoSearchRequestV1:
      properties:
        search:
          title: search
          type: string
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
    ConvoSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: ConvoSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/ConvoModelV1'
              metadata:
                title: ConvoSearchResponseV1ResultsMetadata
                properties:
                  message: { $ref: '#/components/schemas/ConvoMessageModelV1' }
                  participant: { $ref: '#/components/schemas/ConvoParticipantModelV1' }
                type: object
            type: object
    ConvoUserIgnoreModelV1:
      properties:
        user_ignored:
          title: user_ignored
          type: boolean
    FaqCategoryModelV1:
      required:
        - category_id
      properties:
        category_id:
          title: category_id
          type: integer
        title:
          title: title
          type: string
        position:
          title: position
          type: integer
    FaqCategoryQuestionsModelV1:
      required:
        - category_id
      properties:
        category_id:
          title: category_id
          type: integer
        title:
          title: title
          type: string
        questions:
          title: questions
          type: array
          items:
            $ref: '#/components/schemas/FaqQuestionOnlyModelV1'
        position:
          title: position
          type: integer
    FaqCategoryModelUpdateV1:
      properties:
        title:
          title: title
          type: string
    FaqCategoryReorderModelV1:
      required:
        - category_id
      properties:
        category_id:
          title: category_id
          type: integer
        position:
          title: position
          type: integer
        questions:
          title: questions
          type: array
          items:
            $ref: '#/components/schemas/FaqQuestionReorderModelV1'
    FaqQuestionModelV1:
      required:
        - question_id
      properties:
        question_id:
          title: question_id
          type: integer
        question:
          title: question
          type: string
        answer:
          title: answer
          type: string
        position:
          title: position
          type: integer
    FaqQuestionOnlyModelV1:
      required:
        - question_id
      properties:
        question_id:
          title: question_id
          type: integer
        question:
          title: question
          type: string
        position:
          title: position
          type: integer
    FaqQuestionModelUpdateV1:
      properties:
        question:
          title: question
          type: string
        answer:
          title: answer
          type: string
    FaqQuestionReorderModelV1:
      required:
        - question_id
      properties:
        question_id:
          title: question_id
          type: integer
        position:
          title: position
          type: integer
    ForumAdminHistoryModelV1:
      properties:
        user:
          $ref: '#/components/schemas/UserModelSearchV1'
        action_time:
          $ref: '#/components/schemas/TimeV1'
        action:
          title: action
          type: string
    ForumAdminHistorySearchRequestV1:
      properties:
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
        uid:
          title: uid
          type: integer
    ForumAdminHistorySearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: ForumAdminHistorySearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/ForumAdminHistoryModelV1'
            type: object
    ForumAdminModelV1:
      properties:
        user:
          $ref: '#/components/schemas/UserModelSearchV1'
        user_id:
          title: user_id
          type: integer
    ForumAdminModelUpdateV1:
      properties:
        user_id:
          title: user_id
          type: integer
    ForumCategoryModelV1:
      properties:
        category_id:
          title: category_id
          type: integer
        name:
          title: name
          type: string
        position:
          title: position
          type: integer
    ForumCategoryModelListV1:
      properties:
        category_id:
          title: category_id
          type: integer
        name:
          title: name
          type: string
        forums:
          title: forums
          type: array
          items:
            title: ForumCategoryModelListV1Forums
            properties:
              forum:
                $ref: '#/components/schemas/ForumForumModelListV1'
            type: object
    ForumCategoryModelUpdateV1:
      properties:
        name:
          title: name
          type: string
        position:
          title: position
          type: integer
    ForumForumModelV1:
      properties:
        forum_id:
          title: forum_id
          type: integer
        name:
          title: name
          type: string
        url:
          title: url
          type: string
        description:
          title: description
          type: string
        position:
          title: position
          type: integer
        category:
          title: ForumForumModelV1Category
          properties:
            category_id:
              title: category_id
              type: integer
            category_name:
              title: category_name
              type: string
          type: object
        moderators:
          title: moderators
          type: array
          items:
            $ref: '#/components/schemas/ForumAdminModelV1'
        series:
          $ref: '#/components/schemas/SeriesModelSearchV1'
        stats:
          title: ForumForumModelV1Stats
          properties:
            topics:
              title: topics
              type: integer
            posts:
              title: posts
              type: integer
          type: object
        last_topic:
          $ref: '#/components/schemas/ForumTopicModelSearchV1'
        admin:
          title: ForumForumModelV1Admin
          properties:
            locked:
              title: locked
              type: boolean
            hidden:
              title: hidden
              type: boolean
            verify_age:
              title: verify_age
              type: boolean
          type: object
    ForumForumModelListV1:
      properties:
        forum_id:
          title: forum_id
          type: integer
        name:
          title: name
          type: string
        url:
          title: url
          type: string
        description:
          title: description
          type: string
        position:
          title: position
          type: integer
        moderators:
          title: moderators
          type: array
          items:
            $ref: '#/components/schemas/ForumAdminModelV1'
        series:
          $ref: '#/components/schemas/SeriesModelSearchV1'
        stats:
          title: ForumForumModelListV1Stats
          properties:
            topics:
              title: topics
              type: integer
            posts:
              title: posts
              type: integer
          type: object
        last_topic:
          $ref: '#/components/schemas/ForumTopicModelSearchV1'
        admin:
          title: ForumForumModelListV1Admin
          properties:
            locked:
              title: locked
              type: boolean
            hidden:
              title: hidden
              type: boolean
            verify_age:
              title: verify_age
              type: boolean
          type: object
    ForumForumModelUpdateV1:
      properties:
        name:
          title: name
          type: string
        description:
          title: description
          type: string
        position:
          title: position
          type: integer
        admin:
          title: ForumForumModelUpdateV1Admin
          properties:
            locked:
              title: locked
              type: boolean
            hidden:
              title: hidden
              type: boolean
            verify_age:
              title: verify_age
              type: boolean
          type: object
    ForumLookupResponseV1:
      properties:
        topic_id:
          title: topic_id
          type: integer
        forum_id:
          title: forum_id
          type: integer
    ForumPollAnswerModelV1:
      required:
        - answer_id
        - answer
      properties:
        answer_id:
          title: answer_id
          type: integer
        answer:
          title: answer
          type: string
        votes:
          title: votes
          type: integer
        image:
          title: ForumPollAnswerModelV1Image
          properties:
            height:
              title: height
              type: integer
            width:
              title: width
              type: integer
            filename:
              title: filename
              type: string
          type: object
    ForumPollAnswerModelUpdateV1:
      required:
        - answer_id
        - answer
      properties:
        answer_id:
          title: answer_id
          type: integer
        answer:
          title: answer
          type: string
        temp_image_id:
          title: temp_image_id
          type: integer
    ForumPollModelV1:
      properties:
        question:
          title: question
          type: string
        answers:
          title: answers
          type: array
          items:
            $ref: '#/components/schemas/ForumPollAnswerModelV1'
        votes:
          title: votes
          type: integer
        admin:
          title: ForumPollModelV1Admin
          properties:
            image_poll:
              title: image_poll
              type: boolean
          type: object
    ForumPollModelUpdateV1:
      properties:
        question:
          title: question
          type: string
        answers:
          title: answers
          type: array
          items:
            $ref: '#/components/schemas/ForumPollAnswerModelUpdateV1'
    ForumPollTempImageModelV1:
      properties:
        image_id:
          title: image_id
          type: integer
        caption:
          title: caption
          type: string
        url:
          title: ForumPollTempImageModelV1Url
          properties:
            original:
              title: original
              type: string
            thumb:
              title: thumb
              type: string
          type: object
        height:
          title: height
          type: integer
        width:
          title: width
          type: integer
        time_added:
          $ref: '#/components/schemas/TimeV1'
    ForumPollVoteModelV1:
      properties:
        choice_id:
          title: choice_id
          type: integer
    ForumPostByUserResponseV1:
      properties:
        topic_id:
          title: topic_id
          type: integer
        post_id_list:
          title: post_id_list
          type: array
          items:
            title: ForumPostByUserResponseV1PostIdList
            type: integer
    ForumPostListResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: ForumPostListResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/ForumPostModelV1'
              metadata:
                title: ForumPostListResponseV1ResultsMetadata
                properties:
                  user_warn: { $ref: '#/components/schemas/ForumWarnModelPublicV1' }
                  reported: { title: reported, type: boolean }
                  is_moderator: { title: is_moderator, type: boolean }
                  is_forum_admin: { title: is_forum_admin, type: boolean }
                type: object
            type: object
    ForumPostModelV1:
      properties:
        post_id:
          title: post_id
          type: integer
        body:
          title: body
          type: string
        topic:
          title: ForumPostModelV1Topic
          properties:
            forum_id:
              title: forum_id
              type: integer
            topic_id:
              title: topic_id
              type: integer
            topic:
              title: topic
              type: string
          type: object
        author:
          $ref: '#/components/schemas/UserModelSearchV1'
        reply_to:
          title: ForumPostModelV1ReplyTo
          properties:
            post_id:
              title: post_id
              type: integer
            post_author:
              title: ForumPostModelV1ReplyToPostAuthor
              properties:
                author_id:
                  title: author_id
                  type: integer
                author_name:
                  title: author_name
                  type: string
              type: object
          type: object
        last_edit:
          title: ForumPostModelV1LastEdit
          properties:
            by:
              title: by
              type: string
            time:
              $ref: '#/components/schemas/TimeV1'
          type: object
        time_added:
          $ref: '#/components/schemas/TimeV1'
    ForumPostModelSearchV1:
      properties:
        post_id:
          title: post_id
          type: integer
        body_excerpt:
          title: body_excerpt
          type: string
        topic:
          title: ForumPostModelSearchV1Topic
          properties:
            forum_id:
              title: forum_id
              type: integer
            topic_id:
              title: topic_id
              type: integer
            topic:
              title: topic
              type: string
          type: object
        author:
          $ref: '#/components/schemas/UserModelSearchV1'
        time_added:
          $ref: '#/components/schemas/TimeV1'
    ForumPostModelUpdateV1:
      properties:
        body:
          title: body
          type: string
        reply_to:
          title: reply_to
          type: integer
    ForumPostReportModelV1:
      properties:
        report_id:
          title: report_id
          type: integer
        topic_id:
          title: topic_id
          type: integer
        topic:
          $ref: '#/components/schemas/ForumTopicModelSearchV1'
        post_id:
          title: post_id
          type: integer
        post:
          $ref: '#/components/schemas/ForumPostModelSearchV1'
        user_id:
          title: user_id
          type: integer
        user:
          $ref: '#/components/schemas/UserModelSearchV1'
        reason:
          title: reason
          type: string
    ForumPostReportModelUpdateV1:
      properties:
        reason:
          title: reason
          type: string
    ForumSearchRequestV1:
      properties:
        search_by:
          title: search_by
          type: string
          enum:
            - post
            - topic
        method:
          title: method
          type: string
          enum:
            - fulltext
            - exact
        search:
          title: search
          type: string
        since:
          title: since
          type: integer
        after_id:
          title: after_id
          type: integer
        before_id:
          title: before_id
          type: integer
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
        by_user_id:
          title: by_user_id
          type: integer
        filter_user_id:
          title: filter_user_id
          type: integer
    ForumSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        topic_results:
          title: topic_results
          type: array
          items:
            title: ForumSearchResponseV1TopicResults
            properties:
              record:
                $ref: '#/components/schemas/ForumTopicModelSearchV1'
              metadata:
                title: ForumSearchResponseV1TopicResultsMetadata
                properties:
                  is_subscribed: { title: is_subscribed, type: boolean }
                  my_latest_post_in_topic: { title: my_latest_post_in_topic, type: integer }
                type: object
            type: object
        post_results:
          title: post_results
          type: array
          items:
            title: ForumSearchResponseV1PostResults
            properties:
              record:
                $ref: '#/components/schemas/ForumPostModelSearchV1'
              metadata:
                title: ForumSearchResponseV1PostResultsMetadata
                properties:
                  is_subscribed: { title: is_subscribed, type: boolean }
                  my_latest_post_in_topic: { title: my_latest_post_in_topic, type: integer }
                  forum_info: { title: ForumSearchResponseV1PostResultsMetadataForumInfo, properties: { forum_id: { title: forum_id, type: integer }, forum_name: { title: forum_name, type: string } }, type: object }
                  topic_stats: { title: ForumSearchResponseV1PostResultsMetadataTopicStats, properties: { posts: { title: posts, type: integer }, views: { title: views, type: integer } }, type: object }
                type: object
            type: object
    ForumTopicListRequestV1:
      properties:
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
        orderby:
          title: orderby
          type: string
          enum:
            - last_post_date
            - topic_start_date
    ForumTopicListResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: ForumTopicListResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/ForumTopicModelSearchV1'
              metadata:
                title: ForumTopicListResponseV1ResultsMetadata
                properties:
                  first_post: { $ref: '#/components/schemas/ForumPostModelV1' }
                type: object
            type: object
    ForumTopicModelAddV1:
      properties:
        topic:
          $ref: '#/components/schemas/ForumTopicModelUpdateV1'
        post:
          $ref: '#/components/schemas/ForumPostModelUpdateV1'
        poll:
          $ref: '#/components/schemas/ForumPollModelUpdateV1'
    ForumTopicModelV1:
      properties:
        topic_id:
          title: topic_id
          type: integer
        topic:
          title: topic
          type: string
        url:
          title: url
          type: string
        last_post:
          $ref: '#/components/schemas/ForumPostModelSearchV1'
        stats:
          title: ForumTopicModelV1Stats
          properties:
            posts:
              title: posts
              type: integer
            views:
              title: views
              type: integer
          type: object
        forum:
          title: ForumTopicModelV1Forum
          properties:
            forum_id:
              title: forum_id
              type: integer
            forum_name:
              title: forum_name
              type: string
          type: object
        is_poll:
          title: is_poll
          type: boolean
        poll:
          $ref: '#/components/schemas/ForumPollModelV1'
        admin:
          title: ForumTopicModelV1Admin
          properties:
            pinned:
              title: pinned
              type: boolean
            locked:
              title: locked
              type: boolean
            global:
              title: global
              type: boolean
          type: object
        topic_starter:
          $ref: '#/components/schemas/UserModelSearchV1'
        time_added:
          $ref: '#/components/schemas/TimeV1'
    ForumTopicModelSearchV1:
      properties:
        topic_id:
          title: topic_id
          type: integer
        topic:
          title: topic
          type: string
        url:
          title: url
          type: string
        last_post:
          $ref: '#/components/schemas/ForumPostModelSearchV1'
        stats:
          title: ForumTopicModelSearchV1Stats
          properties:
            posts:
              title: posts
              type: integer
            views:
              title: views
              type: integer
          type: object
        forum:
          title: ForumTopicModelSearchV1Forum
          properties:
            forum_id:
              title: forum_id
              type: integer
            forum_name:
              title: forum_name
              type: string
          type: object
        is_poll:
          title: is_poll
          type: boolean
        admin:
          title: ForumTopicModelSearchV1Admin
          properties:
            pinned:
              title: pinned
              type: boolean
            locked:
              title: locked
              type: boolean
            global:
              title: global
              type: boolean
          type: object
        topic_starter:
          $ref: '#/components/schemas/UserModelSearchV1'
        time_added:
          $ref: '#/components/schemas/TimeV1'
    ForumTopicModelUpdateV1:
      properties:
        topic:
          title: topic
          type: string
        forum:
          title: ForumTopicModelUpdateV1Forum
          properties:
            forum_id:
              title: forum_id
              type: integer
          type: object
        admin:
          title: ForumTopicModelUpdateV1Admin
          properties:
            pinned:
              title: pinned
              type: boolean
            locked:
              title: locked
              type: boolean
            global:
              title: global
              type: boolean
          type: object
    ForumWarnModelV1:
      required:
        - level
        - reason
      properties:
        user_id:
          title: user_id
          type: integer
        time_added:
          $ref: '#/components/schemas/TimeV1'
        level:
          title: level
          type: integer
        reason:
          title: reason
          type: string
        send_reason:
          title: send_reason
          type: boolean
        by_user:
          $ref: '#/components/schemas/UserModelSearchV1'
    ForumWarnModelPublicV1:
      required:
        - level
      properties:
        time_added:
          $ref: '#/components/schemas/TimeV1'
        level:
          title: level
          type: integer
    ForumWarnModelUpdateV1:
      required:
        - level
        - reason
      properties:
        level:
          title: level
          type: integer
        reason:
          title: reason
          type: string
        send_reason:
          title: send_reason
          type: boolean
    GenreModelV1:
      properties:
        id:
          title: id
          type: integer
        genre:
          title: genre
          type: string
        description:
          title: description
          type: string
        demographic:
          title: demographic
          type: boolean
    GenreModelStatsV1:
      properties:
        id:
          title: id
          type: integer
        genre:
          title: genre
          type: string
        description:
          title: description
          type: string
        stats:
          title: GenreModelStatsV1Stats
          properties:
            series:
              title: series
              type: integer
            authors:
              title: authors
              type: integer
            filters:
              title: filters
              type: integer
            highlights:
              title: highlights
              type: integer
          type: object
        demographic:
          title: demographic
          type: boolean
    GenreModelUpdateV1:
      properties:
        genre:
          title: genre
          type: string
        description:
          title: description
          type: string
        demographic:
          title: demographic
          type: boolean
    GroupsModelV1:
      properties:
        group_id:
          title: group_id
          type: integer
        name:
          title: name
          type: string
        url:
          title: url
          type: string
        associated:
          title: associated
          type: array
          items:
            title: GroupsModelV1Associated
            properties:
              name:
                title: name
                type: string
            type: object
        social:
          title: GroupsModelV1Social
          properties:
            site:
              title: site
              type: string
            facebook:
              title: facebook
              type: string
            twitter:
              title: twitter
              type: string
            irc:
              title: GroupsModelV1SocialIrc
              properties:
                channel:
                  title: channel
                  type: string
                server:
                  title: server
                  type: string
              type: object
            forum:
              title: forum
              type: string
            discord:
              title: discord
              type: string
          type: object
        active:
          title: active
          type: boolean
        notes:
          title: notes
          type: string
        added_by:
          $ref: '#/components/schemas/UserModelSearchV1'
        admin:
          title: GroupsModelV1Admin
          properties:
            approved:
              title: approved
              type: boolean
            hold:
              title: hold
              type: boolean
          type: object
    GroupsModelSearchV1:
      properties:
        group_id:
          title: group_id
          type: integer
        name:
          title: name
          type: string
        url:
          title: url
          type: string
        social:
          title: GroupsModelSearchV1Social
          properties:
            site:
              title: site
              type: string
            facebook:
              title: facebook
              type: string
            twitter:
              title: twitter
              type: string
            irc:
              title: GroupsModelSearchV1SocialIrc
              properties:
                channel:
                  title: channel
                  type: string
                server:
                  title: server
                  type: string
              type: object
            forum:
              title: forum
              type: string
            discord:
              title: discord
              type: string
          type: object
        active:
          title: active
          type: boolean
        notes:
          title: notes
          type: string
        added_by:
          $ref: '#/components/schemas/UserModelSearchV1'
    GroupsModelUpdateV1:
      properties:
        name:
          title: name
          type: string
        associated:
          title: associated
          type: array
          items:
            title: GroupsModelUpdateV1Associated
            properties:
              name:
                title: name
                type: string
            type: object
        social:
          title: GroupsModelUpdateV1Social
          properties:
            site:
              title: site
              type: string
            facebook:
              title: facebook
              type: string
            twitter:
              title: twitter
              type: string
            irc:
              title: GroupsModelUpdateV1SocialIrc
              properties:
                channel:
                  title: channel
                  type: string
                server:
                  title: server
                  type: string
              type: object
            forum:
              title: forum
              type: string
            discord:
              title: discord
              type: string
          type: object
        active:
          title: active
          type: boolean
        notes:
          title: notes
          type: string
        admin:
          title: GroupsModelUpdateV1Admin
          properties:
            approved:
              title: approved
              type: boolean
            hold:
              title: hold
              type: boolean
          type: object
    GroupsSearchRequestV1:
      properties:
        search:
          title: search
          type: string
        added_by:
          title: added_by
          type: integer
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
        letter:
          title: letter
          type: string
        active:
          title: active
          type: boolean
        pending:
          title: pending
          type: boolean
    GroupsSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: GroupsSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/GroupsModelSearchV1'
              hit_name:
                title: hit_name
                type: string
            type: object
    GroupsSeriesListResponseV1:
      properties:
        release_frequency:
          title: release_frequency
          type: string
        series_titles:
          title: series_titles
          type: array
          items:
            title: GroupsSeriesListResponseV1SeriesTitles
            properties:
              title:
                title: title
                type: string
              series_id:
                title: series_id
                type: integer
              last_updated:
                $ref: '#/components/schemas/TimeV1'
            type: object
        series_genres:
          title: series_genres
          type: array
          items:
            title: GroupsSeriesListResponseV1SeriesGenres
            properties:
              genre:
                title: genre
                type: string
              count:
                title: count
                type: integer
            type: object
        series_categories:
          title: series_categories
          type: array
          items:
            title: GroupsSeriesListResponseV1SeriesCategories
            properties:
              category:
                title: category
                type: string
              votes:
                title: votes
                type: integer
            type: object
    AvatarModelV1:
      properties:
        id:
          title: id
          type: integer
        url:
          title: url
          type: string
        title:
          title: title
          type: string
        extension:
          title: extension
          type: string
        height:
          title: height
          type: integer
        width:
          title: width
          type: integer
    AvatarModelSearchV1:
      properties:
        id:
          title: id
          type: integer
        url:
          title: url
          type: string
        height:
          title: height
          type: integer
        width:
          title: width
          type: integer
    AvatarModelUpdateV1:
      properties:
        title:
          title: title
          type: string
    ImageModelV1:
      properties:
        url:
          title: ImageModelV1Url
          properties:
            original:
              title: original
              type: string
            thumb:
              title: thumb
              type: string
          type: object
        height:
          title: height
          type: integer
        width:
          title: width
          type: integer
    ListsBulkAddModelV1:
      properties:
        priority:
          title: priority
          type: string
          enum:
            - High
            - Low
        series_title:
          title: series_title
          type: string
    ListsModelV1:
      properties:
        list_id:
          title: list_id
          type: integer
        title:
          title: title
          type: string
        description:
          title: description
          type: string
        type:
          title: type
          type: string
          enum:
            - read
            - wish
            - complete
            - unfinished
            - hold
        icon:
          title: icon
          type: string
        custom:
          title: custom
          type: boolean
        options:
          title: ListsModelV1Options
          properties:
            public:
              title: public
              type: boolean
            sort:
              title: sort
              type: string
              enum:
                - title
                - priority
                - date
                - rating
                - release
                - unread
                - userrating
            show_rating:
              title: show_rating
              type: boolean
            show_status:
              title: show_status
              type: boolean
            show_comment:
              title: show_comment
              type: string
              enum:
                - link
                - text
                - none
            show_per_page:
              title: show_per_page
              type: integer
            show_latest_chapter:
              title: show_latest_chapter
              type: boolean
          type: object
    ListsModelUpdateV1:
      properties:
        title:
          title: title
          type: string
        description:
          title: description
          type: string
        type:
          title: type
          type: string
          enum:
            - read
            - wish
            - complete
            - unfinished
            - hold
        icon:
          title: icon
          type: string
        options:
          title: ListsModelUpdateV1Options
          properties:
            public:
              title: public
              type: boolean
            sort:
              title: sort
              type: string
              enum:
                - title
                - priority
                - date
                - rating
                - release
                - unread
                - userrating
            show_rating:
              title: show_rating
              type: boolean
            show_status:
              title: show_status
              type: boolean
            show_comment:
              title: show_comment
              type: string
              enum:
                - link
                - text
                - none
            show_per_page:
              title: show_per_page
              type: integer
            show_latest_chapter:
              title: show_latest_chapter
              type: boolean
          type: object
    ListsPublicSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        list:
          $ref: '#/components/schemas/ListsModelV1'
        results:
          title: results
          type: array
          items:
            title: ListsPublicSearchResponseV1Results
            properties:
              series_id:
                title: series_id
                type: integer
              series_title:
                title: series_title
                type: string
              volume:
                title: volume
                type: integer
              chapter:
                title: chapter
                type: integer
              metadata:
                title: ListsPublicSearchResponseV1ResultsMetadata
                properties:
                  user_rating: { title: user_rating, type: number }
                  user_comment: { title: ListsPublicSearchResponseV1ResultsMetadataUserComment, properties: { comment_id: { title: comment_id, type: integer }, comment_preview: { title: comment_preview, type: string } }, type: object }
                  user_list: { $ref: '#/components/schemas/ListsSeriesModelV1' }
                type: object
            type: object
    ListsPublicStatsModelV1:
      properties:
        genres:
          title: genres
          type: array
          items:
            title: ListsPublicStatsModelV1Genres
            properties:
              genre_name:
                title: genre_name
                type: string
              count:
                title: count
                type: integer
            type: object
    ListsSearchRequestV1:
      properties:
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
    ListsSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        list:
          $ref: '#/components/schemas/ListsModelV1'
        results:
          title: results
          type: array
          items:
            title: ListsSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/ListsSeriesModelV1'
              metadata:
                title: ListsSearchResponseV1ResultsMetadata
                properties:
                  series: { $ref: '#/components/schemas/SeriesModelSearchV1' }
                  user_rating: { title: user_rating, type: number }
                type: object
            type: object
    ListsSeriesModelV1:
      required:
        - series
      properties:
        series:
          title: ListsSeriesModelV1Series
          required:
            - id
          properties:
            id:
              title: id
              type: integer
            title:
              title: title
              type: string
          type: object
        list_id:
          title: list_id
          type: integer
        list_type:
          title: list_type
          type: string
        list_icon:
          title: list_icon
          type: string
        status:
          title: ListsSeriesModelV1Status
          properties:
            volume:
              title: volume
              type: integer
            chapter:
              title: chapter
              type: integer
          type: object
        priority:
          title: priority
          type: integer
        time_added:
          $ref: '#/components/schemas/TimeV1'
    ListsSeriesModelUpdateV1:
      required:
        - series
      properties:
        series:
          title: ListsSeriesModelUpdateV1Series
          required:
            - id
          properties:
            id:
              title: id
              type: integer
            title:
              title: title
              type: string
          type: object
        list_id:
          title: list_id
          type: integer
        status:
          title: ListsSeriesModelUpdateV1Status
          properties:
            volume:
              title: volume
              type: integer
            chapter:
              title: chapter
              type: integer
            increment_volume:
              title: increment_volume
              type: integer
            increment_chapter:
              title: increment_chapter
              type: integer
          type: object
        priority:
          title: priority
          type: integer
    ListsSimilarUsersResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        users:
          title: users
          type: array
          items:
            title: ListsSimilarUsersResponseV1Users
            properties:
              user_id:
                title: user_id
                type: integer
              user_name:
                title: user_name
                type: string
              user_rating:
                title: user_rating
                type: number
              intersect_count:
                title: intersect_count
                type: integer
              percent_match:
                title: percent_match
                type: integer
            type: object
    MiscOnlineUsersModelV1:
      properties:
        users:
          title: users
          type: array
          items:
            title: MiscOnlineUsersModelV1Users
            properties:
              record:
                $ref: '#/components/schemas/UserModelSearchV1'
              metadata:
                title: MiscOnlineUsersModelV1UsersMetadata
                properties:
                  last_active: { $ref: '#/components/schemas/TimeV1' }
                  invisible: { title: invisible, type: boolean }
                  super_moderator: { title: super_moderator, type: boolean }
                type: object
            type: object
    MiscSlowTransactionStatusResponseV1:
      properties:
        state:
          title: state
          type: string
          enum:
            - pending
            - 'in progress'
            - complete
            - error
        error:
          title: error
          type: string
        percent:
          title: percent
          type: number
        done:
          title: done
          type: integer
        total:
          title: total
          type: integer
        return:
          title: return
          type: string
    MiscStatsModelV1:
      properties:
        total_users:
          title: total_users
          type: integer
        latest_user:
          $ref: '#/components/schemas/UserModelSearchV1'
        total_forum_topics:
          title: total_forum_topics
          type: integer
        total_forum_posts:
          title: total_forum_posts
          type: integer
    PollModelV1:
      properties:
        active:
          title: active
          type: boolean
        question:
          title: question
          type: string
        answers:
          title: answers
          type: array
          items:
            title: PollModelV1Answers
            properties:
              answer_id:
                title: answer_id
                type: integer
              answer:
                title: answer
                type: string
              total:
                title: total
                type: integer
            type: object
        total_votes:
          title: total_votes
          type: integer
    PollModelUpdateV1:
      properties:
        question:
          title: question
          type: string
        answers:
          title: answers
          type: array
          items:
            title: PollModelUpdateV1Answers
            properties:
              answer:
                title: answer
                type: string
            type: object
    PollVoteStatusModelV1:
      properties:
        voted:
          title: voted
          type: boolean
    PublishersModelV1:
      properties:
        publisher_id:
          title: publisher_id
          type: integer
        name:
          title: name
          type: string
        url:
          title: url
          type: string
        associated:
          title: associated
          type: array
          items:
            title: PublishersModelV1Associated
            properties:
              name:
                title: name
                type: string
            type: object
        type:
          title: type
          type: string
          enum:
            - N/A
            - Japanese
            - English
            - Korean
            - Taiwanese
            - Chinese
            - Thai
            - Indonesian
            - Filipino
            - Vietnamese
            - Malaysian
            - Nordic
            - French
            - Spanish
        info:
          title: info
          type: string
        site:
          title: site
          type: string
        stats:
          title: PublishersModelV1Stats
          properties:
            total_series:
              title: total_series
              type: integer
            total_publications:
              title: total_publications
              type: integer
          type: object
        added_by:
          $ref: '#/components/schemas/UserModelSearchV1'
        last_updated:
          $ref: '#/components/schemas/TimeV1'
        admin:
          title: PublishersModelV1Admin
          properties:
            approved:
              title: approved
              type: boolean
          type: object
    PublishersModelSearchV1:
      properties:
        publisher_id:
          title: publisher_id
          type: integer
        name:
          title: name
          type: string
        url:
          title: url
          type: string
        type:
          title: type
          type: string
          enum:
            - N/A
            - Japanese
            - English
            - Korean
            - Taiwanese
            - Chinese
            - Thai
            - Indonesian
            - Filipino
            - Vietnamese
            - Malaysian
            - Nordic
            - French
            - Spanish
        stats:
          title: PublishersModelSearchV1Stats
          properties:
            total_series:
              title: total_series
              type: integer
            total_publications:
              title: total_publications
              type: integer
          type: object
        added_by:
          $ref: '#/components/schemas/UserModelSearchV1'
    PublishersModelUpdateV1:
      properties:
        name:
          title: name
          type: string
        associated:
          title: associated
          type: array
          items:
            title: PublishersModelUpdateV1Associated
            properties:
              name:
                title: name
                type: string
            type: object
        type:
          title: type
          type: string
          enum:
            - N/A
            - Japanese
            - English
            - Korean
            - Taiwanese
            - Chinese
            - Thai
            - Indonesian
            - Filipino
            - Vietnamese
            - Malaysian
            - Nordic
            - French
            - Spanish
        info:
          title: info
          type: string
        site:
          title: site
          type: string
        admin:
          title: PublishersModelUpdateV1Admin
          properties:
            approved:
              title: approved
              type: boolean
          type: object
    PublishersPublicationResponseV1:
      properties:
        publisher:
          title: PublishersPublicationResponseV1Publisher
          properties:
            publisher_name:
              title: publisher_name
              type: string
            publisher_id:
              title: publisher_id
              type: integer
          type: object
        series_list:
          title: series_list
          type: array
          items:
            title: PublishersPublicationResponseV1SeriesList
            properties:
              title:
                title: title
                type: string
              series_id:
                title: series_id
                type: integer
              genres:
                title: genres
                type: array
                items:
                  title: PublishersPublicationResponseV1SeriesListGenres
                  type: string
              last_updated:
                $ref: '#/components/schemas/TimeV1'
            type: object
    PublishersSearchRequestV1:
      properties:
        search:
          title: search
          type: string
        added_by:
          title: added_by
          type: integer
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
        letter:
          title: letter
          type: string
        orderby:
          title: orderby
          type: string
          enum:
            - score
            - name
            - series
            - publications
            - type
        pending:
          title: pending
          type: boolean
    PublishersSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: PublishersSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/PublishersModelSearchV1'
              hit_name:
                title: hit_name
                type: string
            type: object
    PublishersSeriesListResponseV1:
      properties:
        series_list:
          title: series_list
          type: array
          items:
            title: PublishersSeriesListResponseV1SeriesList
            properties:
              title:
                title: title
                type: string
              series_id:
                title: series_id
                type: integer
              year:
                title: year
                type: string
              last_updated:
                $ref: '#/components/schemas/TimeV1'
            type: object
        publication_list:
          title: publication_list
          type: array
          items:
            title: PublishersSeriesListResponseV1PublicationList
            properties:
              publication_name:
                title: publication_name
                type: string
              count:
                title: count
                type: integer
            type: object
    ReleaseDaysSearchRequestV1:
      properties:
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
        include_metadata:
          title: include_metadata
          type: boolean
    ReleaseModelV1:
      properties:
        id:
          title: id
          type: integer
        title:
          title: title
          type: string
        volume:
          title: volume
          type: string
        chapter:
          title: chapter
          type: string
        groups:
          title: groups
          type: array
          items:
            title: ReleaseModelV1Groups
            properties:
              name:
                title: name
                type: string
              group_id:
                title: group_id
                type: integer
            type: object
        release_date:
          title: release_date
          type: string
        download_notes:
          title: download_notes
          type: string
        comment:
          title: comment
          type: string
        time_added:
          $ref: '#/components/schemas/TimeV1'
        admin:
          title: ReleaseModelV1Admin
          properties:
            approved:
              title: approved
              type: boolean
            archived:
              title: archived
              type: boolean
            added_by:
              $ref: '#/components/schemas/UserModelSearchV1'
          type: object
    ReleaseModelSearchV1:
      properties:
        id:
          title: id
          type: integer
        title:
          title: title
          type: string
        volume:
          title: volume
          type: string
        chapter:
          title: chapter
          type: string
        groups:
          title: groups
          type: array
          items:
            title: ReleaseModelSearchV1Groups
            properties:
              name:
                title: name
                type: string
              group_id:
                title: group_id
                type: integer
            type: object
        release_date:
          title: release_date
          type: string
        time_added:
          $ref: '#/components/schemas/TimeV1'
    ReleaseModelUpdateV1:
      properties:
        title:
          title: title
          type: string
        volume:
          title: volume
          type: string
        chapter:
          title: chapter
          type: string
        groups:
          title: groups
          type: array
          items:
            title: ReleaseModelUpdateV1Groups
            properties:
              name:
                title: name
                type: string
            type: object
        release_date:
          title: release_date
          type: string
        download_notes:
          title: download_notes
          type: string
        comment:
          title: comment
          type: string
        time_added:
          $ref: '#/components/schemas/TimeUpdateV1'
        admin:
          title: ReleaseModelUpdateV1Admin
          properties:
            approved:
              title: approved
              type: boolean
            archived:
              title: archived
              type: boolean
          type: object
    ReleaseModerateRequestV1:
      properties:
        archived:
          title: archived
          type: boolean
        disable_paging:
          title: disable_paging
          type: boolean
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
    ReleaseModerateResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: ReleaseModerateResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/ReleaseModelV1'
              metadata:
                title: ReleaseModerateResponseV1ResultsMetadata
                properties:
                  series: { title: series, type: integer }
                  like_releases: { title: like_releases, type: array, items: { $ref: '#/components/schemas/ReleaseModelV1' } }
                type: object
            type: object
        group_info:
          title: group_info
          type: array
          items:
            title: ReleaseModerateResponseV1GroupInfo
            properties:
              group_id:
                title: group_id
                type: integer
              hold:
                title: hold
                type: boolean
            type: object
    ReleaseSearchRequestV1:
      properties:
        search:
          title: search
          type: string
        search_type:
          title: search_type
          type: string
          enum:
            - series
            - regular
        added_by:
          title: added_by
          type: integer
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
        letter:
          title: letter
          type: string
        orderby:
          title: orderby
          type: string
          enum:
            - date
            - time
            - title
            - vol
            - chap
        start_date:
          title: start_date
          type: string
        end_date:
          title: end_date
          type: string
        asc:
          title: asc
          type: string
          enum:
            - asc
            - desc
        group_id:
          title: group_id
          type: integer
        pending:
          title: pending
          type: boolean
        include_metadata:
          title: include_metadata
          type: boolean
    ReleaseSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: ReleaseSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/ReleaseModelSearchV1'
              metadata:
                title: ReleaseSearchResponseV1ResultsMetadata
                properties:
                  series: { $ref: '#/components/schemas/SeriesModelSearchV1' }
                  user_list: { $ref: '#/components/schemas/ListsSeriesModelV1' }
                  user_genre_highlights: { title: user_genre_highlights, type: array, items: { title: ReleaseSearchResponseV1ResultsMetadataUserGenreHighlights, properties: { genre: { title: genre, type: string }, color: { title: color, type: string } }, type: object } }
                  user_genre_filters: { title: user_genre_filters, type: array, items: { title: ReleaseSearchResponseV1ResultsMetadataUserGenreFilters, type: string } }
                  user_group_filters: { title: user_group_filters, type: array, items: { title: ReleaseSearchResponseV1ResultsMetadataUserGroupFilters, type: string } }
                  type_filter: { title: type_filter, type: string }
                type: object
            type: object
    ReviewCommentModelV1:
      properties:
        id:
          title: id
          type: integer
        review_id:
          title: review_id
          type: integer
        subject:
          title: subject
          type: string
        content:
          title: content
          type: string
        author:
          title: ReviewCommentModelV1Author
          properties:
            user_id:
              title: user_id
              type: integer
            name:
              title: name
              type: string
          type: object
        rating:
          title: rating
          type: number
        time_added:
          $ref: '#/components/schemas/TimeV1'
        time_updated:
          $ref: '#/components/schemas/TimeV1'
    ReviewCommentModelUpdateV1:
      properties:
        subject:
          title: subject
          type: string
        content:
          title: content
          type: string
        rating:
          title: rating
          type: number
        admin:
          title: ReviewCommentModelUpdateV1Admin
          properties:
            approved:
              title: approved
              type: boolean
          type: object
    ReviewCommentSearchRequestV1:
      properties:
        added_by:
          title: added_by
          type: integer
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
    ReviewCommentSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: ReviewCommentSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/ReviewCommentModelV1'
            type: object
    ReviewModelV1:
      properties:
        id:
          title: id
          type: integer
        title:
          title: title
          type: string
        body:
          title: body
          type: string
        author:
          title: ReviewModelV1Author
          properties:
            user_id:
              title: user_id
              type: integer
            name:
              title: name
              type: string
          type: object
        series:
          $ref: '#/components/schemas/SeriesModelSearchV1'
        review:
          title: ReviewModelV1Review
          properties:
            user:
              title: user
              type: number
            plot:
              title: plot
              type: number
            drawing:
              title: drawing
              type: number
            characters:
              title: characters
              type: number
            enjoy:
              title: enjoy
              type: number
            overall:
              title: overall
              type: number
          type: object
        time_added:
          $ref: '#/components/schemas/TimeV1'
    ReviewModelSearchV1:
      properties:
        id:
          title: id
          type: integer
        title:
          title: title
          type: string
        body_excerpt:
          title: body_excerpt
          type: string
        author:
          title: ReviewModelSearchV1Author
          properties:
            user_id:
              title: user_id
              type: integer
            name:
              title: name
              type: string
          type: object
        series:
          $ref: '#/components/schemas/SeriesModelSearchV1'
        review:
          title: ReviewModelSearchV1Review
          properties:
            plot:
              title: plot
              type: number
            drawing:
              title: drawing
              type: number
            characters:
              title: characters
              type: number
            enjoy:
              title: enjoy
              type: number
            overall:
              title: overall
              type: number
          type: object
        time_added:
          $ref: '#/components/schemas/TimeV1'
    ReviewModelUpdateV1:
      properties:
        title:
          title: title
          type: string
        body:
          title: body
          type: string
        series_title:
          title: series_title
          type: string
        review:
          title: ReviewModelUpdateV1Review
          properties:
            plot:
              title: plot
              type: number
            drawing:
              title: drawing
              type: number
            characters:
              title: characters
              type: number
            enjoy:
              title: enjoy
              type: number
            overall:
              title: overall
              type: number
          type: object
        admin:
          title: ReviewModelUpdateV1Admin
          properties:
            approved:
              title: approved
              type: boolean
            moderated:
              title: moderated
              type: boolean
          type: object
    ReviewSearchRequestV1:
      properties:
        search:
          title: search
          type: string
        added_by:
          title: added_by
          type: integer
        series_id:
          title: series_id
          type: integer
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
        letter:
          title: letter
          type: string
        pending:
          title: pending
          type: boolean
    ReviewSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: ReviewSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/ReviewModelSearchV1'
            type: object
    SeriesCategoryUpdateModelV1:
      properties:
        from:
          $ref: '#/components/schemas/CategoriesModelUpdateV1'
        to:
          $ref: '#/components/schemas/CategoriesModelUpdateV1'
    SeriesCategoryVoteModelV1:
      properties:
        category:
          title: category
          type: string
        agree:
          title: agree
          type: boolean
    SeriesCategoryVoteDeleteModelV1:
      properties:
        category:
          title: category
          type: string
    SeriesCommentModelV1:
      properties:
        id:
          title: id
          type: integer
        series_id:
          title: series_id
          type: integer
        subject:
          title: subject
          type: string
        content:
          title: content
          type: string
        author:
          title: SeriesCommentModelV1Author
          properties:
            user_info:
              $ref: '#/components/schemas/UserModelSearchV1'
            name:
              title: name
              type: string
          type: object
        useful:
          title: useful
          type: integer
        time_added:
          $ref: '#/components/schemas/TimeV1'
        time_updated:
          $ref: '#/components/schemas/TimeV1'
        admin:
          title: SeriesCommentModelV1Admin
          properties:
            moderated:
              title: moderated
              type: boolean
            reported:
              title: reported
              type: boolean
            report_reason:
              title: report_reason
              type: string
          type: object
    SeriesCommentModelUpdateV1:
      properties:
        subject:
          title: subject
          type: string
        content:
          title: content
          type: string
        admin:
          title: SeriesCommentModelUpdateV1Admin
          properties:
            moderated:
              title: moderated
              type: boolean
            reported:
              title: reported
              type: boolean
          type: object
    SeriesCommentModerationResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: SeriesCommentModerationResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/SeriesCommentModelV1'
              metadata:
                title: SeriesCommentModerationResponseV1ResultsMetadata
                properties:
                  series: { $ref: '#/components/schemas/SeriesModelSearchV1' }
                  author_series_rating: { title: author_series_rating, type: number }
                type: object
            type: object
    SeriesCommentReportModelV1:
      properties:
        report_reason:
          title: report_reason
          type: string
    SeriesCommentSearchRequestV1:
      properties:
        method:
          title: method
          type: string
          enum:
            - useful
            - time_added
        added_by:
          title: added_by
          type: integer
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
    SeriesCommentSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: SeriesCommentSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/SeriesCommentModelV1'
              metadata:
                title: SeriesCommentSearchResponseV1ResultsMetadata
                properties:
                  author_series_rating: { title: author_series_rating, type: number }
                  current_user_useful_rating: { title: current_user_useful_rating, type: boolean }
                type: object
            type: object
    SeriesCommentUsefulModelV1:
      properties:
        useful:
          title: useful
          type: boolean
    SeriesGroupListResponseV1:
      properties:
        group_list:
          title: group_list
          type: array
          items:
            $ref: '#/components/schemas/GroupsModelSearchV1'
        release_list:
          title: release_list
          type: array
          items:
            $ref: '#/components/schemas/ReleaseModelSearchV1'
    SeriesHistoryModelV1:
      properties:
        change_id:
          title: change_id
          type: integer
        username:
          title: username
          type: string
        action:
          title: action
          type: string
        changed:
          title: changed
          type: string
        time_added:
          $ref: '#/components/schemas/TimeV1'
    SeriesHistorySearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        series_title:
          title: series_title
          type: string
        results:
          title: results
          type: array
          items:
            title: SeriesHistorySearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/SeriesHistoryModelV1'
            type: object
    SeriesLockModelV1:
      properties:
        field:
          title: field
          type: string
        reason:
          title: reason
          type: string
        user_id:
          title: user_id
          type: integer
        username:
          title: username
          type: string
        time_locked:
          $ref: '#/components/schemas/TimeV1'
    SeriesLockModelUpdateV1:
      properties:
        reason:
          title: reason
          type: string
    SeriesModelV1:
      properties:
        series_id:
          title: series_id
          type: integer
        title:
          title: title
          type: string
        url:
          title: url
          type: string
        associated:
          title: associated
          type: array
          items:
            title: SeriesModelV1Associated
            properties:
              title:
                title: title
                type: string
            type: object
        description:
          title: description
          type: string
        image:
          $ref: '#/components/schemas/ImageModelV1'
        type:
          title: type
          type: string
          enum:
            - Artbook
            - Doujinshi
            - 'Drama CD'
            - Filipino
            - Indonesian
            - Manga
            - Manhwa
            - Manhua
            - Novel
            - OEL
            - Thai
            - Vietnamese
            - Malaysian
            - Nordic
            - French
            - Spanish
        year:
          title: year
          type: string
        bayesian_rating:
          title: bayesian_rating
          type: number
        rating_votes:
          title: rating_votes
          type: integer
        genres:
          title: genres
          type: array
          items:
            title: SeriesModelV1Genres
            properties:
              genre:
                title: genre
                type: string
            type: object
        categories:
          title: categories
          type: array
          items:
            $ref: '#/components/schemas/CategoriesModelV1'
        latest_chapter:
          title: latest_chapter
          type: integer
        forum_id:
          title: forum_id
          type: integer
        status:
          title: status
          type: string
        licensed:
          title: licensed
          type: boolean
        completed:
          title: completed
          type: boolean
        anime:
          title: SeriesModelV1Anime
          properties:
            start:
              title: start
              type: string
            end:
              title: end
              type: string
          type: object
        related_series:
          title: related_series
          type: array
          items:
            title: SeriesModelV1RelatedSeries
            required:
              - relation_type
              - related_series_id
            properties:
              relation_id:
                title: relation_id
                type: integer
              relation_type:
                title: relation_type
                type: string
                enum:
                  - Prequel
                  - Sequel
                  - 'Side Story'
                  - Spin-Off
                  - 'Adapted From'
                  - 'Alternate Story'
                  - 'Main Story'
              related_series_id:
                title: related_series_id
                type: integer
              related_series_name:
                title: related_series_name
                type: string
              triggered_by_relation_id:
                title: triggered_by_relation_id
                type: integer
            type: object
        authors:
          title: authors
          type: array
          items:
            title: SeriesModelV1Authors
            properties:
              name:
                title: name
                type: string
              author_id:
                title: author_id
                type: integer
              type:
                title: type
                type: string
                enum:
                  - Author
                  - Artist
            type: object
        publishers:
          title: publishers
          type: array
          items:
            title: SeriesModelV1Publishers
            properties:
              publisher_name:
                title: publisher_name
                type: string
              publisher_id:
                title: publisher_id
                type: integer
              type:
                title: type
                type: string
                enum:
                  - Original
                  - English
              notes:
                title: notes
                type: string
            type: object
        publications:
          title: publications
          type: array
          items:
            title: SeriesModelV1Publications
            properties:
              publication_name:
                title: publication_name
                type: string
              publisher_name:
                title: publisher_name
                type: string
              publisher_id:
                title: publisher_id
                type: string
            type: object
        recommendations:
          title: recommendations
          type: array
          items:
            $ref: '#/components/schemas/SeriesRecommendationsModelV1'
        category_recommendations:
          title: category_recommendations
          type: array
          items:
            $ref: '#/components/schemas/SeriesRecommendationsModelV1'
        rank:
          title: SeriesModelV1Rank
          properties:
            position:
              title: SeriesModelV1RankPosition
              properties:
                week:
                  title: week
                  type: integer
                month:
                  title: month
                  type: integer
                three_months:
                  title: three_months
                  type: integer
                six_months:
                  title: six_months
                  type: integer
                year:
                  title: year
                  type: integer
              type: object
            old_position:
              title: SeriesModelV1RankOldPosition
              properties:
                week:
                  title: week
                  type: integer
                month:
                  title: month
                  type: integer
                three_months:
                  title: three_months
                  type: integer
                six_months:
                  title: six_months
                  type: integer
                year:
                  title: year
                  type: integer
              type: object
            lists:
              title: SeriesModelV1RankLists
              properties:
                reading:
                  title: reading
                  type: integer
                wish:
                  title: wish
                  type: integer
                complete:
                  title: complete
                  type: integer
                unfinished:
                  title: unfinished
                  type: integer
                custom:
                  title: custom
                  type: integer
              type: object
          type: object
        last_updated:
          $ref: '#/components/schemas/TimeV1'
        admin:
          title: SeriesModelV1Admin
          properties:
            added_by:
              $ref: '#/components/schemas/UserModelSearchV1'
            approved:
              title: approved
              type: boolean
          type: object
    SeriesModelSearchV1:
      properties:
        series_id:
          title: series_id
          type: integer
        title:
          title: title
          type: string
        url:
          title: url
          type: string
        description:
          title: description
          type: string
        image:
          $ref: '#/components/schemas/ImageModelV1'
        type:
          title: type
          type: string
          enum:
            - Artbook
            - Doujinshi
            - 'Drama CD'
            - Filipino
            - Indonesian
            - Manga
            - Manhwa
            - Manhua
            - Novel
            - OEL
            - Thai
            - Vietnamese
            - Malaysian
            - Nordic
            - French
            - Spanish
        year:
          title: year
          type: string
        bayesian_rating:
          title: bayesian_rating
          type: number
        rating_votes:
          title: rating_votes
          type: integer
        genres:
          title: genres
          type: array
          items:
            title: SeriesModelSearchV1Genres
            properties:
              genre:
                title: genre
                type: string
            type: object
        latest_chapter:
          title: latest_chapter
          type: integer
        rank:
          title: SeriesModelSearchV1Rank
          properties:
            position:
              title: SeriesModelSearchV1RankPosition
              properties:
                week:
                  title: week
                  type: integer
                month:
                  title: month
                  type: integer
                three_months:
                  title: three_months
                  type: integer
                six_months:
                  title: six_months
                  type: integer
                year:
                  title: year
                  type: integer
              type: object
            old_position:
              title: SeriesModelSearchV1RankOldPosition
              properties:
                week:
                  title: week
                  type: integer
                month:
                  title: month
                  type: integer
                three_months:
                  title: three_months
                  type: integer
                six_months:
                  title: six_months
                  type: integer
                year:
                  title: year
                  type: integer
              type: object
            lists:
              title: SeriesModelSearchV1RankLists
              properties:
                reading:
                  title: reading
                  type: integer
                wish:
                  title: wish
                  type: integer
                complete:
                  title: complete
                  type: integer
                unfinished:
                  title: unfinished
                  type: integer
                custom:
                  title: custom
                  type: integer
              type: object
          type: object
        last_updated:
          $ref: '#/components/schemas/TimeV1'
        admin:
          title: SeriesModelSearchV1Admin
          properties:
            added_by:
              $ref: '#/components/schemas/UserModelSearchV1'
            approved:
              title: approved
              type: boolean
          type: object
    SeriesModelUpdateV1:
      properties:
        title:
          title: title
          type: string
        associated:
          title: associated
          type: array
          items:
            title: SeriesModelUpdateV1Associated
            properties:
              title:
                title: title
                type: string
            type: object
        description:
          title: description
          type: string
        type:
          title: type
          type: string
          enum:
            - Artbook
            - Doujinshi
            - 'Drama CD'
            - Filipino
            - Indonesian
            - Manga
            - Manhwa
            - Manhua
            - Novel
            - OEL
            - Thai
            - Vietnamese
            - Malaysian
            - Nordic
            - French
            - Spanish
        year:
          title: year
          type: string
        genres:
          title: genres
          type: array
          items:
            title: SeriesModelUpdateV1Genres
            properties:
              genre:
                title: genre
                type: string
            type: object
        categories:
          title: categories
          type: array
          items:
            $ref: '#/components/schemas/CategoriesModelUpdateV1'
        status:
          title: status
          type: string
        licensed:
          title: licensed
          type: boolean
        completed:
          title: completed
          type: boolean
        anime:
          title: SeriesModelUpdateV1Anime
          properties:
            start:
              title: start
              type: string
            end:
              title: end
              type: string
          type: object
        related_series:
          title: related_series
          type: array
          items:
            title: SeriesModelUpdateV1RelatedSeries
            required:
              - relation_type
              - related_series_id
            properties:
              relation_type:
                title: relation_type
                type: string
                enum:
                  - Prequel
                  - Sequel
                  - 'Side Story'
                  - Spin-Off
                  - 'Adapted From'
                  - 'Alternate Story'
                  - 'Main Story'
              related_series_id:
                title: related_series_id
                type: integer
            type: object
        authors:
          title: authors
          type: array
          items:
            title: SeriesModelUpdateV1Authors
            properties:
              name:
                title: name
                type: string
              type:
                title: type
                type: string
                enum:
                  - Author
                  - Artist
            type: object
        publishers:
          title: publishers
          type: array
          items:
            title: SeriesModelUpdateV1Publishers
            properties:
              publisher_name:
                title: publisher_name
                type: string
              type:
                title: type
                type: string
                enum:
                  - Original
                  - English
              notes:
                title: notes
                type: string
            type: object
        publications:
          title: publications
          type: array
          items:
            title: SeriesModelUpdateV1Publications
            properties:
              publication_name:
                title: publication_name
                type: string
              publisher_name:
                title: publisher_name
                type: string
            type: object
        admin:
          title: SeriesModelUpdateV1Admin
          properties:
            approved:
              title: approved
              type: boolean
          type: object
    SeriesRatingModelV1:
      required:
        - rating
      properties:
        rating:
          title: rating
          type: number
        last_updated:
          $ref: '#/components/schemas/TimeV1'
    SeriesRatingRainbowModelV1:
      properties:
        average_rating:
          title: average_rating
          type: number
        rainbow:
          title: rainbow
          type: array
          items:
            title: SeriesRatingRainbowModelV1Rainbow
            properties:
              rating:
                title: rating
                type: integer
              count:
                title: count
                type: integer
            type: object
    SeriesRecommendationsModelV1:
      properties:
        series_name:
          title: series_name
          type: string
        series_id:
          title: series_id
          type: integer
        weight:
          title: weight
          type: integer
    SeriesSearchRequestV1:
      properties:
        search:
          title: search
          type: string
        added_by:
          title: added_by
          type: integer
        stype:
          title: stype
          type: string
          enum:
            - title
            - description
        licensed:
          title: licensed
          type: string
          enum:
            - 'yes'
            - 'no'
        type:
          title: type
          type: array
          items:
            title: SeriesSearchRequestV1Type
            type: string
        year:
          title: year
          type: string
        filter_types:
          title: filter_types
          type: array
          items:
            title: SeriesSearchRequestV1FilterTypes
            type: string
        category:
          title: category
          type: array
          items:
            title: SeriesSearchRequestV1Category
            type: string
        filter:
          title: filter
          type: string
          enum:
            - scanlated
            - completed
            - oneshots
            - no_oneshots
            - some_releases
            - no_releases
        list:
          title: list
          type: string
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
        letter:
          title: letter
          type: string
        genre:
          title: genre
          type: array
          items:
            title: SeriesSearchRequestV1Genre
            type: string
        exclude_genre:
          title: exclude_genre
          type: array
          items:
            title: SeriesSearchRequestV1ExcludeGenre
            type: string
        orderby:
          title: orderby
          type: string
          enum:
            - score
            - title
            - rank
            - rating
            - year
            - date_added
            - week_pos
            - month1_pos
            - month3_pos
            - month6_pos
            - year_pos
            - list_reading
            - list_wish
            - list_complete
            - list_unfinished
        pending:
          title: pending
          type: boolean
        include_rank_metadata:
          title: include_rank_metadata
          type: boolean
        exclude_filtered_genres:
          title: exclude_filtered_genres
          type: boolean
    SeriesSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: SeriesSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/SeriesModelSearchV1'
              hit_title:
                title: hit_title
                type: string
              metadata:
                title: SeriesSearchResponseV1ResultsMetadata
                properties:
                  user_list: { $ref: '#/components/schemas/ListsSeriesModelV1' }
                  user_genre_highlights: { title: user_genre_highlights, type: array, items: { title: SeriesSearchResponseV1ResultsMetadataUserGenreHighlights, properties: { genre: { title: genre, type: string }, color: { title: color, type: string } }, type: object } }
                type: object
            type: object
    TimeV1:
      properties:
        timestamp:
          title: timestamp
          type: integer
        as_rfc3339:
          title: as_rfc3339
          type: string
          format: date-time
        as_string:
          title: as_string
          type: string
    TimeUpdateV1:
      properties:
        timestamp:
          title: timestamp
          type: integer
    UserChangeRequestModelV1:
      properties:
        id:
          title: id
          type: integer
        body:
          title: body
          type: string
        added_by:
          $ref: '#/components/schemas/UserModelSearchV1'
        time_added:
          $ref: '#/components/schemas/TimeV1'
    UserChangeRequestModelUpdateV1:
      properties:
        body:
          title: body
          type: string
        archived:
          title: archived
          type: boolean
    UserChangeRequestSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: UserChangeRequestSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/UserChangeRequestModelV1'
            type: object
    UserGenreFilterModelV1:
      properties:
        genre_id:
          title: genre_id
          type: integer
        genre_name:
          title: genre_name
          type: string
    UserGenreHighlightModelV1:
      properties:
        genre_id:
          title: genre_id
          type: integer
        genre_name:
          title: genre_name
          type: string
        color:
          title: color
          type: string
    UserGenreHighlightModelUpdateV1:
      properties:
        color:
          title: color
          type: string
    UserGroupFilterModelV1:
      properties:
        group_id:
          title: group_id
          type: integer
        group_name:
          title: group_name
          type: string
    UserGroupModelV1:
      required:
        - name
        - description
      properties:
        id:
          title: id
          type: string
        name:
          title: name
          type: string
        description:
          title: description
          type: string
    UserGroupModelUpdateV1:
      required:
        - name
        - description
      properties:
        name:
          title: name
          type: string
        description:
          title: description
          type: string
    UserModelV1:
      properties:
        user_id:
          title: user_id
          type: integer
        username:
          title: username
          type: string
        url:
          title: url
          type: string
        email:
          title: email
          type: string
        avatar:
          $ref: '#/components/schemas/AvatarModelV1'
        time_joined:
          $ref: '#/components/schemas/TimeV1'
        last_active_time:
          $ref: '#/components/schemas/TimeV1'
        gender:
          title: gender
          type: string
          enum:
            - N/A
            - Male
            - Female
            - Alien
            - Hermaphrodite
        birthday:
          $ref: '#/components/schemas/BirthdayModelV1'
        age:
          title: age
          type: integer
        timezone:
          title: timezone
          type: integer
        signature:
          title: signature
          type: string
        location:
          title: location
          type: string
        forum_title:
          title: forum_title
          type: string
        folding_at_home:
          title: folding_at_home
          type: boolean
        profile:
          title: UserModelV1Profile
          properties:
            per_page:
              title: per_page
              type: integer
            invisible:
              title: invisible
              type: boolean
            hide_birthday:
              title: hide_birthday
              type: boolean
            hide_categories:
              title: hide_categories
              type: boolean
            filter_types:
              title: filter_types
              type: array
              items:
                title: UserModelV1ProfileFilterTypes
                type: string
                enum:
                  - Artbook
                  - Doujinshi
                  - 'Drama CD'
                  - Filipino
                  - Indonesian
                  - Manga
                  - Manhwa
                  - Manhua
                  - Novel
                  - OEL
                  - Thai
                  - Vietnamese
                  - Malaysian
                  - Nordic
                  - French
                  - Spanish
            upgrade:
              title: UserModelV1ProfileUpgrade
              properties:
                requested:
                  title: requested
                  type: boolean
                reason:
                  title: reason
                  type: string
              type: object
            age18_verified:
              title: age18_verified
              type: boolean
          type: object
        stats:
          title: UserModelV1Stats
          properties:
            forum_posts:
              title: forum_posts
              type: integer
            added_authors:
              title: added_authors
              type: integer
            added_groups:
              title: added_groups
              type: integer
            added_publishers:
              title: added_publishers
              type: integer
            added_releases:
              title: added_releases
              type: integer
            added_series:
              title: added_series
              type: integer
            series_edits:
              title: series_edits
              type: integer
            author_edits:
              title: author_edits
              type: integer
            publisher_edits:
              title: publisher_edits
              type: integer
            added_tags:
              title: added_tags
              type: integer
            moderation:
              title: UserModelV1StatsModeration
              properties:
                releases:
                  title: UserModelV1StatsModerationReleases
                  properties: { approved: { title: approved, type: integer }, rejected: { title: rejected, type: integer }, deleted: { title: deleted, type: integer } }
                  type: object
                series:
                  title: UserModelV1StatsModerationSeries
                  properties: { approved: { title: approved, type: integer }, rejected: { title: rejected, type: integer }, deleted: { title: deleted, type: integer } }
                  type: object
                publishers:
                  title: UserModelV1StatsModerationPublishers
                  properties: { approved: { title: approved, type: integer }, rejected: { title: rejected, type: integer }, deleted: { title: deleted, type: integer } }
                  type: object
                groups:
                  title: UserModelV1StatsModerationGroups
                  properties: { approved: { title: approved, type: integer }, rejected: { title: rejected, type: integer }, deleted: { title: deleted, type: integer } }
                  type: object
                authors:
                  title: UserModelV1StatsModerationAuthors
                  properties: { approved: { title: approved, type: integer }, rejected: { title: rejected, type: integer }, deleted: { title: deleted, type: integer } }
                  type: object
                last_action:
                  $ref: '#/components/schemas/TimeV1'
              type: object
          type: object
        admin:
          title: UserModelV1Admin
          properties:
            is_admin:
              title: is_admin
              type: boolean
            registration_ip:
              title: registration_ip
              type: string
            permissions:
              title: UserModelV1AdminPermissions
              properties:
                p_add_releases:
                  title: p_add_releases
                  type: boolean
                p_edit_users:
                  title: p_edit_users
                  type: boolean
                p_edit_groups:
                  title: p_edit_groups
                  type: boolean
                p_edit_poll:
                  title: p_edit_poll
                  type: boolean
                p_edit_series:
                  title: p_edit_series
                  type: boolean
                p_edit_reviews:
                  title: p_edit_reviews
                  type: boolean
                p_edit_news:
                  title: p_edit_news
                  type: boolean
                p_edit_affiliates:
                  title: p_edit_affiliates
                  type: boolean
                p_edit_aboutus:
                  title: p_edit_aboutus
                  type: boolean
                p_view_log:
                  title: p_view_log
                  type: boolean
                p_edit_config:
                  title: p_edit_config
                  type: boolean
                p_view_stats:
                  title: p_view_stats
                  type: boolean
                p_edit_genre:
                  title: p_edit_genre
                  type: boolean
                p_edit_authors:
                  title: p_edit_authors
                  type: boolean
                p_edit_publishers:
                  title: p_edit_publishers
                  type: boolean
                p_edit_partial_users:
                  title: p_edit_partial_users
                  type: boolean
              type: object
            last_series_update:
              $ref: '#/components/schemas/TimeV1'
            approved:
              title: approved
              type: boolean
            email_approved:
              title: email_approved
              type: boolean
            forum_admin:
              title: forum_admin
              type: boolean
            registration_reason:
              title: registration_reason
              type: string
            upgrade:
              title: UserModelV1AdminUpgrade
              properties:
                banned:
                  title: banned
                  type: boolean
              type: object
            banned:
              title: banned
              type: boolean
          type: object
        user_group:
          title: user_group
          type: string
        user_group_name:
          title: user_group_name
          type: string
    UserModelSearchV1:
      properties:
        user_id:
          title: user_id
          type: integer
        username:
          title: username
          type: string
        url:
          title: url
          type: string
        avatar:
          $ref: '#/components/schemas/AvatarModelSearchV1'
        time_joined:
          $ref: '#/components/schemas/TimeV1'
        signature:
          title: signature
          type: string
        forum_title:
          title: forum_title
          type: string
        folding_at_home:
          title: folding_at_home
          type: boolean
        profile:
          title: UserModelSearchV1Profile
          properties:
            upgrade:
              title: UserModelSearchV1ProfileUpgrade
              properties:
                requested:
                  title: requested
                  type: boolean
                reason:
                  title: reason
                  type: string
              type: object
          type: object
        stats:
          title: UserModelSearchV1Stats
          properties:
            forum_posts:
              title: forum_posts
              type: integer
            added_authors:
              title: added_authors
              type: integer
            added_groups:
              title: added_groups
              type: integer
            added_publishers:
              title: added_publishers
              type: integer
            added_releases:
              title: added_releases
              type: integer
            added_series:
              title: added_series
              type: integer
          type: object
        user_group:
          title: user_group
          type: string
        user_group_name:
          title: user_group_name
          type: string
    UserModelUpdateV1:
      properties:
        username:
          title: username
          type: string
        email:
          title: email
          type: string
        password:
          title: password
          type: string
          format: password
        new_avatar_id:
          title: new_avatar_id
          type: integer
        gender:
          title: gender
          type: string
          enum:
            - N/A
            - Male
            - Female
            - Alien
            - Hermaphrodite
        birthday:
          $ref: '#/components/schemas/BirthdayModelV1'
        timezone:
          title: timezone
          type: integer
        signature:
          title: signature
          type: string
        location:
          title: location
          type: string
        forum_title:
          title: forum_title
          type: string
        folding_at_home:
          title: folding_at_home
          type: boolean
        profile:
          title: UserModelUpdateV1Profile
          properties:
            per_page:
              title: per_page
              type: integer
            invisible:
              title: invisible
              type: boolean
            hide_birthday:
              title: hide_birthday
              type: boolean
            hide_categories:
              title: hide_categories
              type: boolean
            filter_types:
              title: filter_types
              type: array
              items:
                title: UserModelUpdateV1ProfileFilterTypes
                type: string
                enum:
                  - Artbook
                  - Doujinshi
                  - 'Drama CD'
                  - Filipino
                  - Indonesian
                  - Manga
                  - Manhwa
                  - Manhua
                  - Novel
                  - OEL
                  - Thai
                  - Vietnamese
                  - Malaysian
                  - Nordic
                  - French
                  - Spanish
            upgrade:
              title: UserModelUpdateV1ProfileUpgrade
              properties:
                requested:
                  title: requested
                  type: boolean
                reason:
                  title: reason
                  type: string
              type: object
            age18_verified:
              title: age18_verified
              type: boolean
          type: object
        admin:
          title: UserModelUpdateV1Admin
          properties:
            is_admin:
              title: is_admin
              type: boolean
            permissions:
              title: UserModelUpdateV1AdminPermissions
              properties:
                p_add_releases:
                  title: p_add_releases
                  type: boolean
                p_edit_users:
                  title: p_edit_users
                  type: boolean
                p_edit_groups:
                  title: p_edit_groups
                  type: boolean
                p_edit_poll:
                  title: p_edit_poll
                  type: boolean
                p_edit_series:
                  title: p_edit_series
                  type: boolean
                p_edit_reviews:
                  title: p_edit_reviews
                  type: boolean
                p_edit_news:
                  title: p_edit_news
                  type: boolean
                p_edit_affiliates:
                  title: p_edit_affiliates
                  type: boolean
                p_edit_aboutus:
                  title: p_edit_aboutus
                  type: boolean
                p_view_log:
                  title: p_view_log
                  type: boolean
                p_edit_config:
                  title: p_edit_config
                  type: boolean
                p_view_stats:
                  title: p_view_stats
                  type: boolean
                p_edit_genre:
                  title: p_edit_genre
                  type: boolean
                p_edit_authors:
                  title: p_edit_authors
                  type: boolean
                p_edit_publishers:
                  title: p_edit_publishers
                  type: boolean
                p_edit_partial_users:
                  title: p_edit_partial_users
                  type: boolean
              type: object
            approved:
              title: approved
              type: boolean
            email_approved:
              title: email_approved
              type: boolean
            forum_admin:
              title: forum_admin
              type: boolean
            banned:
              title: banned
              type: boolean
          type: object
        user_group:
          title: user_group
          type: string
    UserModelUpdatePasswordV1:
      properties:
        password:
          title: password
          type: string
          format: password
    UserModelRegisterV1:
      properties:
        username:
          title: username
          type: string
        email:
          title: email
          type: string
        password:
          title: password
          type: string
          format: password
    UserSearchRequestV1:
      properties:
        search:
          title: search
          type: string
        page:
          title: page
          type: integer
        perpage:
          title: perpage
          type: integer
        letter:
          title: letter
          type: string
        orderby:
          title: orderby
          type: string
          enum:
            - username
            - time_added
            - forum_posts
            - added_authors
            - added_releases
            - added_groups
            - added_publishers
            - added_series
        asc:
          title: asc
          type: string
          enum:
            - asc
            - desc
    UserSearchResponseV1:
      properties:
        total_hits:
          title: total_hits
          type: integer
        page:
          title: page
          type: integer
        per_page:
          title: per_page
          type: integer
        results:
          title: results
          type: array
          items:
            title: UserSearchResponseV1Results
            properties:
              record:
                $ref: '#/components/schemas/UserModelSearchV1'
            type: object
    UserSubscribedTopicModelV1:
      properties:
        topic_id:
          title: topic_id
          type: integer
        topic:
          $ref: '#/components/schemas/ForumTopicModelSearchV1'
        time_subscribed_since:
          $ref: '#/components/schemas/TimeV1'
  responses:
    '404':
      description: 'User or warn does not exist'
  securitySchemes:
    bearerAuth:
      type: http
      bearerFormat: JWT
      scheme: bearer
security:
  -
    bearerAuth: []

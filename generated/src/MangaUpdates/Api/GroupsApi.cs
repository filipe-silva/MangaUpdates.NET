/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MangaUpdates.Client;
using MangaUpdates.Model;

namespace MangaUpdates.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// add an group
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 AddGroup(GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0);

        /// <summary>
        /// add an group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> AddGroupWithHttpInfo(GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0);
        /// <summary>
        /// delete a group
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 DeleteGroup(long id, int operationIndex = 0);

        /// <summary>
        /// delete a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> DeleteGroupWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// reject and delete a group
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 RejectGroup(long id, int operationIndex = 0);

        /// <summary>
        /// reject and delete a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> RejectGroupWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// get a specific group
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupsModelV1</returns>
        GroupsModelV1 RetrieveGroup(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0);

        /// <summary>
        /// get a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupsModelV1</returns>
        ApiResponse<GroupsModelV1> RetrieveGroupWithHttpInfo(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0);
        /// <summary>
        /// get the list of series and release frequency for a specific group
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupsSeriesListResponseV1</returns>
        GroupsSeriesListResponseV1 RetrieveGroupSeries(long id, int operationIndex = 0);

        /// <summary>
        /// get the list of series and release frequency for a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupsSeriesListResponseV1</returns>
        ApiResponse<GroupsSeriesListResponseV1> RetrieveGroupSeriesWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// search groups
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupsSearchResponseV1</returns>
        GroupsSearchResponseV1 SearchGroupsPost(GroupsSearchRequestV1 groupsSearchRequestV1, int operationIndex = 0);

        /// <summary>
        /// search groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupsSearchResponseV1</returns>
        ApiResponse<GroupsSearchResponseV1> SearchGroupsPostWithHttpInfo(GroupsSearchRequestV1 groupsSearchRequestV1, int operationIndex = 0);
        /// <summary>
        /// update an group
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 UpdateGroup(long id, GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0);

        /// <summary>
        /// update an group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> UpdateGroupWithHttpInfo(long id, GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// add an group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> AddGroupAsync(GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// add an group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> AddGroupWithHttpInfoAsync(GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> DeleteGroupAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> DeleteGroupWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// reject and delete a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> RejectGroupAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// reject and delete a group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> RejectGroupWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupsModelV1</returns>
        System.Threading.Tasks.Task<GroupsModelV1> RetrieveGroupAsync(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupsModelV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupsModelV1>> RetrieveGroupWithHttpInfoAsync(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get the list of series and release frequency for a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupsSeriesListResponseV1</returns>
        System.Threading.Tasks.Task<GroupsSeriesListResponseV1> RetrieveGroupSeriesAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get the list of series and release frequency for a specific group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupsSeriesListResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupsSeriesListResponseV1>> RetrieveGroupSeriesWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// search groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupsSearchResponseV1</returns>
        System.Threading.Tasks.Task<GroupsSearchResponseV1> SearchGroupsPostAsync(GroupsSearchRequestV1 groupsSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// search groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupsSearchResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupsSearchResponseV1>> SearchGroupsPostWithHttpInfoAsync(GroupsSearchRequestV1 groupsSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update an group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> UpdateGroupAsync(long id, GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update an group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> UpdateGroupWithHttpInfoAsync(long id, GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IGroupsApiSync, IGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IGroupsApi
    {
        private MangaUpdates.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi(string basePath)
        {
            this.Configuration = MangaUpdates.Client.Configuration.MergeConfigurations(
                MangaUpdates.Client.GlobalConfiguration.Instance,
                new MangaUpdates.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupsApi(MangaUpdates.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MangaUpdates.Client.Configuration.MergeConfigurations(
                MangaUpdates.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupsApi(MangaUpdates.Client.ISynchronousClient client, MangaUpdates.Client.IAsynchronousClient asyncClient, MangaUpdates.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MangaUpdates.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MangaUpdates.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MangaUpdates.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MangaUpdates.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// add an group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 AddGroup(GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = AddGroupWithHttpInfo(groupsModelUpdateV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add an group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> AddGroupWithHttpInfo(GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0)
        {
            // verify the required parameter 'groupsModelUpdateV1' is set
            if (groupsModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'groupsModelUpdateV1' when calling GroupsApi->AddGroup");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = groupsModelUpdateV1;

            localVarRequestOptions.Operation = "GroupsApi.AddGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add an group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> AddGroupAsync(GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await AddGroupWithHttpInfoAsync(groupsModelUpdateV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add an group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> AddGroupWithHttpInfoAsync(GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsModelUpdateV1' is set
            if (groupsModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'groupsModelUpdateV1' when calling GroupsApi->AddGroup");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = groupsModelUpdateV1;

            localVarRequestOptions.Operation = "GroupsApi.AddGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete a group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 DeleteGroup(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = DeleteGroupWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete a group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> DeleteGroupWithHttpInfo(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponseV1>("/groups/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete a group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> DeleteGroupAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await DeleteGroupWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete a group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> DeleteGroupWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.DeleteGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponseV1>("/groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// reject and delete a group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 RejectGroup(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = RejectGroupWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// reject and delete a group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> RejectGroupWithHttpInfo(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.RejectGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/groups/{id}/reject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// reject and delete a group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> RejectGroupAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await RejectGroupWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// reject and delete a group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> RejectGroupWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.RejectGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/groups/{id}/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a specific group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupsModelV1</returns>
        public GroupsModelV1 RetrieveGroup(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<GroupsModelV1> localVarResponse = RetrieveGroupWithHttpInfo(id, unrenderedFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a specific group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupsModelV1</returns>
        public MangaUpdates.Client.ApiResponse<GroupsModelV1> RetrieveGroupWithHttpInfo(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (unrenderedFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(MangaUpdates.Client.ClientUtils.ParameterToMultiMap("", "unrenderedFields", unrenderedFields));
            }

            localVarRequestOptions.Operation = "GroupsApi.RetrieveGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupsModelV1>("/groups/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a specific group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupsModelV1</returns>
        public async System.Threading.Tasks.Task<GroupsModelV1> RetrieveGroupAsync(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<GroupsModelV1> localVarResponse = await RetrieveGroupWithHttpInfoAsync(id, unrenderedFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a specific group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupsModelV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<GroupsModelV1>> RetrieveGroupWithHttpInfoAsync(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (unrenderedFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(MangaUpdates.Client.ClientUtils.ParameterToMultiMap("", "unrenderedFields", unrenderedFields));
            }

            localVarRequestOptions.Operation = "GroupsApi.RetrieveGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupsModelV1>("/groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the list of series and release frequency for a specific group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupsSeriesListResponseV1</returns>
        public GroupsSeriesListResponseV1 RetrieveGroupSeries(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<GroupsSeriesListResponseV1> localVarResponse = RetrieveGroupSeriesWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the list of series and release frequency for a specific group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupsSeriesListResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<GroupsSeriesListResponseV1> RetrieveGroupSeriesWithHttpInfo(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.RetrieveGroupSeries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupsSeriesListResponseV1>("/groups/{id}/series", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveGroupSeries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the list of series and release frequency for a specific group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupsSeriesListResponseV1</returns>
        public async System.Threading.Tasks.Task<GroupsSeriesListResponseV1> RetrieveGroupSeriesAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<GroupsSeriesListResponseV1> localVarResponse = await RetrieveGroupSeriesWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the list of series and release frequency for a specific group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Group id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupsSeriesListResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<GroupsSeriesListResponseV1>> RetrieveGroupSeriesWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "GroupsApi.RetrieveGroupSeries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupsSeriesListResponseV1>("/groups/{id}/series", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveGroupSeries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// search groups 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupsSearchResponseV1</returns>
        public GroupsSearchResponseV1 SearchGroupsPost(GroupsSearchRequestV1 groupsSearchRequestV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<GroupsSearchResponseV1> localVarResponse = SearchGroupsPostWithHttpInfo(groupsSearchRequestV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// search groups 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupsSearchResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<GroupsSearchResponseV1> SearchGroupsPostWithHttpInfo(GroupsSearchRequestV1 groupsSearchRequestV1, int operationIndex = 0)
        {
            // verify the required parameter 'groupsSearchRequestV1' is set
            if (groupsSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'groupsSearchRequestV1' when calling GroupsApi->SearchGroupsPost");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = groupsSearchRequestV1;

            localVarRequestOptions.Operation = "GroupsApi.SearchGroupsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupsSearchResponseV1>("/groups/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGroupsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// search groups 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupsSearchResponseV1</returns>
        public async System.Threading.Tasks.Task<GroupsSearchResponseV1> SearchGroupsPostAsync(GroupsSearchRequestV1 groupsSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<GroupsSearchResponseV1> localVarResponse = await SearchGroupsPostWithHttpInfoAsync(groupsSearchRequestV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// search groups 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupsSearchResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<GroupsSearchResponseV1>> SearchGroupsPostWithHttpInfoAsync(GroupsSearchRequestV1 groupsSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsSearchRequestV1' is set
            if (groupsSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'groupsSearchRequestV1' when calling GroupsApi->SearchGroupsPost");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = groupsSearchRequestV1;

            localVarRequestOptions.Operation = "GroupsApi.SearchGroupsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupsSearchResponseV1>("/groups/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGroupsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update an group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 UpdateGroup(long id, GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = UpdateGroupWithHttpInfo(id, groupsModelUpdateV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update an group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> UpdateGroupWithHttpInfo(long id, GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0)
        {
            // verify the required parameter 'groupsModelUpdateV1' is set
            if (groupsModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'groupsModelUpdateV1' when calling GroupsApi->UpdateGroup");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = groupsModelUpdateV1;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiResponseV1>("/groups/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update an group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> UpdateGroupAsync(long id, GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await UpdateGroupWithHttpInfoAsync(id, groupsModelUpdateV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update an group 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of group</param>
        /// <param name="groupsModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> UpdateGroupWithHttpInfoAsync(long id, GroupsModelUpdateV1 groupsModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsModelUpdateV1' is set
            if (groupsModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'groupsModelUpdateV1' when calling GroupsApi->UpdateGroup");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = groupsModelUpdateV1;

            localVarRequestOptions.Operation = "GroupsApi.UpdateGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiResponseV1>("/groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

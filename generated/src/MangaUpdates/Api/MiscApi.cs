/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MangaUpdates.Client;
using MangaUpdates.Model;

namespace MangaUpdates.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiscApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// list online users
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MiscOnlineUsersModelV1</returns>
        MiscOnlineUsersModelV1 ListOnlineUsers(int operationIndex = 0);

        /// <summary>
        /// list online users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MiscOnlineUsersModelV1</returns>
        ApiResponse<MiscOnlineUsersModelV1> ListOnlineUsersWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// get the status of a bulk transaction
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">the transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MiscSlowTransactionStatusResponseV1</returns>
        MiscSlowTransactionStatusResponseV1 RetrieveSlowTransactionStatus(string transactionId, int operationIndex = 0);

        /// <summary>
        /// get the status of a bulk transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">the transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MiscSlowTransactionStatusResponseV1</returns>
        ApiResponse<MiscSlowTransactionStatusResponseV1> RetrieveSlowTransactionStatusWithHttpInfo(string transactionId, int operationIndex = 0);
        /// <summary>
        /// show various site stats
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MiscStatsModelV1</returns>
        MiscStatsModelV1 SiteStats(int operationIndex = 0);

        /// <summary>
        /// show various site stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MiscStatsModelV1</returns>
        ApiResponse<MiscStatsModelV1> SiteStatsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// get the current time
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimeV1</returns>
        TimeV1 Time(int operationIndex = 0);

        /// <summary>
        /// get the current time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimeV1</returns>
        ApiResponse<TimeV1> TimeWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiscApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// list online users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiscOnlineUsersModelV1</returns>
        System.Threading.Tasks.Task<MiscOnlineUsersModelV1> ListOnlineUsersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// list online users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiscOnlineUsersModelV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<MiscOnlineUsersModelV1>> ListOnlineUsersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get the status of a bulk transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">the transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiscSlowTransactionStatusResponseV1</returns>
        System.Threading.Tasks.Task<MiscSlowTransactionStatusResponseV1> RetrieveSlowTransactionStatusAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get the status of a bulk transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">the transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiscSlowTransactionStatusResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<MiscSlowTransactionStatusResponseV1>> RetrieveSlowTransactionStatusWithHttpInfoAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// show various site stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiscStatsModelV1</returns>
        System.Threading.Tasks.Task<MiscStatsModelV1> SiteStatsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// show various site stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiscStatsModelV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<MiscStatsModelV1>> SiteStatsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get the current time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeV1</returns>
        System.Threading.Tasks.Task<TimeV1> TimeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get the current time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeV1>> TimeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiscApi : IMiscApiSync, IMiscApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MiscApi : IMiscApi
    {
        private MangaUpdates.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MiscApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MiscApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiscApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MiscApi(string basePath)
        {
            this.Configuration = MangaUpdates.Client.Configuration.MergeConfigurations(
                MangaUpdates.Client.GlobalConfiguration.Instance,
                new MangaUpdates.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiscApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MiscApi(MangaUpdates.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MangaUpdates.Client.Configuration.MergeConfigurations(
                MangaUpdates.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiscApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MiscApi(MangaUpdates.Client.ISynchronousClient client, MangaUpdates.Client.IAsynchronousClient asyncClient, MangaUpdates.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MangaUpdates.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MangaUpdates.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MangaUpdates.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MangaUpdates.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// list online users 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MiscOnlineUsersModelV1</returns>
        public MiscOnlineUsersModelV1 ListOnlineUsers(int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<MiscOnlineUsersModelV1> localVarResponse = ListOnlineUsersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// list online users 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MiscOnlineUsersModelV1</returns>
        public MangaUpdates.Client.ApiResponse<MiscOnlineUsersModelV1> ListOnlineUsersWithHttpInfo(int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MiscApi.ListOnlineUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MiscOnlineUsersModelV1>("/misc/online", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOnlineUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// list online users 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiscOnlineUsersModelV1</returns>
        public async System.Threading.Tasks.Task<MiscOnlineUsersModelV1> ListOnlineUsersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<MiscOnlineUsersModelV1> localVarResponse = await ListOnlineUsersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// list online users 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiscOnlineUsersModelV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<MiscOnlineUsersModelV1>> ListOnlineUsersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MiscApi.ListOnlineUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MiscOnlineUsersModelV1>("/misc/online", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOnlineUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the status of a bulk transaction 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">the transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MiscSlowTransactionStatusResponseV1</returns>
        public MiscSlowTransactionStatusResponseV1 RetrieveSlowTransactionStatus(string transactionId, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<MiscSlowTransactionStatusResponseV1> localVarResponse = RetrieveSlowTransactionStatusWithHttpInfo(transactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the status of a bulk transaction 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">the transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MiscSlowTransactionStatusResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<MiscSlowTransactionStatusResponseV1> RetrieveSlowTransactionStatusWithHttpInfo(string transactionId, int operationIndex = 0)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'transactionId' when calling MiscApi->RetrieveSlowTransactionStatus");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_id", MangaUpdates.Client.ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "MiscApi.RetrieveSlowTransactionStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MiscSlowTransactionStatusResponseV1>("/misc/slow-transaction-status/{transaction_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSlowTransactionStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the status of a bulk transaction 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">the transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiscSlowTransactionStatusResponseV1</returns>
        public async System.Threading.Tasks.Task<MiscSlowTransactionStatusResponseV1> RetrieveSlowTransactionStatusAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<MiscSlowTransactionStatusResponseV1> localVarResponse = await RetrieveSlowTransactionStatusWithHttpInfoAsync(transactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the status of a bulk transaction 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">the transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiscSlowTransactionStatusResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<MiscSlowTransactionStatusResponseV1>> RetrieveSlowTransactionStatusWithHttpInfoAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'transactionId' when calling MiscApi->RetrieveSlowTransactionStatus");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_id", MangaUpdates.Client.ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "MiscApi.RetrieveSlowTransactionStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MiscSlowTransactionStatusResponseV1>("/misc/slow-transaction-status/{transaction_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSlowTransactionStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// show various site stats 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MiscStatsModelV1</returns>
        public MiscStatsModelV1 SiteStats(int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<MiscStatsModelV1> localVarResponse = SiteStatsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// show various site stats 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MiscStatsModelV1</returns>
        public MangaUpdates.Client.ApiResponse<MiscStatsModelV1> SiteStatsWithHttpInfo(int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MiscApi.SiteStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MiscStatsModelV1>("/misc/stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SiteStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// show various site stats 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiscStatsModelV1</returns>
        public async System.Threading.Tasks.Task<MiscStatsModelV1> SiteStatsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<MiscStatsModelV1> localVarResponse = await SiteStatsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// show various site stats 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiscStatsModelV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<MiscStatsModelV1>> SiteStatsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MiscApi.SiteStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MiscStatsModelV1>("/misc/stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SiteStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the current time 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TimeV1</returns>
        public TimeV1 Time(int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<TimeV1> localVarResponse = TimeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the current time 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TimeV1</returns>
        public MangaUpdates.Client.ApiResponse<TimeV1> TimeWithHttpInfo(int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MiscApi.Time";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TimeV1>("/misc/time", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Time", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the current time 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeV1</returns>
        public async System.Threading.Tasks.Task<TimeV1> TimeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<TimeV1> localVarResponse = await TimeWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the current time 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<TimeV1>> TimeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MiscApi.Time";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TimeV1>("/misc/time", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Time", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MangaUpdates.Client;
using MangaUpdates.Model;

namespace MangaUpdates.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConvoApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// abandon a convo
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 AbandonConvo(long id, int operationIndex = 0);

        /// <summary>
        /// abandon a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> AbandonConvoWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// abandon convos in bulk
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 AbandonConvoBulk(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0);

        /// <summary>
        /// abandon convos in bulk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> AbandonConvoBulkWithHttpInfo(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0);
        /// <summary>
        /// add an convo
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 AddConvo(ConvoModelAddV1 convoModelAddV1, int operationIndex = 0);

        /// <summary>
        /// add an convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> AddConvoWithHttpInfo(ConvoModelAddV1 convoModelAddV1, int operationIndex = 0);
        /// <summary>
        /// add a message to a convo
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 AddConvoMessage(long id, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0);

        /// <summary>
        /// add a message to a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> AddConvoMessageWithHttpInfo(long id, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0);
        /// <summary>
        /// display unread messages
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoSearchResponseV1</returns>
        ConvoSearchResponseV1 ConvoInbox(int operationIndex = 0);

        /// <summary>
        /// display unread messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoSearchResponseV1</returns>
        ApiResponse<ConvoSearchResponseV1> ConvoInboxWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// retrieve number of unread messages
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoSearchResponseV1</returns>
        ConvoSearchResponseV1 ConvoInboxCount(int operationIndex = 0);

        /// <summary>
        /// retrieve number of unread messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoSearchResponseV1</returns>
        ApiResponse<ConvoSearchResponseV1> ConvoInboxCountWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// display received (and read) messages
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoSearchResponseV1</returns>
        ConvoSearchResponseV1 ConvoReceived(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0);

        /// <summary>
        /// display received (and read) messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoSearchResponseV1</returns>
        ApiResponse<ConvoSearchResponseV1> ConvoReceivedWithHttpInfo(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0);
        /// <summary>
        /// display sent messages
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoSearchResponseV1</returns>
        ConvoSearchResponseV1 ConvoSent(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0);

        /// <summary>
        /// display sent messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoSearchResponseV1</returns>
        ApiResponse<ConvoSearchResponseV1> ConvoSentWithHttpInfo(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0);
        /// <summary>
        /// delete a convo
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 DeleteConvo(long id, int operationIndex = 0);

        /// <summary>
        /// delete a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> DeleteConvoWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// delete convos in bulk
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 DeleteConvoBulk(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0);

        /// <summary>
        /// delete convos in bulk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> DeleteConvoBulkWithHttpInfo(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0);
        /// <summary>
        /// ignore a user
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 IgnoreUser(long userId, int operationIndex = 0);

        /// <summary>
        /// ignore a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> IgnoreUserWithHttpInfo(long userId, int operationIndex = 0);
        /// <summary>
        /// invite a user to a convo
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoParticipantModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 InviteUserToConvo(long id, List<ConvoParticipantModelAddV1> convoParticipantModelAddV1, int operationIndex = 0);

        /// <summary>
        /// invite a user to a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoParticipantModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> InviteUserToConvoWithHttpInfo(long id, List<ConvoParticipantModelAddV1> convoParticipantModelAddV1, int operationIndex = 0);
        /// <summary>
        /// return whether the user is ignored
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoUserIgnoreModelV1</returns>
        ConvoUserIgnoreModelV1 IsUserIgnored(long userId, int operationIndex = 0);

        /// <summary>
        /// return whether the user is ignored
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoUserIgnoreModelV1</returns>
        ApiResponse<ConvoUserIgnoreModelV1> IsUserIgnoredWithHttpInfo(long userId, int operationIndex = 0);
        /// <summary>
        /// join a convo
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 JoinConvo(long id, int operationIndex = 0);

        /// <summary>
        /// join a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> JoinConvoWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// kick a user from a convo
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 KickUserFromConvo(long id, long userId, int operationIndex = 0);

        /// <summary>
        /// kick a user from a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> KickUserFromConvoWithHttpInfo(long id, long userId, int operationIndex = 0);
        /// <summary>
        /// list convo messages
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageListRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoMessageSearchResponseV1</returns>
        ConvoMessageSearchResponseV1 ListConvoMessages(long id, ConvoMessageListRequestV1 convoMessageListRequestV1, int operationIndex = 0);

        /// <summary>
        /// list convo messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageListRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoMessageSearchResponseV1</returns>
        ApiResponse<ConvoMessageSearchResponseV1> ListConvoMessagesWithHttpInfo(long id, ConvoMessageListRequestV1 convoMessageListRequestV1, int operationIndex = 0);
        /// <summary>
        /// get a specific convo
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoModelV1</returns>
        ConvoModelV1 RetrieveConvo(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0);

        /// <summary>
        /// get a specific convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoModelV1</returns>
        ApiResponse<ConvoModelV1> RetrieveConvoWithHttpInfo(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0);
        /// <summary>
        /// get a specific convo message
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoMessageModelV1</returns>
        ConvoMessageModelV1 RetrieveConvoMessage(long id, long messageId, bool? unrenderedFields = default(bool?), int operationIndex = 0);

        /// <summary>
        /// get a specific convo message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoMessageModelV1</returns>
        ApiResponse<ConvoMessageModelV1> RetrieveConvoMessageWithHttpInfo(long id, long messageId, bool? unrenderedFields = default(bool?), int operationIndex = 0);
        /// <summary>
        /// get a specific convo message location
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 RetrieveConvoMessageLocation(long id, long messageId, int operationIndex = 0);

        /// <summary>
        /// get a specific convo message location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> RetrieveConvoMessageLocationWithHttpInfo(long id, long messageId, int operationIndex = 0);
        /// <summary>
        /// get list of convo participants
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConvoParticipantModelV1&gt;</returns>
        List<ConvoParticipantModelV1> RetrieveConvoParticipants(long id, int operationIndex = 0);

        /// <summary>
        /// get list of convo participants
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConvoParticipantModelV1&gt;</returns>
        ApiResponse<List<ConvoParticipantModelV1>> RetrieveConvoParticipantsWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// search convo
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoMessageSearchResponseV1</returns>
        ConvoMessageSearchResponseV1 SearchConvoMessagesPost(long id, ConvoMessageSearchRequestV1 convoMessageSearchRequestV1, int operationIndex = 0);

        /// <summary>
        /// search convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoMessageSearchResponseV1</returns>
        ApiResponse<ConvoMessageSearchResponseV1> SearchConvoMessagesPostWithHttpInfo(long id, ConvoMessageSearchRequestV1 convoMessageSearchRequestV1, int operationIndex = 0);
        /// <summary>
        /// search convo
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoSearchResponseV1</returns>
        ConvoSearchResponseV1 SearchConvoPost(ConvoSearchRequestV1 convoSearchRequestV1, int operationIndex = 0);

        /// <summary>
        /// search convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoSearchResponseV1</returns>
        ApiResponse<ConvoSearchResponseV1> SearchConvoPostWithHttpInfo(ConvoSearchRequestV1 convoSearchRequestV1, int operationIndex = 0);
        /// <summary>
        /// remove ignore for a user
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 UnIgnoreUser(long userId, int operationIndex = 0);

        /// <summary>
        /// remove ignore for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> UnIgnoreUserWithHttpInfo(long userId, int operationIndex = 0);
        /// <summary>
        /// update a convo
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 UpdateConvo(long id, ConvoModelUpdateV1 convoModelUpdateV1, int operationIndex = 0);

        /// <summary>
        /// update a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> UpdateConvoWithHttpInfo(long id, ConvoModelUpdateV1 convoModelUpdateV1, int operationIndex = 0);
        /// <summary>
        /// update a convo message
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 UpdateConvoMessage(long id, long messageId, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0);

        /// <summary>
        /// update a convo message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> UpdateConvoMessageWithHttpInfo(long id, long messageId, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConvoApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// abandon a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> AbandonConvoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// abandon a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> AbandonConvoWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// abandon convos in bulk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> AbandonConvoBulkAsync(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// abandon convos in bulk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> AbandonConvoBulkWithHttpInfoAsync(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// add an convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> AddConvoAsync(ConvoModelAddV1 convoModelAddV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// add an convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> AddConvoWithHttpInfoAsync(ConvoModelAddV1 convoModelAddV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// add a message to a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> AddConvoMessageAsync(long id, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// add a message to a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> AddConvoMessageWithHttpInfoAsync(long id, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// display unread messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoSearchResponseV1</returns>
        System.Threading.Tasks.Task<ConvoSearchResponseV1> ConvoInboxAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// display unread messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoSearchResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvoSearchResponseV1>> ConvoInboxWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// retrieve number of unread messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoSearchResponseV1</returns>
        System.Threading.Tasks.Task<ConvoSearchResponseV1> ConvoInboxCountAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// retrieve number of unread messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoSearchResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvoSearchResponseV1>> ConvoInboxCountWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// display received (and read) messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoSearchResponseV1</returns>
        System.Threading.Tasks.Task<ConvoSearchResponseV1> ConvoReceivedAsync(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// display received (and read) messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoSearchResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvoSearchResponseV1>> ConvoReceivedWithHttpInfoAsync(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// display sent messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoSearchResponseV1</returns>
        System.Threading.Tasks.Task<ConvoSearchResponseV1> ConvoSentAsync(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// display sent messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoSearchResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvoSearchResponseV1>> ConvoSentWithHttpInfoAsync(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> DeleteConvoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> DeleteConvoWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete convos in bulk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> DeleteConvoBulkAsync(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete convos in bulk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> DeleteConvoBulkWithHttpInfoAsync(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ignore a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> IgnoreUserAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ignore a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> IgnoreUserWithHttpInfoAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// invite a user to a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoParticipantModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> InviteUserToConvoAsync(long id, List<ConvoParticipantModelAddV1> convoParticipantModelAddV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// invite a user to a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoParticipantModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> InviteUserToConvoWithHttpInfoAsync(long id, List<ConvoParticipantModelAddV1> convoParticipantModelAddV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// return whether the user is ignored
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoUserIgnoreModelV1</returns>
        System.Threading.Tasks.Task<ConvoUserIgnoreModelV1> IsUserIgnoredAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// return whether the user is ignored
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoUserIgnoreModelV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvoUserIgnoreModelV1>> IsUserIgnoredWithHttpInfoAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// join a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> JoinConvoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// join a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> JoinConvoWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// kick a user from a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> KickUserFromConvoAsync(long id, long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// kick a user from a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> KickUserFromConvoWithHttpInfoAsync(long id, long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// list convo messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageListRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoMessageSearchResponseV1</returns>
        System.Threading.Tasks.Task<ConvoMessageSearchResponseV1> ListConvoMessagesAsync(long id, ConvoMessageListRequestV1 convoMessageListRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// list convo messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageListRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoMessageSearchResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvoMessageSearchResponseV1>> ListConvoMessagesWithHttpInfoAsync(long id, ConvoMessageListRequestV1 convoMessageListRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get a specific convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoModelV1</returns>
        System.Threading.Tasks.Task<ConvoModelV1> RetrieveConvoAsync(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get a specific convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoModelV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvoModelV1>> RetrieveConvoWithHttpInfoAsync(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get a specific convo message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoMessageModelV1</returns>
        System.Threading.Tasks.Task<ConvoMessageModelV1> RetrieveConvoMessageAsync(long id, long messageId, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get a specific convo message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoMessageModelV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvoMessageModelV1>> RetrieveConvoMessageWithHttpInfoAsync(long id, long messageId, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get a specific convo message location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> RetrieveConvoMessageLocationAsync(long id, long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get a specific convo message location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> RetrieveConvoMessageLocationWithHttpInfoAsync(long id, long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get list of convo participants
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConvoParticipantModelV1&gt;</returns>
        System.Threading.Tasks.Task<List<ConvoParticipantModelV1>> RetrieveConvoParticipantsAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get list of convo participants
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConvoParticipantModelV1&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConvoParticipantModelV1>>> RetrieveConvoParticipantsWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// search convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoMessageSearchResponseV1</returns>
        System.Threading.Tasks.Task<ConvoMessageSearchResponseV1> SearchConvoMessagesPostAsync(long id, ConvoMessageSearchRequestV1 convoMessageSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// search convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoMessageSearchResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvoMessageSearchResponseV1>> SearchConvoMessagesPostWithHttpInfoAsync(long id, ConvoMessageSearchRequestV1 convoMessageSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// search convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoSearchResponseV1</returns>
        System.Threading.Tasks.Task<ConvoSearchResponseV1> SearchConvoPostAsync(ConvoSearchRequestV1 convoSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// search convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoSearchResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvoSearchResponseV1>> SearchConvoPostWithHttpInfoAsync(ConvoSearchRequestV1 convoSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// remove ignore for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> UnIgnoreUserAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// remove ignore for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> UnIgnoreUserWithHttpInfoAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> UpdateConvoAsync(long id, ConvoModelUpdateV1 convoModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update a convo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> UpdateConvoWithHttpInfoAsync(long id, ConvoModelUpdateV1 convoModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update a convo message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> UpdateConvoMessageAsync(long id, long messageId, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update a convo message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> UpdateConvoMessageWithHttpInfoAsync(long id, long messageId, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConvoApi : IConvoApiSync, IConvoApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConvoApi : IConvoApi
    {
        private MangaUpdates.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConvoApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConvoApi(string basePath)
        {
            this.Configuration = MangaUpdates.Client.Configuration.MergeConfigurations(
                MangaUpdates.Client.GlobalConfiguration.Instance,
                new MangaUpdates.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConvoApi(MangaUpdates.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MangaUpdates.Client.Configuration.MergeConfigurations(
                MangaUpdates.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvoApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConvoApi(MangaUpdates.Client.ISynchronousClient client, MangaUpdates.Client.IAsynchronousClient asyncClient, MangaUpdates.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MangaUpdates.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MangaUpdates.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MangaUpdates.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MangaUpdates.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// abandon a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 AbandonConvo(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = AbandonConvoWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// abandon a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> AbandonConvoWithHttpInfo(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.AbandonConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/convo/{id}/abandon", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AbandonConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// abandon a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> AbandonConvoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await AbandonConvoWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// abandon a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> AbandonConvoWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.AbandonConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/convo/{id}/abandon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AbandonConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// abandon convos in bulk 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 AbandonConvoBulk(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = AbandonConvoBulkWithHttpInfo(convoBulkModelV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// abandon convos in bulk 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> AbandonConvoBulkWithHttpInfo(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0)
        {
            // verify the required parameter 'convoBulkModelV1' is set
            if (convoBulkModelV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoBulkModelV1' when calling ConvoApi->AbandonConvoBulk");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = convoBulkModelV1;

            localVarRequestOptions.Operation = "ConvoApi.AbandonConvoBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/convo/bulk/abandon", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AbandonConvoBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// abandon convos in bulk 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> AbandonConvoBulkAsync(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await AbandonConvoBulkWithHttpInfoAsync(convoBulkModelV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// abandon convos in bulk 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> AbandonConvoBulkWithHttpInfoAsync(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'convoBulkModelV1' is set
            if (convoBulkModelV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoBulkModelV1' when calling ConvoApi->AbandonConvoBulk");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = convoBulkModelV1;

            localVarRequestOptions.Operation = "ConvoApi.AbandonConvoBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/convo/bulk/abandon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AbandonConvoBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add an convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 AddConvo(ConvoModelAddV1 convoModelAddV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = AddConvoWithHttpInfo(convoModelAddV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add an convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> AddConvoWithHttpInfo(ConvoModelAddV1 convoModelAddV1, int operationIndex = 0)
        {
            // verify the required parameter 'convoModelAddV1' is set
            if (convoModelAddV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoModelAddV1' when calling ConvoApi->AddConvo");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = convoModelAddV1;

            localVarRequestOptions.Operation = "ConvoApi.AddConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/convo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add an convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> AddConvoAsync(ConvoModelAddV1 convoModelAddV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await AddConvoWithHttpInfoAsync(convoModelAddV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add an convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> AddConvoWithHttpInfoAsync(ConvoModelAddV1 convoModelAddV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'convoModelAddV1' is set
            if (convoModelAddV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoModelAddV1' when calling ConvoApi->AddConvo");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = convoModelAddV1;

            localVarRequestOptions.Operation = "ConvoApi.AddConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/convo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add a message to a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 AddConvoMessage(long id, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = AddConvoMessageWithHttpInfo(id, convoMessageModelUpdateV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add a message to a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> AddConvoMessageWithHttpInfo(long id, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0)
        {
            // verify the required parameter 'convoMessageModelUpdateV1' is set
            if (convoMessageModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoMessageModelUpdateV1' when calling ConvoApi->AddConvoMessage");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = convoMessageModelUpdateV1;

            localVarRequestOptions.Operation = "ConvoApi.AddConvoMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/convo/{id}/messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddConvoMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add a message to a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> AddConvoMessageAsync(long id, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await AddConvoMessageWithHttpInfoAsync(id, convoMessageModelUpdateV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add a message to a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> AddConvoMessageWithHttpInfoAsync(long id, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'convoMessageModelUpdateV1' is set
            if (convoMessageModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoMessageModelUpdateV1' when calling ConvoApi->AddConvoMessage");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = convoMessageModelUpdateV1;

            localVarRequestOptions.Operation = "ConvoApi.AddConvoMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/convo/{id}/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddConvoMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// display unread messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoSearchResponseV1</returns>
        public ConvoSearchResponseV1 ConvoInbox(int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> localVarResponse = ConvoInboxWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// display unread messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoSearchResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> ConvoInboxWithHttpInfo(int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConvoApi.ConvoInbox";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConvoSearchResponseV1>("/convo/inbox", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvoInbox", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// display unread messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoSearchResponseV1</returns>
        public async System.Threading.Tasks.Task<ConvoSearchResponseV1> ConvoInboxAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> localVarResponse = await ConvoInboxWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// display unread messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoSearchResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1>> ConvoInboxWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConvoApi.ConvoInbox";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConvoSearchResponseV1>("/convo/inbox", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvoInbox", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// retrieve number of unread messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoSearchResponseV1</returns>
        public ConvoSearchResponseV1 ConvoInboxCount(int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> localVarResponse = ConvoInboxCountWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// retrieve number of unread messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoSearchResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> ConvoInboxCountWithHttpInfo(int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConvoApi.ConvoInboxCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConvoSearchResponseV1>("/convo/inbox/count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvoInboxCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// retrieve number of unread messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoSearchResponseV1</returns>
        public async System.Threading.Tasks.Task<ConvoSearchResponseV1> ConvoInboxCountAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> localVarResponse = await ConvoInboxCountWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// retrieve number of unread messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoSearchResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1>> ConvoInboxCountWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConvoApi.ConvoInboxCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConvoSearchResponseV1>("/convo/inbox/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvoInboxCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// display received (and read) messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoSearchResponseV1</returns>
        public ConvoSearchResponseV1 ConvoReceived(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> localVarResponse = ConvoReceivedWithHttpInfo(perPageSearchRequestV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// display received (and read) messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoSearchResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> ConvoReceivedWithHttpInfo(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0)
        {
            // verify the required parameter 'perPageSearchRequestV1' is set
            if (perPageSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'perPageSearchRequestV1' when calling ConvoApi->ConvoReceived");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = perPageSearchRequestV1;

            localVarRequestOptions.Operation = "ConvoApi.ConvoReceived";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConvoSearchResponseV1>("/convo/received", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvoReceived", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// display received (and read) messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoSearchResponseV1</returns>
        public async System.Threading.Tasks.Task<ConvoSearchResponseV1> ConvoReceivedAsync(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> localVarResponse = await ConvoReceivedWithHttpInfoAsync(perPageSearchRequestV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// display received (and read) messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoSearchResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1>> ConvoReceivedWithHttpInfoAsync(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'perPageSearchRequestV1' is set
            if (perPageSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'perPageSearchRequestV1' when calling ConvoApi->ConvoReceived");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = perPageSearchRequestV1;

            localVarRequestOptions.Operation = "ConvoApi.ConvoReceived";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConvoSearchResponseV1>("/convo/received", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvoReceived", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// display sent messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoSearchResponseV1</returns>
        public ConvoSearchResponseV1 ConvoSent(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> localVarResponse = ConvoSentWithHttpInfo(perPageSearchRequestV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// display sent messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoSearchResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> ConvoSentWithHttpInfo(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0)
        {
            // verify the required parameter 'perPageSearchRequestV1' is set
            if (perPageSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'perPageSearchRequestV1' when calling ConvoApi->ConvoSent");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = perPageSearchRequestV1;

            localVarRequestOptions.Operation = "ConvoApi.ConvoSent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConvoSearchResponseV1>("/convo/sent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvoSent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// display sent messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoSearchResponseV1</returns>
        public async System.Threading.Tasks.Task<ConvoSearchResponseV1> ConvoSentAsync(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> localVarResponse = await ConvoSentWithHttpInfoAsync(perPageSearchRequestV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// display sent messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perPageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoSearchResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1>> ConvoSentWithHttpInfoAsync(PerPageSearchRequestV1 perPageSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'perPageSearchRequestV1' is set
            if (perPageSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'perPageSearchRequestV1' when calling ConvoApi->ConvoSent");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = perPageSearchRequestV1;

            localVarRequestOptions.Operation = "ConvoApi.ConvoSent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConvoSearchResponseV1>("/convo/sent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvoSent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 DeleteConvo(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = DeleteConvoWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> DeleteConvoWithHttpInfo(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.DeleteConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponseV1>("/convo/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> DeleteConvoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await DeleteConvoWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> DeleteConvoWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.DeleteConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponseV1>("/convo/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete convos in bulk 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 DeleteConvoBulk(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = DeleteConvoBulkWithHttpInfo(convoBulkModelV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete convos in bulk 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> DeleteConvoBulkWithHttpInfo(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0)
        {
            // verify the required parameter 'convoBulkModelV1' is set
            if (convoBulkModelV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoBulkModelV1' when calling ConvoApi->DeleteConvoBulk");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = convoBulkModelV1;

            localVarRequestOptions.Operation = "ConvoApi.DeleteConvoBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/convo/bulk/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConvoBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete convos in bulk 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> DeleteConvoBulkAsync(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await DeleteConvoBulkWithHttpInfoAsync(convoBulkModelV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete convos in bulk 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoBulkModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> DeleteConvoBulkWithHttpInfoAsync(ConvoBulkModelV1 convoBulkModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'convoBulkModelV1' is set
            if (convoBulkModelV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoBulkModelV1' when calling ConvoApi->DeleteConvoBulk");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = convoBulkModelV1;

            localVarRequestOptions.Operation = "ConvoApi.DeleteConvoBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/convo/bulk/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConvoBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ignore a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 IgnoreUser(long userId, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = IgnoreUserWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ignore a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> IgnoreUserWithHttpInfo(long userId, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", MangaUpdates.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.IgnoreUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/convo/ignore/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IgnoreUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ignore a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> IgnoreUserAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await IgnoreUserWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ignore a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> IgnoreUserWithHttpInfoAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", MangaUpdates.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.IgnoreUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/convo/ignore/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IgnoreUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// invite a user to a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoParticipantModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 InviteUserToConvo(long id, List<ConvoParticipantModelAddV1> convoParticipantModelAddV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = InviteUserToConvoWithHttpInfo(id, convoParticipantModelAddV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// invite a user to a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoParticipantModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> InviteUserToConvoWithHttpInfo(long id, List<ConvoParticipantModelAddV1> convoParticipantModelAddV1, int operationIndex = 0)
        {
            // verify the required parameter 'convoParticipantModelAddV1' is set
            if (convoParticipantModelAddV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoParticipantModelAddV1' when calling ConvoApi->InviteUserToConvo");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = convoParticipantModelAddV1;

            localVarRequestOptions.Operation = "ConvoApi.InviteUserToConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/convo/{id}/invite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUserToConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// invite a user to a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoParticipantModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> InviteUserToConvoAsync(long id, List<ConvoParticipantModelAddV1> convoParticipantModelAddV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await InviteUserToConvoWithHttpInfoAsync(id, convoParticipantModelAddV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// invite a user to a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoParticipantModelAddV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> InviteUserToConvoWithHttpInfoAsync(long id, List<ConvoParticipantModelAddV1> convoParticipantModelAddV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'convoParticipantModelAddV1' is set
            if (convoParticipantModelAddV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoParticipantModelAddV1' when calling ConvoApi->InviteUserToConvo");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = convoParticipantModelAddV1;

            localVarRequestOptions.Operation = "ConvoApi.InviteUserToConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/convo/{id}/invite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUserToConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// return whether the user is ignored 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoUserIgnoreModelV1</returns>
        public ConvoUserIgnoreModelV1 IsUserIgnored(long userId, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ConvoUserIgnoreModelV1> localVarResponse = IsUserIgnoredWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// return whether the user is ignored 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoUserIgnoreModelV1</returns>
        public MangaUpdates.Client.ApiResponse<ConvoUserIgnoreModelV1> IsUserIgnoredWithHttpInfo(long userId, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", MangaUpdates.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.IsUserIgnored";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConvoUserIgnoreModelV1>("/convo/ignore/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IsUserIgnored", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// return whether the user is ignored 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoUserIgnoreModelV1</returns>
        public async System.Threading.Tasks.Task<ConvoUserIgnoreModelV1> IsUserIgnoredAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ConvoUserIgnoreModelV1> localVarResponse = await IsUserIgnoredWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// return whether the user is ignored 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoUserIgnoreModelV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ConvoUserIgnoreModelV1>> IsUserIgnoredWithHttpInfoAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", MangaUpdates.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.IsUserIgnored";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConvoUserIgnoreModelV1>("/convo/ignore/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IsUserIgnored", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// join a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 JoinConvo(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = JoinConvoWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// join a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> JoinConvoWithHttpInfo(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.JoinConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/convo/{id}/join", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JoinConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// join a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> JoinConvoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await JoinConvoWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// join a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> JoinConvoWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.JoinConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/convo/{id}/join", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JoinConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// kick a user from a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 KickUserFromConvo(long id, long userId, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = KickUserFromConvoWithHttpInfo(id, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// kick a user from a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> KickUserFromConvoWithHttpInfo(long id, long userId, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", MangaUpdates.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.KickUserFromConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/convo/{id}/kick/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KickUserFromConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// kick a user from a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> KickUserFromConvoAsync(long id, long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await KickUserFromConvoWithHttpInfoAsync(id, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// kick a user from a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> KickUserFromConvoWithHttpInfoAsync(long id, long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", MangaUpdates.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.KickUserFromConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/convo/{id}/kick/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KickUserFromConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// list convo messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageListRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoMessageSearchResponseV1</returns>
        public ConvoMessageSearchResponseV1 ListConvoMessages(long id, ConvoMessageListRequestV1 convoMessageListRequestV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ConvoMessageSearchResponseV1> localVarResponse = ListConvoMessagesWithHttpInfo(id, convoMessageListRequestV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// list convo messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageListRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoMessageSearchResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ConvoMessageSearchResponseV1> ListConvoMessagesWithHttpInfo(long id, ConvoMessageListRequestV1 convoMessageListRequestV1, int operationIndex = 0)
        {
            // verify the required parameter 'convoMessageListRequestV1' is set
            if (convoMessageListRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoMessageListRequestV1' when calling ConvoApi->ListConvoMessages");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = convoMessageListRequestV1;

            localVarRequestOptions.Operation = "ConvoApi.ListConvoMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConvoMessageSearchResponseV1>("/convo/{id}/messages/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConvoMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// list convo messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageListRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoMessageSearchResponseV1</returns>
        public async System.Threading.Tasks.Task<ConvoMessageSearchResponseV1> ListConvoMessagesAsync(long id, ConvoMessageListRequestV1 convoMessageListRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ConvoMessageSearchResponseV1> localVarResponse = await ListConvoMessagesWithHttpInfoAsync(id, convoMessageListRequestV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// list convo messages 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageListRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoMessageSearchResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ConvoMessageSearchResponseV1>> ListConvoMessagesWithHttpInfoAsync(long id, ConvoMessageListRequestV1 convoMessageListRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'convoMessageListRequestV1' is set
            if (convoMessageListRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoMessageListRequestV1' when calling ConvoApi->ListConvoMessages");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = convoMessageListRequestV1;

            localVarRequestOptions.Operation = "ConvoApi.ListConvoMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConvoMessageSearchResponseV1>("/convo/{id}/messages/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConvoMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a specific convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoModelV1</returns>
        public ConvoModelV1 RetrieveConvo(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ConvoModelV1> localVarResponse = RetrieveConvoWithHttpInfo(id, unrenderedFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a specific convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoModelV1</returns>
        public MangaUpdates.Client.ApiResponse<ConvoModelV1> RetrieveConvoWithHttpInfo(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (unrenderedFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(MangaUpdates.Client.ClientUtils.ParameterToMultiMap("", "unrenderedFields", unrenderedFields));
            }

            localVarRequestOptions.Operation = "ConvoApi.RetrieveConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConvoModelV1>("/convo/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a specific convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoModelV1</returns>
        public async System.Threading.Tasks.Task<ConvoModelV1> RetrieveConvoAsync(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ConvoModelV1> localVarResponse = await RetrieveConvoWithHttpInfoAsync(id, unrenderedFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a specific convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoModelV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ConvoModelV1>> RetrieveConvoWithHttpInfoAsync(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (unrenderedFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(MangaUpdates.Client.ClientUtils.ParameterToMultiMap("", "unrenderedFields", unrenderedFields));
            }

            localVarRequestOptions.Operation = "ConvoApi.RetrieveConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConvoModelV1>("/convo/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a specific convo message 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoMessageModelV1</returns>
        public ConvoMessageModelV1 RetrieveConvoMessage(long id, long messageId, bool? unrenderedFields = default(bool?), int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ConvoMessageModelV1> localVarResponse = RetrieveConvoMessageWithHttpInfo(id, messageId, unrenderedFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a specific convo message 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoMessageModelV1</returns>
        public MangaUpdates.Client.ApiResponse<ConvoMessageModelV1> RetrieveConvoMessageWithHttpInfo(long id, long messageId, bool? unrenderedFields = default(bool?), int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", MangaUpdates.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            if (unrenderedFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(MangaUpdates.Client.ClientUtils.ParameterToMultiMap("", "unrenderedFields", unrenderedFields));
            }

            localVarRequestOptions.Operation = "ConvoApi.RetrieveConvoMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConvoMessageModelV1>("/convo/{id}/messages/{message_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveConvoMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a specific convo message 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoMessageModelV1</returns>
        public async System.Threading.Tasks.Task<ConvoMessageModelV1> RetrieveConvoMessageAsync(long id, long messageId, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ConvoMessageModelV1> localVarResponse = await RetrieveConvoMessageWithHttpInfoAsync(id, messageId, unrenderedFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a specific convo message 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoMessageModelV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ConvoMessageModelV1>> RetrieveConvoMessageWithHttpInfoAsync(long id, long messageId, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", MangaUpdates.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            if (unrenderedFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(MangaUpdates.Client.ClientUtils.ParameterToMultiMap("", "unrenderedFields", unrenderedFields));
            }

            localVarRequestOptions.Operation = "ConvoApi.RetrieveConvoMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConvoMessageModelV1>("/convo/{id}/messages/{message_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveConvoMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a specific convo message location 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 RetrieveConvoMessageLocation(long id, long messageId, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = RetrieveConvoMessageLocationWithHttpInfo(id, messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a specific convo message location 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> RetrieveConvoMessageLocationWithHttpInfo(long id, long messageId, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", MangaUpdates.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.RetrieveConvoMessageLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiResponseV1>("/convo/{id}/messages/{message_id}/location", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveConvoMessageLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a specific convo message location 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> RetrieveConvoMessageLocationAsync(long id, long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await RetrieveConvoMessageLocationWithHttpInfoAsync(id, messageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a specific convo message location 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> RetrieveConvoMessageLocationWithHttpInfoAsync(long id, long messageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", MangaUpdates.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.RetrieveConvoMessageLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiResponseV1>("/convo/{id}/messages/{message_id}/location", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveConvoMessageLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get list of convo participants 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConvoParticipantModelV1&gt;</returns>
        public List<ConvoParticipantModelV1> RetrieveConvoParticipants(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<List<ConvoParticipantModelV1>> localVarResponse = RetrieveConvoParticipantsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get list of convo participants 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConvoParticipantModelV1&gt;</returns>
        public MangaUpdates.Client.ApiResponse<List<ConvoParticipantModelV1>> RetrieveConvoParticipantsWithHttpInfo(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.RetrieveConvoParticipants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ConvoParticipantModelV1>>("/convo/{id}/participants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveConvoParticipants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get list of convo participants 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConvoParticipantModelV1&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConvoParticipantModelV1>> RetrieveConvoParticipantsAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<List<ConvoParticipantModelV1>> localVarResponse = await RetrieveConvoParticipantsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get list of convo participants 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConvoParticipantModelV1&gt;)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<List<ConvoParticipantModelV1>>> RetrieveConvoParticipantsWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.RetrieveConvoParticipants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ConvoParticipantModelV1>>("/convo/{id}/participants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveConvoParticipants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// search convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoMessageSearchResponseV1</returns>
        public ConvoMessageSearchResponseV1 SearchConvoMessagesPost(long id, ConvoMessageSearchRequestV1 convoMessageSearchRequestV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ConvoMessageSearchResponseV1> localVarResponse = SearchConvoMessagesPostWithHttpInfo(id, convoMessageSearchRequestV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// search convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoMessageSearchResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ConvoMessageSearchResponseV1> SearchConvoMessagesPostWithHttpInfo(long id, ConvoMessageSearchRequestV1 convoMessageSearchRequestV1, int operationIndex = 0)
        {
            // verify the required parameter 'convoMessageSearchRequestV1' is set
            if (convoMessageSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoMessageSearchRequestV1' when calling ConvoApi->SearchConvoMessagesPost");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = convoMessageSearchRequestV1;

            localVarRequestOptions.Operation = "ConvoApi.SearchConvoMessagesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConvoMessageSearchResponseV1>("/convo/{id}/messages/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchConvoMessagesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// search convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoMessageSearchResponseV1</returns>
        public async System.Threading.Tasks.Task<ConvoMessageSearchResponseV1> SearchConvoMessagesPostAsync(long id, ConvoMessageSearchRequestV1 convoMessageSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ConvoMessageSearchResponseV1> localVarResponse = await SearchConvoMessagesPostWithHttpInfoAsync(id, convoMessageSearchRequestV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// search convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoMessageSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoMessageSearchResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ConvoMessageSearchResponseV1>> SearchConvoMessagesPostWithHttpInfoAsync(long id, ConvoMessageSearchRequestV1 convoMessageSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'convoMessageSearchRequestV1' is set
            if (convoMessageSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoMessageSearchRequestV1' when calling ConvoApi->SearchConvoMessagesPost");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = convoMessageSearchRequestV1;

            localVarRequestOptions.Operation = "ConvoApi.SearchConvoMessagesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConvoMessageSearchResponseV1>("/convo/{id}/messages/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchConvoMessagesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// search convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvoSearchResponseV1</returns>
        public ConvoSearchResponseV1 SearchConvoPost(ConvoSearchRequestV1 convoSearchRequestV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> localVarResponse = SearchConvoPostWithHttpInfo(convoSearchRequestV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// search convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvoSearchResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> SearchConvoPostWithHttpInfo(ConvoSearchRequestV1 convoSearchRequestV1, int operationIndex = 0)
        {
            // verify the required parameter 'convoSearchRequestV1' is set
            if (convoSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoSearchRequestV1' when calling ConvoApi->SearchConvoPost");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = convoSearchRequestV1;

            localVarRequestOptions.Operation = "ConvoApi.SearchConvoPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConvoSearchResponseV1>("/convo/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchConvoPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// search convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvoSearchResponseV1</returns>
        public async System.Threading.Tasks.Task<ConvoSearchResponseV1> SearchConvoPostAsync(ConvoSearchRequestV1 convoSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1> localVarResponse = await SearchConvoPostWithHttpInfoAsync(convoSearchRequestV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// search convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convoSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvoSearchResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ConvoSearchResponseV1>> SearchConvoPostWithHttpInfoAsync(ConvoSearchRequestV1 convoSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'convoSearchRequestV1' is set
            if (convoSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoSearchRequestV1' when calling ConvoApi->SearchConvoPost");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = convoSearchRequestV1;

            localVarRequestOptions.Operation = "ConvoApi.SearchConvoPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConvoSearchResponseV1>("/convo/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchConvoPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// remove ignore for a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 UnIgnoreUser(long userId, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = UnIgnoreUserWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// remove ignore for a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> UnIgnoreUserWithHttpInfo(long userId, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", MangaUpdates.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.UnIgnoreUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponseV1>("/convo/ignore/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnIgnoreUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// remove ignore for a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> UnIgnoreUserAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await UnIgnoreUserWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// remove ignore for a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> UnIgnoreUserWithHttpInfoAsync(long userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", MangaUpdates.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ConvoApi.UnIgnoreUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponseV1>("/convo/ignore/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnIgnoreUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 UpdateConvo(long id, ConvoModelUpdateV1 convoModelUpdateV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = UpdateConvoWithHttpInfo(id, convoModelUpdateV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> UpdateConvoWithHttpInfo(long id, ConvoModelUpdateV1 convoModelUpdateV1, int operationIndex = 0)
        {
            // verify the required parameter 'convoModelUpdateV1' is set
            if (convoModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoModelUpdateV1' when calling ConvoApi->UpdateConvo");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = convoModelUpdateV1;

            localVarRequestOptions.Operation = "ConvoApi.UpdateConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiResponseV1>("/convo/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> UpdateConvoAsync(long id, ConvoModelUpdateV1 convoModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await UpdateConvoWithHttpInfoAsync(id, convoModelUpdateV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update a convo 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="convoModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> UpdateConvoWithHttpInfoAsync(long id, ConvoModelUpdateV1 convoModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'convoModelUpdateV1' is set
            if (convoModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoModelUpdateV1' when calling ConvoApi->UpdateConvo");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = convoModelUpdateV1;

            localVarRequestOptions.Operation = "ConvoApi.UpdateConvo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiResponseV1>("/convo/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConvo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update a convo message 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 UpdateConvoMessage(long id, long messageId, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = UpdateConvoMessageWithHttpInfo(id, messageId, convoMessageModelUpdateV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update a convo message 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> UpdateConvoMessageWithHttpInfo(long id, long messageId, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0)
        {
            // verify the required parameter 'convoMessageModelUpdateV1' is set
            if (convoMessageModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoMessageModelUpdateV1' when calling ConvoApi->UpdateConvoMessage");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", MangaUpdates.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.Data = convoMessageModelUpdateV1;

            localVarRequestOptions.Operation = "ConvoApi.UpdateConvoMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiResponseV1>("/convo/{id}/messages/{message_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConvoMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update a convo message 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> UpdateConvoMessageAsync(long id, long messageId, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await UpdateConvoMessageWithHttpInfoAsync(id, messageId, convoMessageModelUpdateV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update a convo message 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Convo id</param>
        /// <param name="messageId">Convo message id</param>
        /// <param name="convoMessageModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> UpdateConvoMessageWithHttpInfoAsync(long id, long messageId, ConvoMessageModelUpdateV1 convoMessageModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'convoMessageModelUpdateV1' is set
            if (convoMessageModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'convoMessageModelUpdateV1' when calling ConvoApi->UpdateConvoMessage");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("message_id", MangaUpdates.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.Data = convoMessageModelUpdateV1;

            localVarRequestOptions.Operation = "ConvoApi.UpdateConvoMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiResponseV1>("/convo/{id}/messages/{message_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConvoMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

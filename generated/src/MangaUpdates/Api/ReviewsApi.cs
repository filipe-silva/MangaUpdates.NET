/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MangaUpdates.Client;
using MangaUpdates.Model;

namespace MangaUpdates.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReviewsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// add a review
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 AddReview(ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0);

        /// <summary>
        /// add a review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> AddReviewWithHttpInfo(ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0);
        /// <summary>
        /// add a review comment
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 AddReviewComment(long id, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0);

        /// <summary>
        /// add a review comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> AddReviewCommentWithHttpInfo(long id, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0);
        /// <summary>
        /// delete a review
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 DeleteReview(long id, int operationIndex = 0);

        /// <summary>
        /// delete a review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> DeleteReviewWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// delete a review comment
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 DeleteReviewComment(long id, long commentId, int operationIndex = 0);

        /// <summary>
        /// delete a review comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> DeleteReviewCommentWithHttpInfo(long id, long commentId, int operationIndex = 0);
        /// <summary>
        /// get a specific review
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReviewModelV1</returns>
        ReviewModelV1 RetrieveReview(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0);

        /// <summary>
        /// get a specific review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReviewModelV1</returns>
        ApiResponse<ReviewModelV1> RetrieveReviewWithHttpInfo(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0);
        /// <summary>
        /// get a specific review comment
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="commentId">Review comment id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReviewCommentModelV1</returns>
        ReviewCommentModelV1 RetrieveReviewComment(long id, long commentId, bool? unrenderedFields = default(bool?), int operationIndex = 0);

        /// <summary>
        /// get a specific review comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="commentId">Review comment id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReviewCommentModelV1</returns>
        ApiResponse<ReviewCommentModelV1> RetrieveReviewCommentWithHttpInfo(long id, long commentId, bool? unrenderedFields = default(bool?), int operationIndex = 0);
        /// <summary>
        /// moderate review comments
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReviewCommentSearchResponseV1</returns>
        ReviewCommentSearchResponseV1 ReviewCommentsModerationPost(ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0);

        /// <summary>
        /// moderate review comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReviewCommentSearchResponseV1</returns>
        ApiResponse<ReviewCommentSearchResponseV1> ReviewCommentsModerationPostWithHttpInfo(ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0);
        /// <summary>
        /// search review comments
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReviewCommentSearchResponseV1</returns>
        ReviewCommentSearchResponseV1 SearchReviewCommentsPost(long id, ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0);

        /// <summary>
        /// search review comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReviewCommentSearchResponseV1</returns>
        ApiResponse<ReviewCommentSearchResponseV1> SearchReviewCommentsPostWithHttpInfo(long id, ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0);
        /// <summary>
        /// search reviews
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReviewSearchResponseV1</returns>
        ReviewSearchResponseV1 SearchReviewsPost(ReviewSearchRequestV1 reviewSearchRequestV1, int operationIndex = 0);

        /// <summary>
        /// search reviews
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReviewSearchResponseV1</returns>
        ApiResponse<ReviewSearchResponseV1> SearchReviewsPostWithHttpInfo(ReviewSearchRequestV1 reviewSearchRequestV1, int operationIndex = 0);
        /// <summary>
        /// update a review
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 UpdateReview(long id, ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0);

        /// <summary>
        /// update a review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> UpdateReviewWithHttpInfo(long id, ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0);
        /// <summary>
        /// update a review comment
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 UpdateReviewComment(long id, long commentId, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0);

        /// <summary>
        /// update a review comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> UpdateReviewCommentWithHttpInfo(long id, long commentId, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReviewsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// add a review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> AddReviewAsync(ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// add a review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> AddReviewWithHttpInfoAsync(ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// add a review comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> AddReviewCommentAsync(long id, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// add a review comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> AddReviewCommentWithHttpInfoAsync(long id, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete a review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> DeleteReviewAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete a review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> DeleteReviewWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete a review comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> DeleteReviewCommentAsync(long id, long commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete a review comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> DeleteReviewCommentWithHttpInfoAsync(long id, long commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get a specific review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReviewModelV1</returns>
        System.Threading.Tasks.Task<ReviewModelV1> RetrieveReviewAsync(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get a specific review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReviewModelV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReviewModelV1>> RetrieveReviewWithHttpInfoAsync(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get a specific review comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="commentId">Review comment id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReviewCommentModelV1</returns>
        System.Threading.Tasks.Task<ReviewCommentModelV1> RetrieveReviewCommentAsync(long id, long commentId, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get a specific review comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="commentId">Review comment id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReviewCommentModelV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReviewCommentModelV1>> RetrieveReviewCommentWithHttpInfoAsync(long id, long commentId, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// moderate review comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReviewCommentSearchResponseV1</returns>
        System.Threading.Tasks.Task<ReviewCommentSearchResponseV1> ReviewCommentsModerationPostAsync(ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// moderate review comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReviewCommentSearchResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReviewCommentSearchResponseV1>> ReviewCommentsModerationPostWithHttpInfoAsync(ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// search review comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReviewCommentSearchResponseV1</returns>
        System.Threading.Tasks.Task<ReviewCommentSearchResponseV1> SearchReviewCommentsPostAsync(long id, ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// search review comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReviewCommentSearchResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReviewCommentSearchResponseV1>> SearchReviewCommentsPostWithHttpInfoAsync(long id, ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// search reviews
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReviewSearchResponseV1</returns>
        System.Threading.Tasks.Task<ReviewSearchResponseV1> SearchReviewsPostAsync(ReviewSearchRequestV1 reviewSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// search reviews
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReviewSearchResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReviewSearchResponseV1>> SearchReviewsPostWithHttpInfoAsync(ReviewSearchRequestV1 reviewSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update a review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> UpdateReviewAsync(long id, ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update a review
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> UpdateReviewWithHttpInfoAsync(long id, ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update a review comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> UpdateReviewCommentAsync(long id, long commentId, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update a review comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> UpdateReviewCommentWithHttpInfoAsync(long id, long commentId, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReviewsApi : IReviewsApiSync, IReviewsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReviewsApi : IReviewsApi
    {
        private MangaUpdates.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReviewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReviewsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReviewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReviewsApi(string basePath)
        {
            this.Configuration = MangaUpdates.Client.Configuration.MergeConfigurations(
                MangaUpdates.Client.GlobalConfiguration.Instance,
                new MangaUpdates.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReviewsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReviewsApi(MangaUpdates.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MangaUpdates.Client.Configuration.MergeConfigurations(
                MangaUpdates.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReviewsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReviewsApi(MangaUpdates.Client.ISynchronousClient client, MangaUpdates.Client.IAsynchronousClient asyncClient, MangaUpdates.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MangaUpdates.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MangaUpdates.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MangaUpdates.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MangaUpdates.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// add a review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 AddReview(ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = AddReviewWithHttpInfo(reviewModelUpdateV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add a review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> AddReviewWithHttpInfo(ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0)
        {
            // verify the required parameter 'reviewModelUpdateV1' is set
            if (reviewModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewModelUpdateV1' when calling ReviewsApi->AddReview");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reviewModelUpdateV1;

            localVarRequestOptions.Operation = "ReviewsApi.AddReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/reviews", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add a review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> AddReviewAsync(ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await AddReviewWithHttpInfoAsync(reviewModelUpdateV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add a review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> AddReviewWithHttpInfoAsync(ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reviewModelUpdateV1' is set
            if (reviewModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewModelUpdateV1' when calling ReviewsApi->AddReview");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reviewModelUpdateV1;

            localVarRequestOptions.Operation = "ReviewsApi.AddReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/reviews", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add a review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 AddReviewComment(long id, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = AddReviewCommentWithHttpInfo(id, reviewCommentModelUpdateV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add a review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> AddReviewCommentWithHttpInfo(long id, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0)
        {
            // verify the required parameter 'reviewCommentModelUpdateV1' is set
            if (reviewCommentModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewCommentModelUpdateV1' when calling ReviewsApi->AddReviewComment");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = reviewCommentModelUpdateV1;

            localVarRequestOptions.Operation = "ReviewsApi.AddReviewComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/reviews/{id}/comments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddReviewComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add a review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> AddReviewCommentAsync(long id, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await AddReviewCommentWithHttpInfoAsync(id, reviewCommentModelUpdateV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add a review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> AddReviewCommentWithHttpInfoAsync(long id, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reviewCommentModelUpdateV1' is set
            if (reviewCommentModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewCommentModelUpdateV1' when calling ReviewsApi->AddReviewComment");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = reviewCommentModelUpdateV1;

            localVarRequestOptions.Operation = "ReviewsApi.AddReviewComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/reviews/{id}/comments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddReviewComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete a review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 DeleteReview(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = DeleteReviewWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete a review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> DeleteReviewWithHttpInfo(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ReviewsApi.DeleteReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponseV1>("/reviews/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete a review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> DeleteReviewAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await DeleteReviewWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete a review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> DeleteReviewWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ReviewsApi.DeleteReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponseV1>("/reviews/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete a review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 DeleteReviewComment(long id, long commentId, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = DeleteReviewCommentWithHttpInfo(id, commentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete a review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> DeleteReviewCommentWithHttpInfo(long id, long commentId, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("comment_id", MangaUpdates.Client.ClientUtils.ParameterToString(commentId)); // path parameter

            localVarRequestOptions.Operation = "ReviewsApi.DeleteReviewComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponseV1>("/reviews/{id}/comments/{comment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReviewComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete a review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> DeleteReviewCommentAsync(long id, long commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await DeleteReviewCommentWithHttpInfoAsync(id, commentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete a review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> DeleteReviewCommentWithHttpInfoAsync(long id, long commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("comment_id", MangaUpdates.Client.ClientUtils.ParameterToString(commentId)); // path parameter

            localVarRequestOptions.Operation = "ReviewsApi.DeleteReviewComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponseV1>("/reviews/{id}/comments/{comment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReviewComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a specific review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReviewModelV1</returns>
        public ReviewModelV1 RetrieveReview(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ReviewModelV1> localVarResponse = RetrieveReviewWithHttpInfo(id, unrenderedFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a specific review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReviewModelV1</returns>
        public MangaUpdates.Client.ApiResponse<ReviewModelV1> RetrieveReviewWithHttpInfo(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (unrenderedFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(MangaUpdates.Client.ClientUtils.ParameterToMultiMap("", "unrenderedFields", unrenderedFields));
            }

            localVarRequestOptions.Operation = "ReviewsApi.RetrieveReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReviewModelV1>("/reviews/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a specific review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReviewModelV1</returns>
        public async System.Threading.Tasks.Task<ReviewModelV1> RetrieveReviewAsync(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ReviewModelV1> localVarResponse = await RetrieveReviewWithHttpInfoAsync(id, unrenderedFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a specific review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReviewModelV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ReviewModelV1>> RetrieveReviewWithHttpInfoAsync(long id, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (unrenderedFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(MangaUpdates.Client.ClientUtils.ParameterToMultiMap("", "unrenderedFields", unrenderedFields));
            }

            localVarRequestOptions.Operation = "ReviewsApi.RetrieveReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReviewModelV1>("/reviews/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a specific review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="commentId">Review comment id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReviewCommentModelV1</returns>
        public ReviewCommentModelV1 RetrieveReviewComment(long id, long commentId, bool? unrenderedFields = default(bool?), int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ReviewCommentModelV1> localVarResponse = RetrieveReviewCommentWithHttpInfo(id, commentId, unrenderedFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a specific review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="commentId">Review comment id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReviewCommentModelV1</returns>
        public MangaUpdates.Client.ApiResponse<ReviewCommentModelV1> RetrieveReviewCommentWithHttpInfo(long id, long commentId, bool? unrenderedFields = default(bool?), int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("comment_id", MangaUpdates.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            if (unrenderedFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(MangaUpdates.Client.ClientUtils.ParameterToMultiMap("", "unrenderedFields", unrenderedFields));
            }

            localVarRequestOptions.Operation = "ReviewsApi.RetrieveReviewComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReviewCommentModelV1>("/reviews/{id}/comments/{comment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveReviewComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a specific review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="commentId">Review comment id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReviewCommentModelV1</returns>
        public async System.Threading.Tasks.Task<ReviewCommentModelV1> RetrieveReviewCommentAsync(long id, long commentId, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ReviewCommentModelV1> localVarResponse = await RetrieveReviewCommentWithHttpInfoAsync(id, commentId, unrenderedFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a specific review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="commentId">Review comment id</param>
        /// <param name="unrenderedFields">Output fields in unrendered form for editing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReviewCommentModelV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ReviewCommentModelV1>> RetrieveReviewCommentWithHttpInfoAsync(long id, long commentId, bool? unrenderedFields = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("comment_id", MangaUpdates.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            if (unrenderedFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(MangaUpdates.Client.ClientUtils.ParameterToMultiMap("", "unrenderedFields", unrenderedFields));
            }

            localVarRequestOptions.Operation = "ReviewsApi.RetrieveReviewComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReviewCommentModelV1>("/reviews/{id}/comments/{comment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveReviewComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// moderate review comments 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReviewCommentSearchResponseV1</returns>
        public ReviewCommentSearchResponseV1 ReviewCommentsModerationPost(ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ReviewCommentSearchResponseV1> localVarResponse = ReviewCommentsModerationPostWithHttpInfo(reviewCommentSearchRequestV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// moderate review comments 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReviewCommentSearchResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ReviewCommentSearchResponseV1> ReviewCommentsModerationPostWithHttpInfo(ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0)
        {
            // verify the required parameter 'reviewCommentSearchRequestV1' is set
            if (reviewCommentSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewCommentSearchRequestV1' when calling ReviewsApi->ReviewCommentsModerationPost");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reviewCommentSearchRequestV1;

            localVarRequestOptions.Operation = "ReviewsApi.ReviewCommentsModerationPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReviewCommentSearchResponseV1>("/reviews/comments/moderation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReviewCommentsModerationPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// moderate review comments 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReviewCommentSearchResponseV1</returns>
        public async System.Threading.Tasks.Task<ReviewCommentSearchResponseV1> ReviewCommentsModerationPostAsync(ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ReviewCommentSearchResponseV1> localVarResponse = await ReviewCommentsModerationPostWithHttpInfoAsync(reviewCommentSearchRequestV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// moderate review comments 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReviewCommentSearchResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ReviewCommentSearchResponseV1>> ReviewCommentsModerationPostWithHttpInfoAsync(ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reviewCommentSearchRequestV1' is set
            if (reviewCommentSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewCommentSearchRequestV1' when calling ReviewsApi->ReviewCommentsModerationPost");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reviewCommentSearchRequestV1;

            localVarRequestOptions.Operation = "ReviewsApi.ReviewCommentsModerationPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReviewCommentSearchResponseV1>("/reviews/comments/moderation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReviewCommentsModerationPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// search review comments 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReviewCommentSearchResponseV1</returns>
        public ReviewCommentSearchResponseV1 SearchReviewCommentsPost(long id, ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ReviewCommentSearchResponseV1> localVarResponse = SearchReviewCommentsPostWithHttpInfo(id, reviewCommentSearchRequestV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// search review comments 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReviewCommentSearchResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ReviewCommentSearchResponseV1> SearchReviewCommentsPostWithHttpInfo(long id, ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0)
        {
            // verify the required parameter 'reviewCommentSearchRequestV1' is set
            if (reviewCommentSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewCommentSearchRequestV1' when calling ReviewsApi->SearchReviewCommentsPost");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = reviewCommentSearchRequestV1;

            localVarRequestOptions.Operation = "ReviewsApi.SearchReviewCommentsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReviewCommentSearchResponseV1>("/reviews/{id}/comments/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchReviewCommentsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// search review comments 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReviewCommentSearchResponseV1</returns>
        public async System.Threading.Tasks.Task<ReviewCommentSearchResponseV1> SearchReviewCommentsPostAsync(long id, ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ReviewCommentSearchResponseV1> localVarResponse = await SearchReviewCommentsPostWithHttpInfoAsync(id, reviewCommentSearchRequestV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// search review comments 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Review id</param>
        /// <param name="reviewCommentSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReviewCommentSearchResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ReviewCommentSearchResponseV1>> SearchReviewCommentsPostWithHttpInfoAsync(long id, ReviewCommentSearchRequestV1 reviewCommentSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reviewCommentSearchRequestV1' is set
            if (reviewCommentSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewCommentSearchRequestV1' when calling ReviewsApi->SearchReviewCommentsPost");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = reviewCommentSearchRequestV1;

            localVarRequestOptions.Operation = "ReviewsApi.SearchReviewCommentsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReviewCommentSearchResponseV1>("/reviews/{id}/comments/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchReviewCommentsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// search reviews 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReviewSearchResponseV1</returns>
        public ReviewSearchResponseV1 SearchReviewsPost(ReviewSearchRequestV1 reviewSearchRequestV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ReviewSearchResponseV1> localVarResponse = SearchReviewsPostWithHttpInfo(reviewSearchRequestV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// search reviews 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReviewSearchResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ReviewSearchResponseV1> SearchReviewsPostWithHttpInfo(ReviewSearchRequestV1 reviewSearchRequestV1, int operationIndex = 0)
        {
            // verify the required parameter 'reviewSearchRequestV1' is set
            if (reviewSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewSearchRequestV1' when calling ReviewsApi->SearchReviewsPost");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reviewSearchRequestV1;

            localVarRequestOptions.Operation = "ReviewsApi.SearchReviewsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReviewSearchResponseV1>("/reviews/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchReviewsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// search reviews 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReviewSearchResponseV1</returns>
        public async System.Threading.Tasks.Task<ReviewSearchResponseV1> SearchReviewsPostAsync(ReviewSearchRequestV1 reviewSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ReviewSearchResponseV1> localVarResponse = await SearchReviewsPostWithHttpInfoAsync(reviewSearchRequestV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// search reviews 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewSearchRequestV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReviewSearchResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ReviewSearchResponseV1>> SearchReviewsPostWithHttpInfoAsync(ReviewSearchRequestV1 reviewSearchRequestV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reviewSearchRequestV1' is set
            if (reviewSearchRequestV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewSearchRequestV1' when calling ReviewsApi->SearchReviewsPost");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reviewSearchRequestV1;

            localVarRequestOptions.Operation = "ReviewsApi.SearchReviewsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReviewSearchResponseV1>("/reviews/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchReviewsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update a review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 UpdateReview(long id, ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = UpdateReviewWithHttpInfo(id, reviewModelUpdateV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update a review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> UpdateReviewWithHttpInfo(long id, ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0)
        {
            // verify the required parameter 'reviewModelUpdateV1' is set
            if (reviewModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewModelUpdateV1' when calling ReviewsApi->UpdateReview");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = reviewModelUpdateV1;

            localVarRequestOptions.Operation = "ReviewsApi.UpdateReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiResponseV1>("/reviews/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update a review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> UpdateReviewAsync(long id, ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await UpdateReviewWithHttpInfoAsync(id, reviewModelUpdateV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update a review 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="reviewModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> UpdateReviewWithHttpInfoAsync(long id, ReviewModelUpdateV1 reviewModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reviewModelUpdateV1' is set
            if (reviewModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewModelUpdateV1' when calling ReviewsApi->UpdateReview");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = reviewModelUpdateV1;

            localVarRequestOptions.Operation = "ReviewsApi.UpdateReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiResponseV1>("/reviews/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update a review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 UpdateReviewComment(long id, long commentId, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = UpdateReviewCommentWithHttpInfo(id, commentId, reviewCommentModelUpdateV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update a review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> UpdateReviewCommentWithHttpInfo(long id, long commentId, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0)
        {
            // verify the required parameter 'reviewCommentModelUpdateV1' is set
            if (reviewCommentModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewCommentModelUpdateV1' when calling ReviewsApi->UpdateReviewComment");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("comment_id", MangaUpdates.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            localVarRequestOptions.Data = reviewCommentModelUpdateV1;

            localVarRequestOptions.Operation = "ReviewsApi.UpdateReviewComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiResponseV1>("/reviews/{id}/comments/{comment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReviewComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update a review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> UpdateReviewCommentAsync(long id, long commentId, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await UpdateReviewCommentWithHttpInfoAsync(id, commentId, reviewCommentModelUpdateV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update a review comment 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of review</param>
        /// <param name="commentId">id of review comment</param>
        /// <param name="reviewCommentModelUpdateV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> UpdateReviewCommentWithHttpInfoAsync(long id, long commentId, ReviewCommentModelUpdateV1 reviewCommentModelUpdateV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reviewCommentModelUpdateV1' is set
            if (reviewCommentModelUpdateV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'reviewCommentModelUpdateV1' when calling ReviewsApi->UpdateReviewComment");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("comment_id", MangaUpdates.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            localVarRequestOptions.Data = reviewCommentModelUpdateV1;

            localVarRequestOptions.Operation = "ReviewsApi.UpdateReviewComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiResponseV1>("/reviews/{id}/comments/{comment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReviewComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

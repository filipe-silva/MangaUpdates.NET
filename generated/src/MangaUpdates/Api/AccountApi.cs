/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MangaUpdates.Client;
using MangaUpdates.Model;

namespace MangaUpdates.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// retrieve the public captcha key
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 Captcha(int operationIndex = 0);

        /// <summary>
        /// retrieve the public captcha key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> CaptchaWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// update a password change using an auth hash
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="userModelUpdatePasswordV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 ConfirmAndChangePassword(string authHash, UserModelUpdatePasswordV1 userModelUpdatePasswordV1, int operationIndex = 0);

        /// <summary>
        /// update a password change using an auth hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="userModelUpdatePasswordV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> ConfirmAndChangePasswordWithHttpInfo(string authHash, UserModelUpdatePasswordV1 userModelUpdatePasswordV1, int operationIndex = 0);
        /// <summary>
        /// confirm deletion of your account
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 ConfirmDeleteAccount(string authHash, int operationIndex = 0);

        /// <summary>
        /// confirm deletion of your account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> ConfirmDeleteAccountWithHttpInfo(string authHash, int operationIndex = 0);
        /// <summary>
        /// confirm a new member registration
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 ConfirmRegistration(string authHash, int operationIndex = 0);

        /// <summary>
        /// confirm a new member registration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> ConfirmRegistrationWithHttpInfo(string authHash, int operationIndex = 0);
        /// <summary>
        /// delete your account
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 DeleteAccount(string captchaResponse, int operationIndex = 0);

        /// <summary>
        /// delete your account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> DeleteAccountWithHttpInfo(string captchaResponse, int operationIndex = 0);
        /// <summary>
        /// send a forgotten password email
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="accountForgotPassModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 ForgotPassword(string captchaResponse, AccountForgotPassModelV1 accountForgotPassModelV1, int operationIndex = 0);

        /// <summary>
        /// send a forgotten password email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="accountForgotPassModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> ForgotPasswordWithHttpInfo(string captchaResponse, AccountForgotPassModelV1 accountForgotPassModelV1, int operationIndex = 0);
        /// <summary>
        /// create a session token
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountLoginModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 Login(AccountLoginModelV1 accountLoginModelV1, int operationIndex = 0);

        /// <summary>
        /// create a session token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountLoginModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> LoginWithHttpInfo(AccountLoginModelV1 accountLoginModelV1, int operationIndex = 0);
        /// <summary>
        /// remove a session token
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 Logout(int operationIndex = 0);

        /// <summary>
        /// remove a session token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> LogoutWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// get the profile for the current user
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserModelV1</returns>
        UserModelV1 Profile(int operationIndex = 0);

        /// <summary>
        /// get the profile for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserModelV1</returns>
        ApiResponse<UserModelV1> ProfileWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// register a new member
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="userModelRegisterV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 RegisterMember(string captchaResponse, UserModelRegisterV1 userModelRegisterV1, int operationIndex = 0);

        /// <summary>
        /// register a new member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="userModelRegisterV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> RegisterMemberWithHttpInfo(string captchaResponse, UserModelRegisterV1 userModelRegisterV1, int operationIndex = 0);
        /// <summary>
        /// send an auth email to a user
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 ResendAuthEmail(long id, int operationIndex = 0);

        /// <summary>
        /// send an auth email to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> ResendAuthEmailWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// send a forgotten password email to a user
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        ApiResponseV1 SendForgotEmail(long id, int operationIndex = 0);

        /// <summary>
        /// send a forgotten password email to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        ApiResponse<ApiResponseV1> SendForgotEmailWithHttpInfo(long id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// retrieve the public captcha key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> CaptchaAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// retrieve the public captcha key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> CaptchaWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update a password change using an auth hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="userModelUpdatePasswordV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> ConfirmAndChangePasswordAsync(string authHash, UserModelUpdatePasswordV1 userModelUpdatePasswordV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update a password change using an auth hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="userModelUpdatePasswordV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> ConfirmAndChangePasswordWithHttpInfoAsync(string authHash, UserModelUpdatePasswordV1 userModelUpdatePasswordV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// confirm deletion of your account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> ConfirmDeleteAccountAsync(string authHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// confirm deletion of your account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> ConfirmDeleteAccountWithHttpInfoAsync(string authHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// confirm a new member registration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> ConfirmRegistrationAsync(string authHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// confirm a new member registration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> ConfirmRegistrationWithHttpInfoAsync(string authHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete your account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> DeleteAccountAsync(string captchaResponse, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete your account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> DeleteAccountWithHttpInfoAsync(string captchaResponse, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// send a forgotten password email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="accountForgotPassModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> ForgotPasswordAsync(string captchaResponse, AccountForgotPassModelV1 accountForgotPassModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// send a forgotten password email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="accountForgotPassModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> ForgotPasswordWithHttpInfoAsync(string captchaResponse, AccountForgotPassModelV1 accountForgotPassModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// create a session token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountLoginModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> LoginAsync(AccountLoginModelV1 accountLoginModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// create a session token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountLoginModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> LoginWithHttpInfoAsync(AccountLoginModelV1 accountLoginModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// remove a session token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> LogoutAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// remove a session token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> LogoutWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get the profile for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserModelV1</returns>
        System.Threading.Tasks.Task<UserModelV1> ProfileAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get the profile for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserModelV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserModelV1>> ProfileWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// register a new member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="userModelRegisterV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> RegisterMemberAsync(string captchaResponse, UserModelRegisterV1 userModelRegisterV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// register a new member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="userModelRegisterV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> RegisterMemberWithHttpInfoAsync(string captchaResponse, UserModelRegisterV1 userModelRegisterV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// send an auth email to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> ResendAuthEmailAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// send an auth email to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> ResendAuthEmailWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// send a forgotten password email to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        System.Threading.Tasks.Task<ApiResponseV1> SendForgotEmailAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// send a forgotten password email to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseV1>> SendForgotEmailWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApi : IAccountApiSync, IAccountApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApi : IAccountApi
    {
        private MangaUpdates.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(string basePath)
        {
            this.Configuration = MangaUpdates.Client.Configuration.MergeConfigurations(
                MangaUpdates.Client.GlobalConfiguration.Instance,
                new MangaUpdates.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(MangaUpdates.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MangaUpdates.Client.Configuration.MergeConfigurations(
                MangaUpdates.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MangaUpdates.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountApi(MangaUpdates.Client.ISynchronousClient client, MangaUpdates.Client.IAsynchronousClient asyncClient, MangaUpdates.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MangaUpdates.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MangaUpdates.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MangaUpdates.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MangaUpdates.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MangaUpdates.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// retrieve the public captcha key 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 Captcha(int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = CaptchaWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// retrieve the public captcha key 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> CaptchaWithHttpInfo(int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.Captcha";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiResponseV1>("/account/captcha", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Captcha", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// retrieve the public captcha key 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> CaptchaAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await CaptchaWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// retrieve the public captcha key 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> CaptchaWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.Captcha";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiResponseV1>("/account/captcha", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Captcha", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update a password change using an auth hash 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="userModelUpdatePasswordV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 ConfirmAndChangePassword(string authHash, UserModelUpdatePasswordV1 userModelUpdatePasswordV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = ConfirmAndChangePasswordWithHttpInfo(authHash, userModelUpdatePasswordV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update a password change using an auth hash 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="userModelUpdatePasswordV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> ConfirmAndChangePasswordWithHttpInfo(string authHash, UserModelUpdatePasswordV1 userModelUpdatePasswordV1, int operationIndex = 0)
        {
            // verify the required parameter 'authHash' is set
            if (authHash == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'authHash' when calling AccountApi->ConfirmAndChangePassword");
            }

            // verify the required parameter 'userModelUpdatePasswordV1' is set
            if (userModelUpdatePasswordV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'userModelUpdatePasswordV1' when calling AccountApi->ConfirmAndChangePassword");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("auth_hash", MangaUpdates.Client.ClientUtils.ParameterToString(authHash)); // path parameter
            localVarRequestOptions.Data = userModelUpdatePasswordV1;

            localVarRequestOptions.Operation = "AccountApi.ConfirmAndChangePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/account/forgotpass/confirm/{auth_hash}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmAndChangePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update a password change using an auth hash 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="userModelUpdatePasswordV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> ConfirmAndChangePasswordAsync(string authHash, UserModelUpdatePasswordV1 userModelUpdatePasswordV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await ConfirmAndChangePasswordWithHttpInfoAsync(authHash, userModelUpdatePasswordV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update a password change using an auth hash 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="userModelUpdatePasswordV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> ConfirmAndChangePasswordWithHttpInfoAsync(string authHash, UserModelUpdatePasswordV1 userModelUpdatePasswordV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authHash' is set
            if (authHash == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'authHash' when calling AccountApi->ConfirmAndChangePassword");
            }

            // verify the required parameter 'userModelUpdatePasswordV1' is set
            if (userModelUpdatePasswordV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'userModelUpdatePasswordV1' when calling AccountApi->ConfirmAndChangePassword");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("auth_hash", MangaUpdates.Client.ClientUtils.ParameterToString(authHash)); // path parameter
            localVarRequestOptions.Data = userModelUpdatePasswordV1;

            localVarRequestOptions.Operation = "AccountApi.ConfirmAndChangePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/account/forgotpass/confirm/{auth_hash}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmAndChangePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// confirm deletion of your account 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 ConfirmDeleteAccount(string authHash, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = ConfirmDeleteAccountWithHttpInfo(authHash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// confirm deletion of your account 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> ConfirmDeleteAccountWithHttpInfo(string authHash, int operationIndex = 0)
        {
            // verify the required parameter 'authHash' is set
            if (authHash == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'authHash' when calling AccountApi->ConfirmDeleteAccount");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("auth_hash", MangaUpdates.Client.ClientUtils.ParameterToString(authHash)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.ConfirmDeleteAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/account/delete/confirm/{auth_hash}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmDeleteAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// confirm deletion of your account 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> ConfirmDeleteAccountAsync(string authHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await ConfirmDeleteAccountWithHttpInfoAsync(authHash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// confirm deletion of your account 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> ConfirmDeleteAccountWithHttpInfoAsync(string authHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authHash' is set
            if (authHash == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'authHash' when calling AccountApi->ConfirmDeleteAccount");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("auth_hash", MangaUpdates.Client.ClientUtils.ParameterToString(authHash)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.ConfirmDeleteAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/account/delete/confirm/{auth_hash}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmDeleteAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// confirm a new member registration 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 ConfirmRegistration(string authHash, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = ConfirmRegistrationWithHttpInfo(authHash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// confirm a new member registration 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> ConfirmRegistrationWithHttpInfo(string authHash, int operationIndex = 0)
        {
            // verify the required parameter 'authHash' is set
            if (authHash == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'authHash' when calling AccountApi->ConfirmRegistration");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("auth_hash", MangaUpdates.Client.ClientUtils.ParameterToString(authHash)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.ConfirmRegistration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/account/register/confirm/{auth_hash}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmRegistration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// confirm a new member registration 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> ConfirmRegistrationAsync(string authHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await ConfirmRegistrationWithHttpInfoAsync(authHash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// confirm a new member registration 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authHash">auth hash from email confirmation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> ConfirmRegistrationWithHttpInfoAsync(string authHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authHash' is set
            if (authHash == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'authHash' when calling AccountApi->ConfirmRegistration");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("auth_hash", MangaUpdates.Client.ClientUtils.ParameterToString(authHash)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.ConfirmRegistration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/account/register/confirm/{auth_hash}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmRegistration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete your account 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 DeleteAccount(string captchaResponse, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = DeleteAccountWithHttpInfo(captchaResponse);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete your account 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> DeleteAccountWithHttpInfo(string captchaResponse, int operationIndex = 0)
        {
            // verify the required parameter 'captchaResponse' is set
            if (captchaResponse == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'captchaResponse' when calling AccountApi->DeleteAccount");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captcha_response", MangaUpdates.Client.ClientUtils.ParameterToString(captchaResponse)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.DeleteAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/account/delete/{captcha_response}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete your account 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> DeleteAccountAsync(string captchaResponse, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await DeleteAccountWithHttpInfoAsync(captchaResponse, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// delete your account 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> DeleteAccountWithHttpInfoAsync(string captchaResponse, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'captchaResponse' is set
            if (captchaResponse == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'captchaResponse' when calling AccountApi->DeleteAccount");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captcha_response", MangaUpdates.Client.ClientUtils.ParameterToString(captchaResponse)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.DeleteAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/account/delete/{captcha_response}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// send a forgotten password email 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="accountForgotPassModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 ForgotPassword(string captchaResponse, AccountForgotPassModelV1 accountForgotPassModelV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = ForgotPasswordWithHttpInfo(captchaResponse, accountForgotPassModelV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// send a forgotten password email 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="accountForgotPassModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> ForgotPasswordWithHttpInfo(string captchaResponse, AccountForgotPassModelV1 accountForgotPassModelV1, int operationIndex = 0)
        {
            // verify the required parameter 'captchaResponse' is set
            if (captchaResponse == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'captchaResponse' when calling AccountApi->ForgotPassword");
            }

            // verify the required parameter 'accountForgotPassModelV1' is set
            if (accountForgotPassModelV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'accountForgotPassModelV1' when calling AccountApi->ForgotPassword");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captcha_response", MangaUpdates.Client.ClientUtils.ParameterToString(captchaResponse)); // path parameter
            localVarRequestOptions.Data = accountForgotPassModelV1;

            localVarRequestOptions.Operation = "AccountApi.ForgotPassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/account/forgotpass/{captcha_response}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForgotPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// send a forgotten password email 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="accountForgotPassModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> ForgotPasswordAsync(string captchaResponse, AccountForgotPassModelV1 accountForgotPassModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await ForgotPasswordWithHttpInfoAsync(captchaResponse, accountForgotPassModelV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// send a forgotten password email 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="accountForgotPassModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> ForgotPasswordWithHttpInfoAsync(string captchaResponse, AccountForgotPassModelV1 accountForgotPassModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'captchaResponse' is set
            if (captchaResponse == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'captchaResponse' when calling AccountApi->ForgotPassword");
            }

            // verify the required parameter 'accountForgotPassModelV1' is set
            if (accountForgotPassModelV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'accountForgotPassModelV1' when calling AccountApi->ForgotPassword");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captcha_response", MangaUpdates.Client.ClientUtils.ParameterToString(captchaResponse)); // path parameter
            localVarRequestOptions.Data = accountForgotPassModelV1;

            localVarRequestOptions.Operation = "AccountApi.ForgotPassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/account/forgotpass/{captcha_response}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForgotPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// create a session token 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountLoginModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 Login(AccountLoginModelV1 accountLoginModelV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = LoginWithHttpInfo(accountLoginModelV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create a session token 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountLoginModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> LoginWithHttpInfo(AccountLoginModelV1 accountLoginModelV1, int operationIndex = 0)
        {
            // verify the required parameter 'accountLoginModelV1' is set
            if (accountLoginModelV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'accountLoginModelV1' when calling AccountApi->Login");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = accountLoginModelV1;

            localVarRequestOptions.Operation = "AccountApi.Login";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponseV1>("/account/login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Login", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// create a session token 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountLoginModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> LoginAsync(AccountLoginModelV1 accountLoginModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await LoginWithHttpInfoAsync(accountLoginModelV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// create a session token 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountLoginModelV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> LoginWithHttpInfoAsync(AccountLoginModelV1 accountLoginModelV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountLoginModelV1' is set
            if (accountLoginModelV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'accountLoginModelV1' when calling AccountApi->Login");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = accountLoginModelV1;

            localVarRequestOptions.Operation = "AccountApi.Login";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponseV1>("/account/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Login", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// remove a session token 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 Logout(int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = LogoutWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// remove a session token 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> LogoutWithHttpInfo(int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.Logout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/account/logout", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// remove a session token 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> LogoutAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await LogoutWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// remove a session token 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> LogoutWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.Logout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/account/logout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the profile for the current user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserModelV1</returns>
        public UserModelV1 Profile(int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<UserModelV1> localVarResponse = ProfileWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the profile for the current user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserModelV1</returns>
        public MangaUpdates.Client.ApiResponse<UserModelV1> ProfileWithHttpInfo(int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.Profile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserModelV1>("/account/profile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Profile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the profile for the current user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserModelV1</returns>
        public async System.Threading.Tasks.Task<UserModelV1> ProfileAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<UserModelV1> localVarResponse = await ProfileWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the profile for the current user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserModelV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<UserModelV1>> ProfileWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountApi.Profile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserModelV1>("/account/profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Profile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// register a new member 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="userModelRegisterV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 RegisterMember(string captchaResponse, UserModelRegisterV1 userModelRegisterV1, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = RegisterMemberWithHttpInfo(captchaResponse, userModelRegisterV1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// register a new member 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="userModelRegisterV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> RegisterMemberWithHttpInfo(string captchaResponse, UserModelRegisterV1 userModelRegisterV1, int operationIndex = 0)
        {
            // verify the required parameter 'captchaResponse' is set
            if (captchaResponse == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'captchaResponse' when calling AccountApi->RegisterMember");
            }

            // verify the required parameter 'userModelRegisterV1' is set
            if (userModelRegisterV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'userModelRegisterV1' when calling AccountApi->RegisterMember");
            }

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captcha_response", MangaUpdates.Client.ClientUtils.ParameterToString(captchaResponse)); // path parameter
            localVarRequestOptions.Data = userModelRegisterV1;

            localVarRequestOptions.Operation = "AccountApi.RegisterMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/account/register/{captcha_response}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// register a new member 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="userModelRegisterV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> RegisterMemberAsync(string captchaResponse, UserModelRegisterV1 userModelRegisterV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await RegisterMemberWithHttpInfoAsync(captchaResponse, userModelRegisterV1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// register a new member 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaResponse">response of captcha</param>
        /// <param name="userModelRegisterV1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> RegisterMemberWithHttpInfoAsync(string captchaResponse, UserModelRegisterV1 userModelRegisterV1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'captchaResponse' is set
            if (captchaResponse == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'captchaResponse' when calling AccountApi->RegisterMember");
            }

            // verify the required parameter 'userModelRegisterV1' is set
            if (userModelRegisterV1 == null)
            {
                throw new MangaUpdates.Client.ApiException(400, "Missing required parameter 'userModelRegisterV1' when calling AccountApi->RegisterMember");
            }


            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("captcha_response", MangaUpdates.Client.ClientUtils.ParameterToString(captchaResponse)); // path parameter
            localVarRequestOptions.Data = userModelRegisterV1;

            localVarRequestOptions.Operation = "AccountApi.RegisterMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/account/register/{captcha_response}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// send an auth email to a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 ResendAuthEmail(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = ResendAuthEmailWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// send an auth email to a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> ResendAuthEmailWithHttpInfo(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.ResendAuthEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/account/resendauth/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResendAuthEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// send an auth email to a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> ResendAuthEmailAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await ResendAuthEmailWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// send an auth email to a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> ResendAuthEmailWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.ResendAuthEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/account/resendauth/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResendAuthEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// send a forgotten password email to a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponseV1</returns>
        public ApiResponseV1 SendForgotEmail(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = SendForgotEmailWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// send a forgotten password email to a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiResponseV1</returns>
        public MangaUpdates.Client.ApiResponse<ApiResponseV1> SendForgotEmailWithHttpInfo(long id, int operationIndex = 0)
        {
            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.SendForgotEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponseV1>("/account/sendforgot/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendForgotEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// send a forgotten password email to a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponseV1</returns>
        public async System.Threading.Tasks.Task<ApiResponseV1> SendForgotEmailAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MangaUpdates.Client.ApiResponse<ApiResponseV1> localVarResponse = await SendForgotEmailWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// send a forgotten password email to a user 
        /// </summary>
        /// <exception cref="MangaUpdates.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Member id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponseV1)</returns>
        public async System.Threading.Tasks.Task<MangaUpdates.Client.ApiResponse<ApiResponseV1>> SendForgotEmailWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MangaUpdates.Client.RequestOptions localVarRequestOptions = new MangaUpdates.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MangaUpdates.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MangaUpdates.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", MangaUpdates.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AccountApi.SendForgotEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponseV1>("/account/sendforgot/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendForgotEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

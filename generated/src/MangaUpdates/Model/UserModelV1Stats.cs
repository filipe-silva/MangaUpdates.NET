/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// UserModelV1Stats
    /// </summary>
    [DataContract(Name = "UserModelV1Stats")]
    public partial class UserModelV1Stats : IEquatable<UserModelV1Stats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserModelV1Stats" /> class.
        /// </summary>
        /// <param name="forumPosts">forumPosts.</param>
        /// <param name="addedAuthors">addedAuthors.</param>
        /// <param name="addedGroups">addedGroups.</param>
        /// <param name="addedPublishers">addedPublishers.</param>
        /// <param name="addedReleases">addedReleases.</param>
        /// <param name="addedSeries">addedSeries.</param>
        /// <param name="seriesEdits">seriesEdits.</param>
        /// <param name="authorEdits">authorEdits.</param>
        /// <param name="publisherEdits">publisherEdits.</param>
        /// <param name="addedTags">addedTags.</param>
        /// <param name="moderation">moderation.</param>
        public UserModelV1Stats(long forumPosts = default(long), long addedAuthors = default(long), long addedGroups = default(long), long addedPublishers = default(long), long addedReleases = default(long), long addedSeries = default(long), long seriesEdits = default(long), long authorEdits = default(long), long publisherEdits = default(long), long addedTags = default(long), UserModelV1StatsModeration moderation = default(UserModelV1StatsModeration))
        {
            this.ForumPosts = forumPosts;
            this.AddedAuthors = addedAuthors;
            this.AddedGroups = addedGroups;
            this.AddedPublishers = addedPublishers;
            this.AddedReleases = addedReleases;
            this.AddedSeries = addedSeries;
            this.SeriesEdits = seriesEdits;
            this.AuthorEdits = authorEdits;
            this.PublisherEdits = publisherEdits;
            this.AddedTags = addedTags;
            this.Moderation = moderation;
        }

        /// <summary>
        /// Gets or Sets ForumPosts
        /// </summary>
        [DataMember(Name = "forum_posts", EmitDefaultValue = false)]
        public long ForumPosts { get; set; }

        /// <summary>
        /// Gets or Sets AddedAuthors
        /// </summary>
        [DataMember(Name = "added_authors", EmitDefaultValue = false)]
        public long AddedAuthors { get; set; }

        /// <summary>
        /// Gets or Sets AddedGroups
        /// </summary>
        [DataMember(Name = "added_groups", EmitDefaultValue = false)]
        public long AddedGroups { get; set; }

        /// <summary>
        /// Gets or Sets AddedPublishers
        /// </summary>
        [DataMember(Name = "added_publishers", EmitDefaultValue = false)]
        public long AddedPublishers { get; set; }

        /// <summary>
        /// Gets or Sets AddedReleases
        /// </summary>
        [DataMember(Name = "added_releases", EmitDefaultValue = false)]
        public long AddedReleases { get; set; }

        /// <summary>
        /// Gets or Sets AddedSeries
        /// </summary>
        [DataMember(Name = "added_series", EmitDefaultValue = false)]
        public long AddedSeries { get; set; }

        /// <summary>
        /// Gets or Sets SeriesEdits
        /// </summary>
        [DataMember(Name = "series_edits", EmitDefaultValue = false)]
        public long SeriesEdits { get; set; }

        /// <summary>
        /// Gets or Sets AuthorEdits
        /// </summary>
        [DataMember(Name = "author_edits", EmitDefaultValue = false)]
        public long AuthorEdits { get; set; }

        /// <summary>
        /// Gets or Sets PublisherEdits
        /// </summary>
        [DataMember(Name = "publisher_edits", EmitDefaultValue = false)]
        public long PublisherEdits { get; set; }

        /// <summary>
        /// Gets or Sets AddedTags
        /// </summary>
        [DataMember(Name = "added_tags", EmitDefaultValue = false)]
        public long AddedTags { get; set; }

        /// <summary>
        /// Gets or Sets Moderation
        /// </summary>
        [DataMember(Name = "moderation", EmitDefaultValue = false)]
        public UserModelV1StatsModeration Moderation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserModelV1Stats {\n");
            sb.Append("  ForumPosts: ").Append(ForumPosts).Append("\n");
            sb.Append("  AddedAuthors: ").Append(AddedAuthors).Append("\n");
            sb.Append("  AddedGroups: ").Append(AddedGroups).Append("\n");
            sb.Append("  AddedPublishers: ").Append(AddedPublishers).Append("\n");
            sb.Append("  AddedReleases: ").Append(AddedReleases).Append("\n");
            sb.Append("  AddedSeries: ").Append(AddedSeries).Append("\n");
            sb.Append("  SeriesEdits: ").Append(SeriesEdits).Append("\n");
            sb.Append("  AuthorEdits: ").Append(AuthorEdits).Append("\n");
            sb.Append("  PublisherEdits: ").Append(PublisherEdits).Append("\n");
            sb.Append("  AddedTags: ").Append(AddedTags).Append("\n");
            sb.Append("  Moderation: ").Append(Moderation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserModelV1Stats);
        }

        /// <summary>
        /// Returns true if UserModelV1Stats instances are equal
        /// </summary>
        /// <param name="input">Instance of UserModelV1Stats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserModelV1Stats input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ForumPosts == input.ForumPosts ||
                    this.ForumPosts.Equals(input.ForumPosts)
                ) && 
                (
                    this.AddedAuthors == input.AddedAuthors ||
                    this.AddedAuthors.Equals(input.AddedAuthors)
                ) && 
                (
                    this.AddedGroups == input.AddedGroups ||
                    this.AddedGroups.Equals(input.AddedGroups)
                ) && 
                (
                    this.AddedPublishers == input.AddedPublishers ||
                    this.AddedPublishers.Equals(input.AddedPublishers)
                ) && 
                (
                    this.AddedReleases == input.AddedReleases ||
                    this.AddedReleases.Equals(input.AddedReleases)
                ) && 
                (
                    this.AddedSeries == input.AddedSeries ||
                    this.AddedSeries.Equals(input.AddedSeries)
                ) && 
                (
                    this.SeriesEdits == input.SeriesEdits ||
                    this.SeriesEdits.Equals(input.SeriesEdits)
                ) && 
                (
                    this.AuthorEdits == input.AuthorEdits ||
                    this.AuthorEdits.Equals(input.AuthorEdits)
                ) && 
                (
                    this.PublisherEdits == input.PublisherEdits ||
                    this.PublisherEdits.Equals(input.PublisherEdits)
                ) && 
                (
                    this.AddedTags == input.AddedTags ||
                    this.AddedTags.Equals(input.AddedTags)
                ) && 
                (
                    this.Moderation == input.Moderation ||
                    (this.Moderation != null &&
                    this.Moderation.Equals(input.Moderation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ForumPosts.GetHashCode();
                hashCode = (hashCode * 59) + this.AddedAuthors.GetHashCode();
                hashCode = (hashCode * 59) + this.AddedGroups.GetHashCode();
                hashCode = (hashCode * 59) + this.AddedPublishers.GetHashCode();
                hashCode = (hashCode * 59) + this.AddedReleases.GetHashCode();
                hashCode = (hashCode * 59) + this.AddedSeries.GetHashCode();
                hashCode = (hashCode * 59) + this.SeriesEdits.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthorEdits.GetHashCode();
                hashCode = (hashCode * 59) + this.PublisherEdits.GetHashCode();
                hashCode = (hashCode * 59) + this.AddedTags.GetHashCode();
                if (this.Moderation != null)
                {
                    hashCode = (hashCode * 59) + this.Moderation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

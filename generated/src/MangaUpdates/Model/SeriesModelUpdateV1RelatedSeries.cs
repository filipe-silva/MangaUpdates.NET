/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// SeriesModelUpdateV1RelatedSeries
    /// </summary>
    [DataContract(Name = "SeriesModelUpdateV1RelatedSeries")]
    public partial class SeriesModelUpdateV1RelatedSeries : IEquatable<SeriesModelUpdateV1RelatedSeries>, IValidatableObject
    {
        /// <summary>
        /// Defines RelationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RelationTypeEnum
        {
            /// <summary>
            /// Enum Prequel for value: Prequel
            /// </summary>
            [EnumMember(Value = "Prequel")]
            Prequel = 1,

            /// <summary>
            /// Enum Sequel for value: Sequel
            /// </summary>
            [EnumMember(Value = "Sequel")]
            Sequel = 2,

            /// <summary>
            /// Enum SideStory for value: Side Story
            /// </summary>
            [EnumMember(Value = "Side Story")]
            SideStory = 3,

            /// <summary>
            /// Enum SpinOff for value: Spin-Off
            /// </summary>
            [EnumMember(Value = "Spin-Off")]
            SpinOff = 4,

            /// <summary>
            /// Enum AdaptedFrom for value: Adapted From
            /// </summary>
            [EnumMember(Value = "Adapted From")]
            AdaptedFrom = 5,

            /// <summary>
            /// Enum AlternateStory for value: Alternate Story
            /// </summary>
            [EnumMember(Value = "Alternate Story")]
            AlternateStory = 6,

            /// <summary>
            /// Enum MainStory for value: Main Story
            /// </summary>
            [EnumMember(Value = "Main Story")]
            MainStory = 7

        }


        /// <summary>
        /// Gets or Sets RelationType
        /// </summary>
        [DataMember(Name = "relation_type", IsRequired = true, EmitDefaultValue = true)]
        public RelationTypeEnum RelationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SeriesModelUpdateV1RelatedSeries" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SeriesModelUpdateV1RelatedSeries() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SeriesModelUpdateV1RelatedSeries" /> class.
        /// </summary>
        /// <param name="relationType">relationType (required).</param>
        /// <param name="relatedSeriesId">relatedSeriesId (required).</param>
        public SeriesModelUpdateV1RelatedSeries(RelationTypeEnum relationType = default(RelationTypeEnum), long relatedSeriesId = default(long))
        {
            this.RelationType = relationType;
            this.RelatedSeriesId = relatedSeriesId;
        }

        /// <summary>
        /// Gets or Sets RelatedSeriesId
        /// </summary>
        [DataMember(Name = "related_series_id", IsRequired = true, EmitDefaultValue = true)]
        public long RelatedSeriesId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SeriesModelUpdateV1RelatedSeries {\n");
            sb.Append("  RelationType: ").Append(RelationType).Append("\n");
            sb.Append("  RelatedSeriesId: ").Append(RelatedSeriesId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeriesModelUpdateV1RelatedSeries);
        }

        /// <summary>
        /// Returns true if SeriesModelUpdateV1RelatedSeries instances are equal
        /// </summary>
        /// <param name="input">Instance of SeriesModelUpdateV1RelatedSeries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeriesModelUpdateV1RelatedSeries input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RelationType == input.RelationType ||
                    this.RelationType.Equals(input.RelationType)
                ) && 
                (
                    this.RelatedSeriesId == input.RelatedSeriesId ||
                    this.RelatedSeriesId.Equals(input.RelatedSeriesId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.RelationType.GetHashCode();
                hashCode = (hashCode * 59) + this.RelatedSeriesId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

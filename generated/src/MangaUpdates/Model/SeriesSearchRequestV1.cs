/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// SeriesSearchRequestV1
    /// </summary>
    [DataContract(Name = "SeriesSearchRequestV1")]
    public partial class SeriesSearchRequestV1 : IEquatable<SeriesSearchRequestV1>, IValidatableObject
    {
        /// <summary>
        /// Defines Stype
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StypeEnum
        {
            /// <summary>
            /// Enum Title for value: title
            /// </summary>
            [EnumMember(Value = "title")]
            Title = 1,

            /// <summary>
            /// Enum Description for value: description
            /// </summary>
            [EnumMember(Value = "description")]
            Description = 2

        }


        /// <summary>
        /// Gets or Sets Stype
        /// </summary>
        [DataMember(Name = "stype", EmitDefaultValue = false)]
        public StypeEnum? Stype { get; set; }
        /// <summary>
        /// Defines Licensed
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LicensedEnum
        {
            /// <summary>
            /// Enum Yes for value: yes
            /// </summary>
            [EnumMember(Value = "yes")]
            Yes = 1,

            /// <summary>
            /// Enum No for value: no
            /// </summary>
            [EnumMember(Value = "no")]
            No = 2

        }


        /// <summary>
        /// Gets or Sets Licensed
        /// </summary>
        [DataMember(Name = "licensed", EmitDefaultValue = false)]
        public LicensedEnum? Licensed { get; set; }
        /// <summary>
        /// Defines Filter
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FilterEnum
        {
            /// <summary>
            /// Enum Scanlated for value: scanlated
            /// </summary>
            [EnumMember(Value = "scanlated")]
            Scanlated = 1,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 2,

            /// <summary>
            /// Enum Oneshots for value: oneshots
            /// </summary>
            [EnumMember(Value = "oneshots")]
            Oneshots = 3,

            /// <summary>
            /// Enum NoOneshots for value: no_oneshots
            /// </summary>
            [EnumMember(Value = "no_oneshots")]
            NoOneshots = 4,

            /// <summary>
            /// Enum SomeReleases for value: some_releases
            /// </summary>
            [EnumMember(Value = "some_releases")]
            SomeReleases = 5,

            /// <summary>
            /// Enum NoReleases for value: no_releases
            /// </summary>
            [EnumMember(Value = "no_releases")]
            NoReleases = 6

        }


        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", EmitDefaultValue = false)]
        public FilterEnum? Filter { get; set; }
        /// <summary>
        /// Defines Orderby
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderbyEnum
        {
            /// <summary>
            /// Enum Score for value: score
            /// </summary>
            [EnumMember(Value = "score")]
            Score = 1,

            /// <summary>
            /// Enum Title for value: title
            /// </summary>
            [EnumMember(Value = "title")]
            Title = 2,

            /// <summary>
            /// Enum Rank for value: rank
            /// </summary>
            [EnumMember(Value = "rank")]
            Rank = 3,

            /// <summary>
            /// Enum Rating for value: rating
            /// </summary>
            [EnumMember(Value = "rating")]
            Rating = 4,

            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 5,

            /// <summary>
            /// Enum DateAdded for value: date_added
            /// </summary>
            [EnumMember(Value = "date_added")]
            DateAdded = 6,

            /// <summary>
            /// Enum WeekPos for value: week_pos
            /// </summary>
            [EnumMember(Value = "week_pos")]
            WeekPos = 7,

            /// <summary>
            /// Enum Month1Pos for value: month1_pos
            /// </summary>
            [EnumMember(Value = "month1_pos")]
            Month1Pos = 8,

            /// <summary>
            /// Enum Month3Pos for value: month3_pos
            /// </summary>
            [EnumMember(Value = "month3_pos")]
            Month3Pos = 9,

            /// <summary>
            /// Enum Month6Pos for value: month6_pos
            /// </summary>
            [EnumMember(Value = "month6_pos")]
            Month6Pos = 10,

            /// <summary>
            /// Enum YearPos for value: year_pos
            /// </summary>
            [EnumMember(Value = "year_pos")]
            YearPos = 11,

            /// <summary>
            /// Enum ListReading for value: list_reading
            /// </summary>
            [EnumMember(Value = "list_reading")]
            ListReading = 12,

            /// <summary>
            /// Enum ListWish for value: list_wish
            /// </summary>
            [EnumMember(Value = "list_wish")]
            ListWish = 13,

            /// <summary>
            /// Enum ListComplete for value: list_complete
            /// </summary>
            [EnumMember(Value = "list_complete")]
            ListComplete = 14,

            /// <summary>
            /// Enum ListUnfinished for value: list_unfinished
            /// </summary>
            [EnumMember(Value = "list_unfinished")]
            ListUnfinished = 15

        }


        /// <summary>
        /// Gets or Sets Orderby
        /// </summary>
        [DataMember(Name = "orderby", EmitDefaultValue = false)]
        public OrderbyEnum? Orderby { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SeriesSearchRequestV1" /> class.
        /// </summary>
        /// <param name="search">search.</param>
        /// <param name="addedBy">addedBy.</param>
        /// <param name="stype">stype.</param>
        /// <param name="licensed">licensed.</param>
        /// <param name="type">type.</param>
        /// <param name="year">year.</param>
        /// <param name="filterTypes">filterTypes.</param>
        /// <param name="category">category.</param>
        /// <param name="filter">filter.</param>
        /// <param name="list">list.</param>
        /// <param name="page">page.</param>
        /// <param name="perpage">perpage.</param>
        /// <param name="letter">letter.</param>
        /// <param name="genre">genre.</param>
        /// <param name="excludeGenre">excludeGenre.</param>
        /// <param name="orderby">orderby.</param>
        /// <param name="pending">pending.</param>
        /// <param name="includeRankMetadata">includeRankMetadata.</param>
        /// <param name="excludeFilteredGenres">excludeFilteredGenres.</param>
        public SeriesSearchRequestV1(string search = default(string), long addedBy = default(long), StypeEnum? stype = default(StypeEnum?), LicensedEnum? licensed = default(LicensedEnum?), List<string> type = default(List<string>), string year = default(string), List<string> filterTypes = default(List<string>), List<string> category = default(List<string>), FilterEnum? filter = default(FilterEnum?), string list = default(string), long page = default(long), long perpage = default(long), string letter = default(string), List<string> genre = default(List<string>), List<string> excludeGenre = default(List<string>), OrderbyEnum? orderby = default(OrderbyEnum?), bool pending = default(bool), bool includeRankMetadata = default(bool), bool excludeFilteredGenres = default(bool))
        {
            this.Search = search;
            this.AddedBy = addedBy;
            this.Stype = stype;
            this.Licensed = licensed;
            this.Type = type;
            this.Year = year;
            this.FilterTypes = filterTypes;
            this.Category = category;
            this.Filter = filter;
            this.List = list;
            this.Page = page;
            this.Perpage = perpage;
            this.Letter = letter;
            this.Genre = genre;
            this.ExcludeGenre = excludeGenre;
            this.Orderby = orderby;
            this.Pending = pending;
            this.IncludeRankMetadata = includeRankMetadata;
            this.ExcludeFilteredGenres = excludeFilteredGenres;
        }

        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [DataMember(Name = "search", EmitDefaultValue = false)]
        public string Search { get; set; }

        /// <summary>
        /// Gets or Sets AddedBy
        /// </summary>
        [DataMember(Name = "added_by", EmitDefaultValue = false)]
        public long AddedBy { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public List<string> Type { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public string Year { get; set; }

        /// <summary>
        /// Gets or Sets FilterTypes
        /// </summary>
        [DataMember(Name = "filter_types", EmitDefaultValue = false)]
        public List<string> FilterTypes { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public List<string> Category { get; set; }

        /// <summary>
        /// Gets or Sets List
        /// </summary>
        [DataMember(Name = "list", EmitDefaultValue = false)]
        public string List { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public long Page { get; set; }

        /// <summary>
        /// Gets or Sets Perpage
        /// </summary>
        [DataMember(Name = "perpage", EmitDefaultValue = false)]
        public long Perpage { get; set; }

        /// <summary>
        /// Gets or Sets Letter
        /// </summary>
        [DataMember(Name = "letter", EmitDefaultValue = false)]
        public string Letter { get; set; }

        /// <summary>
        /// Gets or Sets Genre
        /// </summary>
        [DataMember(Name = "genre", EmitDefaultValue = false)]
        public List<string> Genre { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeGenre
        /// </summary>
        [DataMember(Name = "exclude_genre", EmitDefaultValue = false)]
        public List<string> ExcludeGenre { get; set; }

        /// <summary>
        /// Gets or Sets Pending
        /// </summary>
        [DataMember(Name = "pending", EmitDefaultValue = true)]
        public bool Pending { get; set; }

        /// <summary>
        /// Gets or Sets IncludeRankMetadata
        /// </summary>
        [DataMember(Name = "include_rank_metadata", EmitDefaultValue = true)]
        public bool IncludeRankMetadata { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeFilteredGenres
        /// </summary>
        [DataMember(Name = "exclude_filtered_genres", EmitDefaultValue = true)]
        public bool ExcludeFilteredGenres { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SeriesSearchRequestV1 {\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  AddedBy: ").Append(AddedBy).Append("\n");
            sb.Append("  Stype: ").Append(Stype).Append("\n");
            sb.Append("  Licensed: ").Append(Licensed).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  FilterTypes: ").Append(FilterTypes).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Perpage: ").Append(Perpage).Append("\n");
            sb.Append("  Letter: ").Append(Letter).Append("\n");
            sb.Append("  Genre: ").Append(Genre).Append("\n");
            sb.Append("  ExcludeGenre: ").Append(ExcludeGenre).Append("\n");
            sb.Append("  Orderby: ").Append(Orderby).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("  IncludeRankMetadata: ").Append(IncludeRankMetadata).Append("\n");
            sb.Append("  ExcludeFilteredGenres: ").Append(ExcludeFilteredGenres).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeriesSearchRequestV1);
        }

        /// <summary>
        /// Returns true if SeriesSearchRequestV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of SeriesSearchRequestV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeriesSearchRequestV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Search == input.Search ||
                    (this.Search != null &&
                    this.Search.Equals(input.Search))
                ) && 
                (
                    this.AddedBy == input.AddedBy ||
                    this.AddedBy.Equals(input.AddedBy)
                ) && 
                (
                    this.Stype == input.Stype ||
                    this.Stype.Equals(input.Stype)
                ) && 
                (
                    this.Licensed == input.Licensed ||
                    this.Licensed.Equals(input.Licensed)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type != null &&
                    input.Type != null &&
                    this.Type.SequenceEqual(input.Type)
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.FilterTypes == input.FilterTypes ||
                    this.FilterTypes != null &&
                    input.FilterTypes != null &&
                    this.FilterTypes.SequenceEqual(input.FilterTypes)
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category != null &&
                    input.Category != null &&
                    this.Category.SequenceEqual(input.Category)
                ) && 
                (
                    this.Filter == input.Filter ||
                    this.Filter.Equals(input.Filter)
                ) && 
                (
                    this.List == input.List ||
                    (this.List != null &&
                    this.List.Equals(input.List))
                ) && 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.Perpage == input.Perpage ||
                    this.Perpage.Equals(input.Perpage)
                ) && 
                (
                    this.Letter == input.Letter ||
                    (this.Letter != null &&
                    this.Letter.Equals(input.Letter))
                ) && 
                (
                    this.Genre == input.Genre ||
                    this.Genre != null &&
                    input.Genre != null &&
                    this.Genre.SequenceEqual(input.Genre)
                ) && 
                (
                    this.ExcludeGenre == input.ExcludeGenre ||
                    this.ExcludeGenre != null &&
                    input.ExcludeGenre != null &&
                    this.ExcludeGenre.SequenceEqual(input.ExcludeGenre)
                ) && 
                (
                    this.Orderby == input.Orderby ||
                    this.Orderby.Equals(input.Orderby)
                ) && 
                (
                    this.Pending == input.Pending ||
                    this.Pending.Equals(input.Pending)
                ) && 
                (
                    this.IncludeRankMetadata == input.IncludeRankMetadata ||
                    this.IncludeRankMetadata.Equals(input.IncludeRankMetadata)
                ) && 
                (
                    this.ExcludeFilteredGenres == input.ExcludeFilteredGenres ||
                    this.ExcludeFilteredGenres.Equals(input.ExcludeFilteredGenres)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Search != null)
                {
                    hashCode = (hashCode * 59) + this.Search.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddedBy.GetHashCode();
                hashCode = (hashCode * 59) + this.Stype.GetHashCode();
                hashCode = (hashCode * 59) + this.Licensed.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Year != null)
                {
                    hashCode = (hashCode * 59) + this.Year.GetHashCode();
                }
                if (this.FilterTypes != null)
                {
                    hashCode = (hashCode * 59) + this.FilterTypes.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                if (this.List != null)
                {
                    hashCode = (hashCode * 59) + this.List.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                hashCode = (hashCode * 59) + this.Perpage.GetHashCode();
                if (this.Letter != null)
                {
                    hashCode = (hashCode * 59) + this.Letter.GetHashCode();
                }
                if (this.Genre != null)
                {
                    hashCode = (hashCode * 59) + this.Genre.GetHashCode();
                }
                if (this.ExcludeGenre != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludeGenre.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Orderby.GetHashCode();
                hashCode = (hashCode * 59) + this.Pending.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeRankMetadata.GetHashCode();
                hashCode = (hashCode * 59) + this.ExcludeFilteredGenres.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

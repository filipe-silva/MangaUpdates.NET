/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// UserModelV1Admin
    /// </summary>
    [DataContract(Name = "UserModelV1Admin")]
    public partial class UserModelV1Admin : IEquatable<UserModelV1Admin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserModelV1Admin" /> class.
        /// </summary>
        /// <param name="isAdmin">isAdmin.</param>
        /// <param name="registrationIp">registrationIp.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="lastSeriesUpdate">lastSeriesUpdate.</param>
        /// <param name="approved">approved.</param>
        /// <param name="emailApproved">emailApproved.</param>
        /// <param name="forumAdmin">forumAdmin.</param>
        /// <param name="registrationReason">registrationReason.</param>
        /// <param name="upgrade">upgrade.</param>
        /// <param name="banned">banned.</param>
        public UserModelV1Admin(bool isAdmin = default(bool), string registrationIp = default(string), UserModelV1AdminPermissions permissions = default(UserModelV1AdminPermissions), TimeV1 lastSeriesUpdate = default(TimeV1), bool approved = default(bool), bool emailApproved = default(bool), bool forumAdmin = default(bool), string registrationReason = default(string), UserModelV1AdminUpgrade upgrade = default(UserModelV1AdminUpgrade), bool banned = default(bool))
        {
            this.IsAdmin = isAdmin;
            this.RegistrationIp = registrationIp;
            this.Permissions = permissions;
            this.LastSeriesUpdate = lastSeriesUpdate;
            this.Approved = approved;
            this.EmailApproved = emailApproved;
            this.ForumAdmin = forumAdmin;
            this.RegistrationReason = registrationReason;
            this.Upgrade = upgrade;
            this.Banned = banned;
        }

        /// <summary>
        /// Gets or Sets IsAdmin
        /// </summary>
        [DataMember(Name = "is_admin", EmitDefaultValue = true)]
        public bool IsAdmin { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationIp
        /// </summary>
        [DataMember(Name = "registration_ip", EmitDefaultValue = false)]
        public string RegistrationIp { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name = "permissions", EmitDefaultValue = false)]
        public UserModelV1AdminPermissions Permissions { get; set; }

        /// <summary>
        /// Gets or Sets LastSeriesUpdate
        /// </summary>
        [DataMember(Name = "last_series_update", EmitDefaultValue = false)]
        public TimeV1 LastSeriesUpdate { get; set; }

        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [DataMember(Name = "approved", EmitDefaultValue = true)]
        public bool Approved { get; set; }

        /// <summary>
        /// Gets or Sets EmailApproved
        /// </summary>
        [DataMember(Name = "email_approved", EmitDefaultValue = true)]
        public bool EmailApproved { get; set; }

        /// <summary>
        /// Gets or Sets ForumAdmin
        /// </summary>
        [DataMember(Name = "forum_admin", EmitDefaultValue = true)]
        public bool ForumAdmin { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationReason
        /// </summary>
        [DataMember(Name = "registration_reason", EmitDefaultValue = false)]
        public string RegistrationReason { get; set; }

        /// <summary>
        /// Gets or Sets Upgrade
        /// </summary>
        [DataMember(Name = "upgrade", EmitDefaultValue = false)]
        public UserModelV1AdminUpgrade Upgrade { get; set; }

        /// <summary>
        /// Gets or Sets Banned
        /// </summary>
        [DataMember(Name = "banned", EmitDefaultValue = true)]
        public bool Banned { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserModelV1Admin {\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  RegistrationIp: ").Append(RegistrationIp).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  LastSeriesUpdate: ").Append(LastSeriesUpdate).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  EmailApproved: ").Append(EmailApproved).Append("\n");
            sb.Append("  ForumAdmin: ").Append(ForumAdmin).Append("\n");
            sb.Append("  RegistrationReason: ").Append(RegistrationReason).Append("\n");
            sb.Append("  Upgrade: ").Append(Upgrade).Append("\n");
            sb.Append("  Banned: ").Append(Banned).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserModelV1Admin);
        }

        /// <summary>
        /// Returns true if UserModelV1Admin instances are equal
        /// </summary>
        /// <param name="input">Instance of UserModelV1Admin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserModelV1Admin input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsAdmin == input.IsAdmin ||
                    this.IsAdmin.Equals(input.IsAdmin)
                ) && 
                (
                    this.RegistrationIp == input.RegistrationIp ||
                    (this.RegistrationIp != null &&
                    this.RegistrationIp.Equals(input.RegistrationIp))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                ) && 
                (
                    this.LastSeriesUpdate == input.LastSeriesUpdate ||
                    (this.LastSeriesUpdate != null &&
                    this.LastSeriesUpdate.Equals(input.LastSeriesUpdate))
                ) && 
                (
                    this.Approved == input.Approved ||
                    this.Approved.Equals(input.Approved)
                ) && 
                (
                    this.EmailApproved == input.EmailApproved ||
                    this.EmailApproved.Equals(input.EmailApproved)
                ) && 
                (
                    this.ForumAdmin == input.ForumAdmin ||
                    this.ForumAdmin.Equals(input.ForumAdmin)
                ) && 
                (
                    this.RegistrationReason == input.RegistrationReason ||
                    (this.RegistrationReason != null &&
                    this.RegistrationReason.Equals(input.RegistrationReason))
                ) && 
                (
                    this.Upgrade == input.Upgrade ||
                    (this.Upgrade != null &&
                    this.Upgrade.Equals(input.Upgrade))
                ) && 
                (
                    this.Banned == input.Banned ||
                    this.Banned.Equals(input.Banned)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsAdmin.GetHashCode();
                if (this.RegistrationIp != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationIp.GetHashCode();
                }
                if (this.Permissions != null)
                {
                    hashCode = (hashCode * 59) + this.Permissions.GetHashCode();
                }
                if (this.LastSeriesUpdate != null)
                {
                    hashCode = (hashCode * 59) + this.LastSeriesUpdate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Approved.GetHashCode();
                hashCode = (hashCode * 59) + this.EmailApproved.GetHashCode();
                hashCode = (hashCode * 59) + this.ForumAdmin.GetHashCode();
                if (this.RegistrationReason != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationReason.GetHashCode();
                }
                if (this.Upgrade != null)
                {
                    hashCode = (hashCode * 59) + this.Upgrade.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Banned.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

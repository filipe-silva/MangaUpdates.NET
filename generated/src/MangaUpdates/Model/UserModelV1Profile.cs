/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// UserModelV1Profile
    /// </summary>
    [DataContract(Name = "UserModelV1Profile")]
    public partial class UserModelV1Profile : IEquatable<UserModelV1Profile>, IValidatableObject
    {
        /// <summary>
        /// Defines FilterTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FilterTypesEnum
        {
            /// <summary>
            /// Enum Artbook for value: Artbook
            /// </summary>
            [EnumMember(Value = "Artbook")]
            Artbook = 1,

            /// <summary>
            /// Enum Doujinshi for value: Doujinshi
            /// </summary>
            [EnumMember(Value = "Doujinshi")]
            Doujinshi = 2,

            /// <summary>
            /// Enum DramaCD for value: Drama CD
            /// </summary>
            [EnumMember(Value = "Drama CD")]
            DramaCD = 3,

            /// <summary>
            /// Enum Filipino for value: Filipino
            /// </summary>
            [EnumMember(Value = "Filipino")]
            Filipino = 4,

            /// <summary>
            /// Enum Indonesian for value: Indonesian
            /// </summary>
            [EnumMember(Value = "Indonesian")]
            Indonesian = 5,

            /// <summary>
            /// Enum Manga for value: Manga
            /// </summary>
            [EnumMember(Value = "Manga")]
            Manga = 6,

            /// <summary>
            /// Enum Manhwa for value: Manhwa
            /// </summary>
            [EnumMember(Value = "Manhwa")]
            Manhwa = 7,

            /// <summary>
            /// Enum Manhua for value: Manhua
            /// </summary>
            [EnumMember(Value = "Manhua")]
            Manhua = 8,

            /// <summary>
            /// Enum Novel for value: Novel
            /// </summary>
            [EnumMember(Value = "Novel")]
            Novel = 9,

            /// <summary>
            /// Enum OEL for value: OEL
            /// </summary>
            [EnumMember(Value = "OEL")]
            OEL = 10,

            /// <summary>
            /// Enum Thai for value: Thai
            /// </summary>
            [EnumMember(Value = "Thai")]
            Thai = 11,

            /// <summary>
            /// Enum Vietnamese for value: Vietnamese
            /// </summary>
            [EnumMember(Value = "Vietnamese")]
            Vietnamese = 12,

            /// <summary>
            /// Enum Malaysian for value: Malaysian
            /// </summary>
            [EnumMember(Value = "Malaysian")]
            Malaysian = 13,

            /// <summary>
            /// Enum Nordic for value: Nordic
            /// </summary>
            [EnumMember(Value = "Nordic")]
            Nordic = 14,

            /// <summary>
            /// Enum French for value: French
            /// </summary>
            [EnumMember(Value = "French")]
            French = 15,

            /// <summary>
            /// Enum Spanish for value: Spanish
            /// </summary>
            [EnumMember(Value = "Spanish")]
            Spanish = 16

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserModelV1Profile" /> class.
        /// </summary>
        /// <param name="perPage">perPage.</param>
        /// <param name="invisible">invisible.</param>
        /// <param name="hideBirthday">hideBirthday.</param>
        /// <param name="hideCategories">hideCategories.</param>
        /// <param name="filterTypes">filterTypes.</param>
        /// <param name="upgrade">upgrade.</param>
        /// <param name="age18Verified">age18Verified.</param>
        public UserModelV1Profile(long perPage = default(long), bool invisible = default(bool), bool hideBirthday = default(bool), bool hideCategories = default(bool), List<FilterTypesEnum> filterTypes = default(List<FilterTypesEnum>), UserModelV1ProfileUpgrade upgrade = default(UserModelV1ProfileUpgrade), bool age18Verified = default(bool))
        {
            this.PerPage = perPage;
            this.Invisible = invisible;
            this.HideBirthday = hideBirthday;
            this.HideCategories = hideCategories;
            this.FilterTypes = filterTypes;
            this.Upgrade = upgrade;
            this.Age18Verified = age18Verified;
        }

        /// <summary>
        /// Gets or Sets PerPage
        /// </summary>
        [DataMember(Name = "per_page", EmitDefaultValue = false)]
        public long PerPage { get; set; }

        /// <summary>
        /// Gets or Sets Invisible
        /// </summary>
        [DataMember(Name = "invisible", EmitDefaultValue = true)]
        public bool Invisible { get; set; }

        /// <summary>
        /// Gets or Sets HideBirthday
        /// </summary>
        [DataMember(Name = "hide_birthday", EmitDefaultValue = true)]
        public bool HideBirthday { get; set; }

        /// <summary>
        /// Gets or Sets HideCategories
        /// </summary>
        [DataMember(Name = "hide_categories", EmitDefaultValue = true)]
        public bool HideCategories { get; set; }

        /// <summary>
        /// Gets or Sets FilterTypes
        /// </summary>
        [DataMember(Name = "filter_types", EmitDefaultValue = false)]
        public List<UserModelV1Profile.FilterTypesEnum> FilterTypes { get; set; }

        /// <summary>
        /// Gets or Sets Upgrade
        /// </summary>
        [DataMember(Name = "upgrade", EmitDefaultValue = false)]
        public UserModelV1ProfileUpgrade Upgrade { get; set; }

        /// <summary>
        /// Gets or Sets Age18Verified
        /// </summary>
        [DataMember(Name = "age18_verified", EmitDefaultValue = true)]
        public bool Age18Verified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserModelV1Profile {\n");
            sb.Append("  PerPage: ").Append(PerPage).Append("\n");
            sb.Append("  Invisible: ").Append(Invisible).Append("\n");
            sb.Append("  HideBirthday: ").Append(HideBirthday).Append("\n");
            sb.Append("  HideCategories: ").Append(HideCategories).Append("\n");
            sb.Append("  FilterTypes: ").Append(FilterTypes).Append("\n");
            sb.Append("  Upgrade: ").Append(Upgrade).Append("\n");
            sb.Append("  Age18Verified: ").Append(Age18Verified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserModelV1Profile);
        }

        /// <summary>
        /// Returns true if UserModelV1Profile instances are equal
        /// </summary>
        /// <param name="input">Instance of UserModelV1Profile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserModelV1Profile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PerPage == input.PerPage ||
                    this.PerPage.Equals(input.PerPage)
                ) && 
                (
                    this.Invisible == input.Invisible ||
                    this.Invisible.Equals(input.Invisible)
                ) && 
                (
                    this.HideBirthday == input.HideBirthday ||
                    this.HideBirthday.Equals(input.HideBirthday)
                ) && 
                (
                    this.HideCategories == input.HideCategories ||
                    this.HideCategories.Equals(input.HideCategories)
                ) && 
                (
                    this.FilterTypes == input.FilterTypes ||
                    this.FilterTypes != null &&
                    input.FilterTypes != null &&
                    this.FilterTypes.SequenceEqual(input.FilterTypes)
                ) && 
                (
                    this.Upgrade == input.Upgrade ||
                    (this.Upgrade != null &&
                    this.Upgrade.Equals(input.Upgrade))
                ) && 
                (
                    this.Age18Verified == input.Age18Verified ||
                    this.Age18Verified.Equals(input.Age18Verified)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PerPage.GetHashCode();
                hashCode = (hashCode * 59) + this.Invisible.GetHashCode();
                hashCode = (hashCode * 59) + this.HideBirthday.GetHashCode();
                hashCode = (hashCode * 59) + this.HideCategories.GetHashCode();
                if (this.FilterTypes != null)
                {
                    hashCode = (hashCode * 59) + this.FilterTypes.GetHashCode();
                }
                if (this.Upgrade != null)
                {
                    hashCode = (hashCode * 59) + this.Upgrade.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Age18Verified.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

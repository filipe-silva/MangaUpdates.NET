/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// UserModelV1StatsModeration
    /// </summary>
    [DataContract(Name = "UserModelV1StatsModeration")]
    public partial class UserModelV1StatsModeration : IEquatable<UserModelV1StatsModeration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserModelV1StatsModeration" /> class.
        /// </summary>
        /// <param name="releases">releases.</param>
        /// <param name="series">series.</param>
        /// <param name="publishers">publishers.</param>
        /// <param name="groups">groups.</param>
        /// <param name="authors">authors.</param>
        /// <param name="lastAction">lastAction.</param>
        public UserModelV1StatsModeration(UserModelV1StatsModerationReleases releases = default(UserModelV1StatsModerationReleases), UserModelV1StatsModerationSeries series = default(UserModelV1StatsModerationSeries), UserModelV1StatsModerationPublishers publishers = default(UserModelV1StatsModerationPublishers), UserModelV1StatsModerationGroups groups = default(UserModelV1StatsModerationGroups), UserModelV1StatsModerationAuthors authors = default(UserModelV1StatsModerationAuthors), TimeV1 lastAction = default(TimeV1))
        {
            this.Releases = releases;
            this.Series = series;
            this.Publishers = publishers;
            this.Groups = groups;
            this.Authors = authors;
            this.LastAction = lastAction;
        }

        /// <summary>
        /// Gets or Sets Releases
        /// </summary>
        [DataMember(Name = "releases", EmitDefaultValue = false)]
        public UserModelV1StatsModerationReleases Releases { get; set; }

        /// <summary>
        /// Gets or Sets Series
        /// </summary>
        [DataMember(Name = "series", EmitDefaultValue = false)]
        public UserModelV1StatsModerationSeries Series { get; set; }

        /// <summary>
        /// Gets or Sets Publishers
        /// </summary>
        [DataMember(Name = "publishers", EmitDefaultValue = false)]
        public UserModelV1StatsModerationPublishers Publishers { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public UserModelV1StatsModerationGroups Groups { get; set; }

        /// <summary>
        /// Gets or Sets Authors
        /// </summary>
        [DataMember(Name = "authors", EmitDefaultValue = false)]
        public UserModelV1StatsModerationAuthors Authors { get; set; }

        /// <summary>
        /// Gets or Sets LastAction
        /// </summary>
        [DataMember(Name = "last_action", EmitDefaultValue = false)]
        public TimeV1 LastAction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserModelV1StatsModeration {\n");
            sb.Append("  Releases: ").Append(Releases).Append("\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  Publishers: ").Append(Publishers).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Authors: ").Append(Authors).Append("\n");
            sb.Append("  LastAction: ").Append(LastAction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserModelV1StatsModeration);
        }

        /// <summary>
        /// Returns true if UserModelV1StatsModeration instances are equal
        /// </summary>
        /// <param name="input">Instance of UserModelV1StatsModeration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserModelV1StatsModeration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Releases == input.Releases ||
                    (this.Releases != null &&
                    this.Releases.Equals(input.Releases))
                ) && 
                (
                    this.Series == input.Series ||
                    (this.Series != null &&
                    this.Series.Equals(input.Series))
                ) && 
                (
                    this.Publishers == input.Publishers ||
                    (this.Publishers != null &&
                    this.Publishers.Equals(input.Publishers))
                ) && 
                (
                    this.Groups == input.Groups ||
                    (this.Groups != null &&
                    this.Groups.Equals(input.Groups))
                ) && 
                (
                    this.Authors == input.Authors ||
                    (this.Authors != null &&
                    this.Authors.Equals(input.Authors))
                ) && 
                (
                    this.LastAction == input.LastAction ||
                    (this.LastAction != null &&
                    this.LastAction.Equals(input.LastAction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Releases != null)
                {
                    hashCode = (hashCode * 59) + this.Releases.GetHashCode();
                }
                if (this.Series != null)
                {
                    hashCode = (hashCode * 59) + this.Series.GetHashCode();
                }
                if (this.Publishers != null)
                {
                    hashCode = (hashCode * 59) + this.Publishers.GetHashCode();
                }
                if (this.Groups != null)
                {
                    hashCode = (hashCode * 59) + this.Groups.GetHashCode();
                }
                if (this.Authors != null)
                {
                    hashCode = (hashCode * 59) + this.Authors.GetHashCode();
                }
                if (this.LastAction != null)
                {
                    hashCode = (hashCode * 59) + this.LastAction.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

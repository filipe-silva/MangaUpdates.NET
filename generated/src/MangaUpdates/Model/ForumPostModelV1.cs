/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// ForumPostModelV1
    /// </summary>
    [DataContract(Name = "ForumPostModelV1")]
    public partial class ForumPostModelV1 : IEquatable<ForumPostModelV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForumPostModelV1" /> class.
        /// </summary>
        /// <param name="postId">postId.</param>
        /// <param name="body">body.</param>
        /// <param name="topic">topic.</param>
        /// <param name="author">author.</param>
        /// <param name="replyTo">replyTo.</param>
        /// <param name="lastEdit">lastEdit.</param>
        /// <param name="timeAdded">timeAdded.</param>
        public ForumPostModelV1(long postId = default(long), string body = default(string), ForumPostModelV1Topic topic = default(ForumPostModelV1Topic), UserModelSearchV1 author = default(UserModelSearchV1), ForumPostModelV1ReplyTo replyTo = default(ForumPostModelV1ReplyTo), ForumPostModelV1LastEdit lastEdit = default(ForumPostModelV1LastEdit), TimeV1 timeAdded = default(TimeV1))
        {
            this.PostId = postId;
            this.Body = body;
            this.Topic = topic;
            this.Author = author;
            this.ReplyTo = replyTo;
            this.LastEdit = lastEdit;
            this.TimeAdded = timeAdded;
        }

        /// <summary>
        /// Gets or Sets PostId
        /// </summary>
        [DataMember(Name = "post_id", EmitDefaultValue = false)]
        public long PostId { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets Topic
        /// </summary>
        [DataMember(Name = "topic", EmitDefaultValue = false)]
        public ForumPostModelV1Topic Topic { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public UserModelSearchV1 Author { get; set; }

        /// <summary>
        /// Gets or Sets ReplyTo
        /// </summary>
        [DataMember(Name = "reply_to", EmitDefaultValue = false)]
        public ForumPostModelV1ReplyTo ReplyTo { get; set; }

        /// <summary>
        /// Gets or Sets LastEdit
        /// </summary>
        [DataMember(Name = "last_edit", EmitDefaultValue = false)]
        public ForumPostModelV1LastEdit LastEdit { get; set; }

        /// <summary>
        /// Gets or Sets TimeAdded
        /// </summary>
        [DataMember(Name = "time_added", EmitDefaultValue = false)]
        public TimeV1 TimeAdded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ForumPostModelV1 {\n");
            sb.Append("  PostId: ").Append(PostId).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  LastEdit: ").Append(LastEdit).Append("\n");
            sb.Append("  TimeAdded: ").Append(TimeAdded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ForumPostModelV1);
        }

        /// <summary>
        /// Returns true if ForumPostModelV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of ForumPostModelV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForumPostModelV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PostId == input.PostId ||
                    this.PostId.Equals(input.PostId)
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.Topic == input.Topic ||
                    (this.Topic != null &&
                    this.Topic.Equals(input.Topic))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.ReplyTo == input.ReplyTo ||
                    (this.ReplyTo != null &&
                    this.ReplyTo.Equals(input.ReplyTo))
                ) && 
                (
                    this.LastEdit == input.LastEdit ||
                    (this.LastEdit != null &&
                    this.LastEdit.Equals(input.LastEdit))
                ) && 
                (
                    this.TimeAdded == input.TimeAdded ||
                    (this.TimeAdded != null &&
                    this.TimeAdded.Equals(input.TimeAdded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PostId.GetHashCode();
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                if (this.Topic != null)
                {
                    hashCode = (hashCode * 59) + this.Topic.GetHashCode();
                }
                if (this.Author != null)
                {
                    hashCode = (hashCode * 59) + this.Author.GetHashCode();
                }
                if (this.ReplyTo != null)
                {
                    hashCode = (hashCode * 59) + this.ReplyTo.GetHashCode();
                }
                if (this.LastEdit != null)
                {
                    hashCode = (hashCode * 59) + this.LastEdit.GetHashCode();
                }
                if (this.TimeAdded != null)
                {
                    hashCode = (hashCode * 59) + this.TimeAdded.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

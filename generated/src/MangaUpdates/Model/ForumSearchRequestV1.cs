/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// ForumSearchRequestV1
    /// </summary>
    [DataContract(Name = "ForumSearchRequestV1")]
    public partial class ForumSearchRequestV1 : IEquatable<ForumSearchRequestV1>, IValidatableObject
    {
        /// <summary>
        /// Defines SearchBy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SearchByEnum
        {
            /// <summary>
            /// Enum Post for value: post
            /// </summary>
            [EnumMember(Value = "post")]
            Post = 1,

            /// <summary>
            /// Enum Topic for value: topic
            /// </summary>
            [EnumMember(Value = "topic")]
            Topic = 2

        }


        /// <summary>
        /// Gets or Sets SearchBy
        /// </summary>
        [DataMember(Name = "search_by", EmitDefaultValue = false)]
        public SearchByEnum? SearchBy { get; set; }
        /// <summary>
        /// Defines Method
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            /// <summary>
            /// Enum Fulltext for value: fulltext
            /// </summary>
            [EnumMember(Value = "fulltext")]
            Fulltext = 1,

            /// <summary>
            /// Enum Exact for value: exact
            /// </summary>
            [EnumMember(Value = "exact")]
            Exact = 2

        }


        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ForumSearchRequestV1" /> class.
        /// </summary>
        /// <param name="searchBy">searchBy.</param>
        /// <param name="method">method.</param>
        /// <param name="search">search.</param>
        /// <param name="since">since.</param>
        /// <param name="afterId">afterId.</param>
        /// <param name="beforeId">beforeId.</param>
        /// <param name="page">page.</param>
        /// <param name="perpage">perpage.</param>
        /// <param name="byUserId">byUserId.</param>
        /// <param name="filterUserId">filterUserId.</param>
        public ForumSearchRequestV1(SearchByEnum? searchBy = default(SearchByEnum?), MethodEnum? method = default(MethodEnum?), string search = default(string), long since = default(long), long afterId = default(long), long beforeId = default(long), long page = default(long), long perpage = default(long), long byUserId = default(long), long filterUserId = default(long))
        {
            this.SearchBy = searchBy;
            this.Method = method;
            this.Search = search;
            this.Since = since;
            this.AfterId = afterId;
            this.BeforeId = beforeId;
            this.Page = page;
            this.Perpage = perpage;
            this.ByUserId = byUserId;
            this.FilterUserId = filterUserId;
        }

        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [DataMember(Name = "search", EmitDefaultValue = false)]
        public string Search { get; set; }

        /// <summary>
        /// Gets or Sets Since
        /// </summary>
        [DataMember(Name = "since", EmitDefaultValue = false)]
        public long Since { get; set; }

        /// <summary>
        /// Gets or Sets AfterId
        /// </summary>
        [DataMember(Name = "after_id", EmitDefaultValue = false)]
        public long AfterId { get; set; }

        /// <summary>
        /// Gets or Sets BeforeId
        /// </summary>
        [DataMember(Name = "before_id", EmitDefaultValue = false)]
        public long BeforeId { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public long Page { get; set; }

        /// <summary>
        /// Gets or Sets Perpage
        /// </summary>
        [DataMember(Name = "perpage", EmitDefaultValue = false)]
        public long Perpage { get; set; }

        /// <summary>
        /// Gets or Sets ByUserId
        /// </summary>
        [DataMember(Name = "by_user_id", EmitDefaultValue = false)]
        public long ByUserId { get; set; }

        /// <summary>
        /// Gets or Sets FilterUserId
        /// </summary>
        [DataMember(Name = "filter_user_id", EmitDefaultValue = false)]
        public long FilterUserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ForumSearchRequestV1 {\n");
            sb.Append("  SearchBy: ").Append(SearchBy).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("  AfterId: ").Append(AfterId).Append("\n");
            sb.Append("  BeforeId: ").Append(BeforeId).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Perpage: ").Append(Perpage).Append("\n");
            sb.Append("  ByUserId: ").Append(ByUserId).Append("\n");
            sb.Append("  FilterUserId: ").Append(FilterUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ForumSearchRequestV1);
        }

        /// <summary>
        /// Returns true if ForumSearchRequestV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of ForumSearchRequestV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForumSearchRequestV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SearchBy == input.SearchBy ||
                    this.SearchBy.Equals(input.SearchBy)
                ) && 
                (
                    this.Method == input.Method ||
                    this.Method.Equals(input.Method)
                ) && 
                (
                    this.Search == input.Search ||
                    (this.Search != null &&
                    this.Search.Equals(input.Search))
                ) && 
                (
                    this.Since == input.Since ||
                    this.Since.Equals(input.Since)
                ) && 
                (
                    this.AfterId == input.AfterId ||
                    this.AfterId.Equals(input.AfterId)
                ) && 
                (
                    this.BeforeId == input.BeforeId ||
                    this.BeforeId.Equals(input.BeforeId)
                ) && 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.Perpage == input.Perpage ||
                    this.Perpage.Equals(input.Perpage)
                ) && 
                (
                    this.ByUserId == input.ByUserId ||
                    this.ByUserId.Equals(input.ByUserId)
                ) && 
                (
                    this.FilterUserId == input.FilterUserId ||
                    this.FilterUserId.Equals(input.FilterUserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SearchBy.GetHashCode();
                hashCode = (hashCode * 59) + this.Method.GetHashCode();
                if (this.Search != null)
                {
                    hashCode = (hashCode * 59) + this.Search.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Since.GetHashCode();
                hashCode = (hashCode * 59) + this.AfterId.GetHashCode();
                hashCode = (hashCode * 59) + this.BeforeId.GetHashCode();
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                hashCode = (hashCode * 59) + this.Perpage.GetHashCode();
                hashCode = (hashCode * 59) + this.ByUserId.GetHashCode();
                hashCode = (hashCode * 59) + this.FilterUserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

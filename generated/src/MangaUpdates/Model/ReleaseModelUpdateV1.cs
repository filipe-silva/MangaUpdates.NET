/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// ReleaseModelUpdateV1
    /// </summary>
    [DataContract(Name = "ReleaseModelUpdateV1")]
    public partial class ReleaseModelUpdateV1 : IEquatable<ReleaseModelUpdateV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseModelUpdateV1" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="volume">volume.</param>
        /// <param name="chapter">chapter.</param>
        /// <param name="groups">groups.</param>
        /// <param name="releaseDate">releaseDate.</param>
        /// <param name="downloadNotes">downloadNotes.</param>
        /// <param name="comment">comment.</param>
        /// <param name="timeAdded">timeAdded.</param>
        /// <param name="admin">admin.</param>
        public ReleaseModelUpdateV1(string title = default(string), string volume = default(string), string chapter = default(string), List<ReleaseModelUpdateV1Groups> groups = default(List<ReleaseModelUpdateV1Groups>), string releaseDate = default(string), string downloadNotes = default(string), string comment = default(string), TimeUpdateV1 timeAdded = default(TimeUpdateV1), ReleaseModelUpdateV1Admin admin = default(ReleaseModelUpdateV1Admin))
        {
            this.Title = title;
            this.Volume = volume;
            this.Chapter = chapter;
            this.Groups = groups;
            this.ReleaseDate = releaseDate;
            this.DownloadNotes = downloadNotes;
            this.Comment = comment;
            this.TimeAdded = timeAdded;
            this.Admin = admin;
        }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public string Volume { get; set; }

        /// <summary>
        /// Gets or Sets Chapter
        /// </summary>
        [DataMember(Name = "chapter", EmitDefaultValue = false)]
        public string Chapter { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public List<ReleaseModelUpdateV1Groups> Groups { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseDate
        /// </summary>
        [DataMember(Name = "release_date", EmitDefaultValue = false)]
        public string ReleaseDate { get; set; }

        /// <summary>
        /// Gets or Sets DownloadNotes
        /// </summary>
        [DataMember(Name = "download_notes", EmitDefaultValue = false)]
        public string DownloadNotes { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets TimeAdded
        /// </summary>
        [DataMember(Name = "time_added", EmitDefaultValue = false)]
        public TimeUpdateV1 TimeAdded { get; set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name = "admin", EmitDefaultValue = false)]
        public ReleaseModelUpdateV1Admin Admin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReleaseModelUpdateV1 {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  Chapter: ").Append(Chapter).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  DownloadNotes: ").Append(DownloadNotes).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  TimeAdded: ").Append(TimeAdded).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseModelUpdateV1);
        }

        /// <summary>
        /// Returns true if ReleaseModelUpdateV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseModelUpdateV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseModelUpdateV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.Chapter == input.Chapter ||
                    (this.Chapter != null &&
                    this.Chapter.Equals(input.Chapter))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.ReleaseDate == input.ReleaseDate ||
                    (this.ReleaseDate != null &&
                    this.ReleaseDate.Equals(input.ReleaseDate))
                ) && 
                (
                    this.DownloadNotes == input.DownloadNotes ||
                    (this.DownloadNotes != null &&
                    this.DownloadNotes.Equals(input.DownloadNotes))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.TimeAdded == input.TimeAdded ||
                    (this.TimeAdded != null &&
                    this.TimeAdded.Equals(input.TimeAdded))
                ) && 
                (
                    this.Admin == input.Admin ||
                    (this.Admin != null &&
                    this.Admin.Equals(input.Admin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Volume != null)
                {
                    hashCode = (hashCode * 59) + this.Volume.GetHashCode();
                }
                if (this.Chapter != null)
                {
                    hashCode = (hashCode * 59) + this.Chapter.GetHashCode();
                }
                if (this.Groups != null)
                {
                    hashCode = (hashCode * 59) + this.Groups.GetHashCode();
                }
                if (this.ReleaseDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReleaseDate.GetHashCode();
                }
                if (this.DownloadNotes != null)
                {
                    hashCode = (hashCode * 59) + this.DownloadNotes.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.TimeAdded != null)
                {
                    hashCode = (hashCode * 59) + this.TimeAdded.GetHashCode();
                }
                if (this.Admin != null)
                {
                    hashCode = (hashCode * 59) + this.Admin.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

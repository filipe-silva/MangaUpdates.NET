/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// SeriesModelSearchV1
    /// </summary>
    [DataContract(Name = "SeriesModelSearchV1")]
    public partial class SeriesModelSearchV1 : IEquatable<SeriesModelSearchV1>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Artbook for value: Artbook
            /// </summary>
            [EnumMember(Value = "Artbook")]
            Artbook = 1,

            /// <summary>
            /// Enum Doujinshi for value: Doujinshi
            /// </summary>
            [EnumMember(Value = "Doujinshi")]
            Doujinshi = 2,

            /// <summary>
            /// Enum DramaCD for value: Drama CD
            /// </summary>
            [EnumMember(Value = "Drama CD")]
            DramaCD = 3,

            /// <summary>
            /// Enum Filipino for value: Filipino
            /// </summary>
            [EnumMember(Value = "Filipino")]
            Filipino = 4,

            /// <summary>
            /// Enum Indonesian for value: Indonesian
            /// </summary>
            [EnumMember(Value = "Indonesian")]
            Indonesian = 5,

            /// <summary>
            /// Enum Manga for value: Manga
            /// </summary>
            [EnumMember(Value = "Manga")]
            Manga = 6,

            /// <summary>
            /// Enum Manhwa for value: Manhwa
            /// </summary>
            [EnumMember(Value = "Manhwa")]
            Manhwa = 7,

            /// <summary>
            /// Enum Manhua for value: Manhua
            /// </summary>
            [EnumMember(Value = "Manhua")]
            Manhua = 8,

            /// <summary>
            /// Enum Novel for value: Novel
            /// </summary>
            [EnumMember(Value = "Novel")]
            Novel = 9,

            /// <summary>
            /// Enum OEL for value: OEL
            /// </summary>
            [EnumMember(Value = "OEL")]
            OEL = 10,

            /// <summary>
            /// Enum Thai for value: Thai
            /// </summary>
            [EnumMember(Value = "Thai")]
            Thai = 11,

            /// <summary>
            /// Enum Vietnamese for value: Vietnamese
            /// </summary>
            [EnumMember(Value = "Vietnamese")]
            Vietnamese = 12,

            /// <summary>
            /// Enum Malaysian for value: Malaysian
            /// </summary>
            [EnumMember(Value = "Malaysian")]
            Malaysian = 13,

            /// <summary>
            /// Enum Nordic for value: Nordic
            /// </summary>
            [EnumMember(Value = "Nordic")]
            Nordic = 14,

            /// <summary>
            /// Enum French for value: French
            /// </summary>
            [EnumMember(Value = "French")]
            French = 15,

            /// <summary>
            /// Enum Spanish for value: Spanish
            /// </summary>
            [EnumMember(Value = "Spanish")]
            Spanish = 16

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SeriesModelSearchV1" /> class.
        /// </summary>
        /// <param name="seriesId">seriesId.</param>
        /// <param name="title">title.</param>
        /// <param name="url">url.</param>
        /// <param name="description">description.</param>
        /// <param name="image">image.</param>
        /// <param name="type">type.</param>
        /// <param name="year">year.</param>
        /// <param name="bayesianRating">bayesianRating.</param>
        /// <param name="ratingVotes">ratingVotes.</param>
        /// <param name="genres">genres.</param>
        /// <param name="latestChapter">latestChapter.</param>
        /// <param name="rank">rank.</param>
        /// <param name="lastUpdated">lastUpdated.</param>
        /// <param name="admin">admin.</param>
        public SeriesModelSearchV1(long seriesId = default(long), string title = default(string), string url = default(string), string description = default(string), ImageModelV1 image = default(ImageModelV1), TypeEnum? type = default(TypeEnum?), string year = default(string), decimal bayesianRating = default(decimal), long ratingVotes = default(long), List<SeriesModelSearchV1Genres> genres = default(List<SeriesModelSearchV1Genres>), long latestChapter = default(long), SeriesModelSearchV1Rank rank = default(SeriesModelSearchV1Rank), TimeV1 lastUpdated = default(TimeV1), SeriesModelSearchV1Admin admin = default(SeriesModelSearchV1Admin))
        {
            this.SeriesId = seriesId;
            this.Title = title;
            this.Url = url;
            this.Description = description;
            this.Image = image;
            this.Type = type;
            this.Year = year;
            this.BayesianRating = bayesianRating;
            this.RatingVotes = ratingVotes;
            this.Genres = genres;
            this.LatestChapter = latestChapter;
            this.Rank = rank;
            this.LastUpdated = lastUpdated;
            this.Admin = admin;
        }

        /// <summary>
        /// Gets or Sets SeriesId
        /// </summary>
        [DataMember(Name = "series_id", EmitDefaultValue = false)]
        public long SeriesId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public ImageModelV1 Image { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public string Year { get; set; }

        /// <summary>
        /// Gets or Sets BayesianRating
        /// </summary>
        [DataMember(Name = "bayesian_rating", EmitDefaultValue = false)]
        public decimal BayesianRating { get; set; }

        /// <summary>
        /// Gets or Sets RatingVotes
        /// </summary>
        [DataMember(Name = "rating_votes", EmitDefaultValue = false)]
        public long RatingVotes { get; set; }

        /// <summary>
        /// Gets or Sets Genres
        /// </summary>
        [DataMember(Name = "genres", EmitDefaultValue = false)]
        public List<SeriesModelSearchV1Genres> Genres { get; set; }

        /// <summary>
        /// Gets or Sets LatestChapter
        /// </summary>
        [DataMember(Name = "latest_chapter", EmitDefaultValue = false)]
        public long LatestChapter { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name = "rank", EmitDefaultValue = false)]
        public SeriesModelSearchV1Rank Rank { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdated
        /// </summary>
        [DataMember(Name = "last_updated", EmitDefaultValue = false)]
        public TimeV1 LastUpdated { get; set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name = "admin", EmitDefaultValue = false)]
        public SeriesModelSearchV1Admin Admin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SeriesModelSearchV1 {\n");
            sb.Append("  SeriesId: ").Append(SeriesId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  BayesianRating: ").Append(BayesianRating).Append("\n");
            sb.Append("  RatingVotes: ").Append(RatingVotes).Append("\n");
            sb.Append("  Genres: ").Append(Genres).Append("\n");
            sb.Append("  LatestChapter: ").Append(LatestChapter).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeriesModelSearchV1);
        }

        /// <summary>
        /// Returns true if SeriesModelSearchV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of SeriesModelSearchV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeriesModelSearchV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SeriesId == input.SeriesId ||
                    this.SeriesId.Equals(input.SeriesId)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.BayesianRating == input.BayesianRating ||
                    this.BayesianRating.Equals(input.BayesianRating)
                ) && 
                (
                    this.RatingVotes == input.RatingVotes ||
                    this.RatingVotes.Equals(input.RatingVotes)
                ) && 
                (
                    this.Genres == input.Genres ||
                    this.Genres != null &&
                    input.Genres != null &&
                    this.Genres.SequenceEqual(input.Genres)
                ) && 
                (
                    this.LatestChapter == input.LatestChapter ||
                    this.LatestChapter.Equals(input.LatestChapter)
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.Admin == input.Admin ||
                    (this.Admin != null &&
                    this.Admin.Equals(input.Admin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SeriesId.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Year != null)
                {
                    hashCode = (hashCode * 59) + this.Year.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BayesianRating.GetHashCode();
                hashCode = (hashCode * 59) + this.RatingVotes.GetHashCode();
                if (this.Genres != null)
                {
                    hashCode = (hashCode * 59) + this.Genres.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LatestChapter.GetHashCode();
                if (this.Rank != null)
                {
                    hashCode = (hashCode * 59) + this.Rank.GetHashCode();
                }
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                if (this.Admin != null)
                {
                    hashCode = (hashCode * 59) + this.Admin.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

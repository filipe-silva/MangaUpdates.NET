/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// ForumPostReportModelV1
    /// </summary>
    [DataContract(Name = "ForumPostReportModelV1")]
    public partial class ForumPostReportModelV1 : IEquatable<ForumPostReportModelV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForumPostReportModelV1" /> class.
        /// </summary>
        /// <param name="reportId">reportId.</param>
        /// <param name="topicId">topicId.</param>
        /// <param name="topic">topic.</param>
        /// <param name="postId">postId.</param>
        /// <param name="post">post.</param>
        /// <param name="userId">userId.</param>
        /// <param name="user">user.</param>
        /// <param name="reason">reason.</param>
        public ForumPostReportModelV1(long reportId = default(long), long topicId = default(long), ForumTopicModelSearchV1 topic = default(ForumTopicModelSearchV1), long postId = default(long), ForumPostModelSearchV1 post = default(ForumPostModelSearchV1), long userId = default(long), UserModelSearchV1 user = default(UserModelSearchV1), string reason = default(string))
        {
            this.ReportId = reportId;
            this.TopicId = topicId;
            this.Topic = topic;
            this.PostId = postId;
            this.Post = post;
            this.UserId = userId;
            this.User = user;
            this.Reason = reason;
        }

        /// <summary>
        /// Gets or Sets ReportId
        /// </summary>
        [DataMember(Name = "report_id", EmitDefaultValue = false)]
        public long ReportId { get; set; }

        /// <summary>
        /// Gets or Sets TopicId
        /// </summary>
        [DataMember(Name = "topic_id", EmitDefaultValue = false)]
        public long TopicId { get; set; }

        /// <summary>
        /// Gets or Sets Topic
        /// </summary>
        [DataMember(Name = "topic", EmitDefaultValue = false)]
        public ForumTopicModelSearchV1 Topic { get; set; }

        /// <summary>
        /// Gets or Sets PostId
        /// </summary>
        [DataMember(Name = "post_id", EmitDefaultValue = false)]
        public long PostId { get; set; }

        /// <summary>
        /// Gets or Sets Post
        /// </summary>
        [DataMember(Name = "post", EmitDefaultValue = false)]
        public ForumPostModelSearchV1 Post { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public long UserId { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public UserModelSearchV1 User { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ForumPostReportModelV1 {\n");
            sb.Append("  ReportId: ").Append(ReportId).Append("\n");
            sb.Append("  TopicId: ").Append(TopicId).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  PostId: ").Append(PostId).Append("\n");
            sb.Append("  Post: ").Append(Post).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ForumPostReportModelV1);
        }

        /// <summary>
        /// Returns true if ForumPostReportModelV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of ForumPostReportModelV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForumPostReportModelV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReportId == input.ReportId ||
                    this.ReportId.Equals(input.ReportId)
                ) && 
                (
                    this.TopicId == input.TopicId ||
                    this.TopicId.Equals(input.TopicId)
                ) && 
                (
                    this.Topic == input.Topic ||
                    (this.Topic != null &&
                    this.Topic.Equals(input.Topic))
                ) && 
                (
                    this.PostId == input.PostId ||
                    this.PostId.Equals(input.PostId)
                ) && 
                (
                    this.Post == input.Post ||
                    (this.Post != null &&
                    this.Post.Equals(input.Post))
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ReportId.GetHashCode();
                hashCode = (hashCode * 59) + this.TopicId.GetHashCode();
                if (this.Topic != null)
                {
                    hashCode = (hashCode * 59) + this.Topic.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PostId.GetHashCode();
                if (this.Post != null)
                {
                    hashCode = (hashCode * 59) + this.Post.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// ForumTopicModelV1
    /// </summary>
    [DataContract(Name = "ForumTopicModelV1")]
    public partial class ForumTopicModelV1 : IEquatable<ForumTopicModelV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForumTopicModelV1" /> class.
        /// </summary>
        /// <param name="topicId">topicId.</param>
        /// <param name="topic">topic.</param>
        /// <param name="url">url.</param>
        /// <param name="lastPost">lastPost.</param>
        /// <param name="stats">stats.</param>
        /// <param name="forum">forum.</param>
        /// <param name="isPoll">isPoll.</param>
        /// <param name="poll">poll.</param>
        /// <param name="admin">admin.</param>
        /// <param name="topicStarter">topicStarter.</param>
        /// <param name="timeAdded">timeAdded.</param>
        public ForumTopicModelV1(long topicId = default(long), string topic = default(string), string url = default(string), ForumPostModelSearchV1 lastPost = default(ForumPostModelSearchV1), ForumTopicModelV1Stats stats = default(ForumTopicModelV1Stats), ForumTopicModelV1Forum forum = default(ForumTopicModelV1Forum), bool isPoll = default(bool), ForumPollModelV1 poll = default(ForumPollModelV1), ForumTopicModelV1Admin admin = default(ForumTopicModelV1Admin), UserModelSearchV1 topicStarter = default(UserModelSearchV1), TimeV1 timeAdded = default(TimeV1))
        {
            this.TopicId = topicId;
            this.Topic = topic;
            this.Url = url;
            this.LastPost = lastPost;
            this.Stats = stats;
            this.Forum = forum;
            this.IsPoll = isPoll;
            this.Poll = poll;
            this.Admin = admin;
            this.TopicStarter = topicStarter;
            this.TimeAdded = timeAdded;
        }

        /// <summary>
        /// Gets or Sets TopicId
        /// </summary>
        [DataMember(Name = "topic_id", EmitDefaultValue = false)]
        public long TopicId { get; set; }

        /// <summary>
        /// Gets or Sets Topic
        /// </summary>
        [DataMember(Name = "topic", EmitDefaultValue = false)]
        public string Topic { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets LastPost
        /// </summary>
        [DataMember(Name = "last_post", EmitDefaultValue = false)]
        public ForumPostModelSearchV1 LastPost { get; set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [DataMember(Name = "stats", EmitDefaultValue = false)]
        public ForumTopicModelV1Stats Stats { get; set; }

        /// <summary>
        /// Gets or Sets Forum
        /// </summary>
        [DataMember(Name = "forum", EmitDefaultValue = false)]
        public ForumTopicModelV1Forum Forum { get; set; }

        /// <summary>
        /// Gets or Sets IsPoll
        /// </summary>
        [DataMember(Name = "is_poll", EmitDefaultValue = true)]
        public bool IsPoll { get; set; }

        /// <summary>
        /// Gets or Sets Poll
        /// </summary>
        [DataMember(Name = "poll", EmitDefaultValue = false)]
        public ForumPollModelV1 Poll { get; set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name = "admin", EmitDefaultValue = false)]
        public ForumTopicModelV1Admin Admin { get; set; }

        /// <summary>
        /// Gets or Sets TopicStarter
        /// </summary>
        [DataMember(Name = "topic_starter", EmitDefaultValue = false)]
        public UserModelSearchV1 TopicStarter { get; set; }

        /// <summary>
        /// Gets or Sets TimeAdded
        /// </summary>
        [DataMember(Name = "time_added", EmitDefaultValue = false)]
        public TimeV1 TimeAdded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ForumTopicModelV1 {\n");
            sb.Append("  TopicId: ").Append(TopicId).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  LastPost: ").Append(LastPost).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  Forum: ").Append(Forum).Append("\n");
            sb.Append("  IsPoll: ").Append(IsPoll).Append("\n");
            sb.Append("  Poll: ").Append(Poll).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  TopicStarter: ").Append(TopicStarter).Append("\n");
            sb.Append("  TimeAdded: ").Append(TimeAdded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ForumTopicModelV1);
        }

        /// <summary>
        /// Returns true if ForumTopicModelV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of ForumTopicModelV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForumTopicModelV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TopicId == input.TopicId ||
                    this.TopicId.Equals(input.TopicId)
                ) && 
                (
                    this.Topic == input.Topic ||
                    (this.Topic != null &&
                    this.Topic.Equals(input.Topic))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.LastPost == input.LastPost ||
                    (this.LastPost != null &&
                    this.LastPost.Equals(input.LastPost))
                ) && 
                (
                    this.Stats == input.Stats ||
                    (this.Stats != null &&
                    this.Stats.Equals(input.Stats))
                ) && 
                (
                    this.Forum == input.Forum ||
                    (this.Forum != null &&
                    this.Forum.Equals(input.Forum))
                ) && 
                (
                    this.IsPoll == input.IsPoll ||
                    this.IsPoll.Equals(input.IsPoll)
                ) && 
                (
                    this.Poll == input.Poll ||
                    (this.Poll != null &&
                    this.Poll.Equals(input.Poll))
                ) && 
                (
                    this.Admin == input.Admin ||
                    (this.Admin != null &&
                    this.Admin.Equals(input.Admin))
                ) && 
                (
                    this.TopicStarter == input.TopicStarter ||
                    (this.TopicStarter != null &&
                    this.TopicStarter.Equals(input.TopicStarter))
                ) && 
                (
                    this.TimeAdded == input.TimeAdded ||
                    (this.TimeAdded != null &&
                    this.TimeAdded.Equals(input.TimeAdded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TopicId.GetHashCode();
                if (this.Topic != null)
                {
                    hashCode = (hashCode * 59) + this.Topic.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.LastPost != null)
                {
                    hashCode = (hashCode * 59) + this.LastPost.GetHashCode();
                }
                if (this.Stats != null)
                {
                    hashCode = (hashCode * 59) + this.Stats.GetHashCode();
                }
                if (this.Forum != null)
                {
                    hashCode = (hashCode * 59) + this.Forum.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsPoll.GetHashCode();
                if (this.Poll != null)
                {
                    hashCode = (hashCode * 59) + this.Poll.GetHashCode();
                }
                if (this.Admin != null)
                {
                    hashCode = (hashCode * 59) + this.Admin.GetHashCode();
                }
                if (this.TopicStarter != null)
                {
                    hashCode = (hashCode * 59) + this.TopicStarter.GetHashCode();
                }
                if (this.TimeAdded != null)
                {
                    hashCode = (hashCode * 59) + this.TimeAdded.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

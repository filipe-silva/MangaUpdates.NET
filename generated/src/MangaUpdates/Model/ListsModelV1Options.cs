/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// ListsModelV1Options
    /// </summary>
    [DataContract(Name = "ListsModelV1Options")]
    public partial class ListsModelV1Options : IEquatable<ListsModelV1Options>, IValidatableObject
    {
        /// <summary>
        /// Defines Sort
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortEnum
        {
            /// <summary>
            /// Enum Title for value: title
            /// </summary>
            [EnumMember(Value = "title")]
            Title = 1,

            /// <summary>
            /// Enum Priority for value: priority
            /// </summary>
            [EnumMember(Value = "priority")]
            Priority = 2,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 3,

            /// <summary>
            /// Enum Rating for value: rating
            /// </summary>
            [EnumMember(Value = "rating")]
            Rating = 4,

            /// <summary>
            /// Enum Release for value: release
            /// </summary>
            [EnumMember(Value = "release")]
            Release = 5,

            /// <summary>
            /// Enum Unread for value: unread
            /// </summary>
            [EnumMember(Value = "unread")]
            Unread = 6,

            /// <summary>
            /// Enum Userrating for value: userrating
            /// </summary>
            [EnumMember(Value = "userrating")]
            Userrating = 7

        }


        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public SortEnum? Sort { get; set; }
        /// <summary>
        /// Defines ShowComment
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShowCommentEnum
        {
            /// <summary>
            /// Enum Link for value: link
            /// </summary>
            [EnumMember(Value = "link")]
            Link = 1,

            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 2,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 3

        }


        /// <summary>
        /// Gets or Sets ShowComment
        /// </summary>
        [DataMember(Name = "show_comment", EmitDefaultValue = false)]
        public ShowCommentEnum? ShowComment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListsModelV1Options" /> class.
        /// </summary>
        /// <param name="_public">_public.</param>
        /// <param name="sort">sort.</param>
        /// <param name="showRating">showRating.</param>
        /// <param name="showStatus">showStatus.</param>
        /// <param name="showComment">showComment.</param>
        /// <param name="showPerPage">showPerPage.</param>
        /// <param name="showLatestChapter">showLatestChapter.</param>
        public ListsModelV1Options(bool _public = default(bool), SortEnum? sort = default(SortEnum?), bool showRating = default(bool), bool showStatus = default(bool), ShowCommentEnum? showComment = default(ShowCommentEnum?), long showPerPage = default(long), bool showLatestChapter = default(bool))
        {
            this.Public = _public;
            this.Sort = sort;
            this.ShowRating = showRating;
            this.ShowStatus = showStatus;
            this.ShowComment = showComment;
            this.ShowPerPage = showPerPage;
            this.ShowLatestChapter = showLatestChapter;
        }

        /// <summary>
        /// Gets or Sets Public
        /// </summary>
        [DataMember(Name = "public", EmitDefaultValue = true)]
        public bool Public { get; set; }

        /// <summary>
        /// Gets or Sets ShowRating
        /// </summary>
        [DataMember(Name = "show_rating", EmitDefaultValue = true)]
        public bool ShowRating { get; set; }

        /// <summary>
        /// Gets or Sets ShowStatus
        /// </summary>
        [DataMember(Name = "show_status", EmitDefaultValue = true)]
        public bool ShowStatus { get; set; }

        /// <summary>
        /// Gets or Sets ShowPerPage
        /// </summary>
        [DataMember(Name = "show_per_page", EmitDefaultValue = false)]
        public long ShowPerPage { get; set; }

        /// <summary>
        /// Gets or Sets ShowLatestChapter
        /// </summary>
        [DataMember(Name = "show_latest_chapter", EmitDefaultValue = true)]
        public bool ShowLatestChapter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListsModelV1Options {\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  ShowRating: ").Append(ShowRating).Append("\n");
            sb.Append("  ShowStatus: ").Append(ShowStatus).Append("\n");
            sb.Append("  ShowComment: ").Append(ShowComment).Append("\n");
            sb.Append("  ShowPerPage: ").Append(ShowPerPage).Append("\n");
            sb.Append("  ShowLatestChapter: ").Append(ShowLatestChapter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListsModelV1Options);
        }

        /// <summary>
        /// Returns true if ListsModelV1Options instances are equal
        /// </summary>
        /// <param name="input">Instance of ListsModelV1Options to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListsModelV1Options input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Public == input.Public ||
                    this.Public.Equals(input.Public)
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort.Equals(input.Sort)
                ) && 
                (
                    this.ShowRating == input.ShowRating ||
                    this.ShowRating.Equals(input.ShowRating)
                ) && 
                (
                    this.ShowStatus == input.ShowStatus ||
                    this.ShowStatus.Equals(input.ShowStatus)
                ) && 
                (
                    this.ShowComment == input.ShowComment ||
                    this.ShowComment.Equals(input.ShowComment)
                ) && 
                (
                    this.ShowPerPage == input.ShowPerPage ||
                    this.ShowPerPage.Equals(input.ShowPerPage)
                ) && 
                (
                    this.ShowLatestChapter == input.ShowLatestChapter ||
                    this.ShowLatestChapter.Equals(input.ShowLatestChapter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Public.GetHashCode();
                hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowRating.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowComment.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowPerPage.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowLatestChapter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// ReleaseSearchResponseV1ResultsMetadata
    /// </summary>
    [DataContract(Name = "ReleaseSearchResponseV1ResultsMetadata")]
    public partial class ReleaseSearchResponseV1ResultsMetadata : IEquatable<ReleaseSearchResponseV1ResultsMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseSearchResponseV1ResultsMetadata" /> class.
        /// </summary>
        /// <param name="series">series.</param>
        /// <param name="userList">userList.</param>
        /// <param name="userGenreHighlights">userGenreHighlights.</param>
        /// <param name="userGenreFilters">userGenreFilters.</param>
        /// <param name="userGroupFilters">userGroupFilters.</param>
        /// <param name="typeFilter">typeFilter.</param>
        public ReleaseSearchResponseV1ResultsMetadata(SeriesModelSearchV1 series = default(SeriesModelSearchV1), ListsSeriesModelV1 userList = default(ListsSeriesModelV1), List<ReleaseSearchResponseV1ResultsMetadataUserGenreHighlights> userGenreHighlights = default(List<ReleaseSearchResponseV1ResultsMetadataUserGenreHighlights>), List<string> userGenreFilters = default(List<string>), List<string> userGroupFilters = default(List<string>), string typeFilter = default(string))
        {
            this.Series = series;
            this.UserList = userList;
            this.UserGenreHighlights = userGenreHighlights;
            this.UserGenreFilters = userGenreFilters;
            this.UserGroupFilters = userGroupFilters;
            this.TypeFilter = typeFilter;
        }

        /// <summary>
        /// Gets or Sets Series
        /// </summary>
        [DataMember(Name = "series", EmitDefaultValue = false)]
        public SeriesModelSearchV1 Series { get; set; }

        /// <summary>
        /// Gets or Sets UserList
        /// </summary>
        [DataMember(Name = "user_list", EmitDefaultValue = false)]
        public ListsSeriesModelV1 UserList { get; set; }

        /// <summary>
        /// Gets or Sets UserGenreHighlights
        /// </summary>
        [DataMember(Name = "user_genre_highlights", EmitDefaultValue = false)]
        public List<ReleaseSearchResponseV1ResultsMetadataUserGenreHighlights> UserGenreHighlights { get; set; }

        /// <summary>
        /// Gets or Sets UserGenreFilters
        /// </summary>
        [DataMember(Name = "user_genre_filters", EmitDefaultValue = false)]
        public List<string> UserGenreFilters { get; set; }

        /// <summary>
        /// Gets or Sets UserGroupFilters
        /// </summary>
        [DataMember(Name = "user_group_filters", EmitDefaultValue = false)]
        public List<string> UserGroupFilters { get; set; }

        /// <summary>
        /// Gets or Sets TypeFilter
        /// </summary>
        [DataMember(Name = "type_filter", EmitDefaultValue = false)]
        public string TypeFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReleaseSearchResponseV1ResultsMetadata {\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  UserList: ").Append(UserList).Append("\n");
            sb.Append("  UserGenreHighlights: ").Append(UserGenreHighlights).Append("\n");
            sb.Append("  UserGenreFilters: ").Append(UserGenreFilters).Append("\n");
            sb.Append("  UserGroupFilters: ").Append(UserGroupFilters).Append("\n");
            sb.Append("  TypeFilter: ").Append(TypeFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseSearchResponseV1ResultsMetadata);
        }

        /// <summary>
        /// Returns true if ReleaseSearchResponseV1ResultsMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseSearchResponseV1ResultsMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseSearchResponseV1ResultsMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Series == input.Series ||
                    (this.Series != null &&
                    this.Series.Equals(input.Series))
                ) && 
                (
                    this.UserList == input.UserList ||
                    (this.UserList != null &&
                    this.UserList.Equals(input.UserList))
                ) && 
                (
                    this.UserGenreHighlights == input.UserGenreHighlights ||
                    this.UserGenreHighlights != null &&
                    input.UserGenreHighlights != null &&
                    this.UserGenreHighlights.SequenceEqual(input.UserGenreHighlights)
                ) && 
                (
                    this.UserGenreFilters == input.UserGenreFilters ||
                    this.UserGenreFilters != null &&
                    input.UserGenreFilters != null &&
                    this.UserGenreFilters.SequenceEqual(input.UserGenreFilters)
                ) && 
                (
                    this.UserGroupFilters == input.UserGroupFilters ||
                    this.UserGroupFilters != null &&
                    input.UserGroupFilters != null &&
                    this.UserGroupFilters.SequenceEqual(input.UserGroupFilters)
                ) && 
                (
                    this.TypeFilter == input.TypeFilter ||
                    (this.TypeFilter != null &&
                    this.TypeFilter.Equals(input.TypeFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Series != null)
                {
                    hashCode = (hashCode * 59) + this.Series.GetHashCode();
                }
                if (this.UserList != null)
                {
                    hashCode = (hashCode * 59) + this.UserList.GetHashCode();
                }
                if (this.UserGenreHighlights != null)
                {
                    hashCode = (hashCode * 59) + this.UserGenreHighlights.GetHashCode();
                }
                if (this.UserGenreFilters != null)
                {
                    hashCode = (hashCode * 59) + this.UserGenreFilters.GetHashCode();
                }
                if (this.UserGroupFilters != null)
                {
                    hashCode = (hashCode * 59) + this.UserGroupFilters.GetHashCode();
                }
                if (this.TypeFilter != null)
                {
                    hashCode = (hashCode * 59) + this.TypeFilter.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

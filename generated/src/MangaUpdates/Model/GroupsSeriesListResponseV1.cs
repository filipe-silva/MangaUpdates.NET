/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// GroupsSeriesListResponseV1
    /// </summary>
    [DataContract(Name = "GroupsSeriesListResponseV1")]
    public partial class GroupsSeriesListResponseV1 : IEquatable<GroupsSeriesListResponseV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsSeriesListResponseV1" /> class.
        /// </summary>
        /// <param name="releaseFrequency">releaseFrequency.</param>
        /// <param name="seriesTitles">seriesTitles.</param>
        /// <param name="seriesGenres">seriesGenres.</param>
        /// <param name="seriesCategories">seriesCategories.</param>
        public GroupsSeriesListResponseV1(string releaseFrequency = default(string), List<GroupsSeriesListResponseV1SeriesTitles> seriesTitles = default(List<GroupsSeriesListResponseV1SeriesTitles>), List<GroupsSeriesListResponseV1SeriesGenres> seriesGenres = default(List<GroupsSeriesListResponseV1SeriesGenres>), List<GroupsSeriesListResponseV1SeriesCategories> seriesCategories = default(List<GroupsSeriesListResponseV1SeriesCategories>))
        {
            this.ReleaseFrequency = releaseFrequency;
            this.SeriesTitles = seriesTitles;
            this.SeriesGenres = seriesGenres;
            this.SeriesCategories = seriesCategories;
        }

        /// <summary>
        /// Gets or Sets ReleaseFrequency
        /// </summary>
        [DataMember(Name = "release_frequency", EmitDefaultValue = false)]
        public string ReleaseFrequency { get; set; }

        /// <summary>
        /// Gets or Sets SeriesTitles
        /// </summary>
        [DataMember(Name = "series_titles", EmitDefaultValue = false)]
        public List<GroupsSeriesListResponseV1SeriesTitles> SeriesTitles { get; set; }

        /// <summary>
        /// Gets or Sets SeriesGenres
        /// </summary>
        [DataMember(Name = "series_genres", EmitDefaultValue = false)]
        public List<GroupsSeriesListResponseV1SeriesGenres> SeriesGenres { get; set; }

        /// <summary>
        /// Gets or Sets SeriesCategories
        /// </summary>
        [DataMember(Name = "series_categories", EmitDefaultValue = false)]
        public List<GroupsSeriesListResponseV1SeriesCategories> SeriesCategories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupsSeriesListResponseV1 {\n");
            sb.Append("  ReleaseFrequency: ").Append(ReleaseFrequency).Append("\n");
            sb.Append("  SeriesTitles: ").Append(SeriesTitles).Append("\n");
            sb.Append("  SeriesGenres: ").Append(SeriesGenres).Append("\n");
            sb.Append("  SeriesCategories: ").Append(SeriesCategories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupsSeriesListResponseV1);
        }

        /// <summary>
        /// Returns true if GroupsSeriesListResponseV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupsSeriesListResponseV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupsSeriesListResponseV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReleaseFrequency == input.ReleaseFrequency ||
                    (this.ReleaseFrequency != null &&
                    this.ReleaseFrequency.Equals(input.ReleaseFrequency))
                ) && 
                (
                    this.SeriesTitles == input.SeriesTitles ||
                    this.SeriesTitles != null &&
                    input.SeriesTitles != null &&
                    this.SeriesTitles.SequenceEqual(input.SeriesTitles)
                ) && 
                (
                    this.SeriesGenres == input.SeriesGenres ||
                    this.SeriesGenres != null &&
                    input.SeriesGenres != null &&
                    this.SeriesGenres.SequenceEqual(input.SeriesGenres)
                ) && 
                (
                    this.SeriesCategories == input.SeriesCategories ||
                    this.SeriesCategories != null &&
                    input.SeriesCategories != null &&
                    this.SeriesCategories.SequenceEqual(input.SeriesCategories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReleaseFrequency != null)
                {
                    hashCode = (hashCode * 59) + this.ReleaseFrequency.GetHashCode();
                }
                if (this.SeriesTitles != null)
                {
                    hashCode = (hashCode * 59) + this.SeriesTitles.GetHashCode();
                }
                if (this.SeriesGenres != null)
                {
                    hashCode = (hashCode * 59) + this.SeriesGenres.GetHashCode();
                }
                if (this.SeriesCategories != null)
                {
                    hashCode = (hashCode * 59) + this.SeriesCategories.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

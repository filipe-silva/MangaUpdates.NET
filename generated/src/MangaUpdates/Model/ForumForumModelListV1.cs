/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// ForumForumModelListV1
    /// </summary>
    [DataContract(Name = "ForumForumModelListV1")]
    public partial class ForumForumModelListV1 : IEquatable<ForumForumModelListV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForumForumModelListV1" /> class.
        /// </summary>
        /// <param name="forumId">forumId.</param>
        /// <param name="name">name.</param>
        /// <param name="url">url.</param>
        /// <param name="description">description.</param>
        /// <param name="position">position.</param>
        /// <param name="moderators">moderators.</param>
        /// <param name="series">series.</param>
        /// <param name="stats">stats.</param>
        /// <param name="lastTopic">lastTopic.</param>
        /// <param name="admin">admin.</param>
        public ForumForumModelListV1(long forumId = default(long), string name = default(string), string url = default(string), string description = default(string), long position = default(long), List<ForumAdminModelV1> moderators = default(List<ForumAdminModelV1>), SeriesModelSearchV1 series = default(SeriesModelSearchV1), ForumForumModelListV1Stats stats = default(ForumForumModelListV1Stats), ForumTopicModelSearchV1 lastTopic = default(ForumTopicModelSearchV1), ForumForumModelListV1Admin admin = default(ForumForumModelListV1Admin))
        {
            this.ForumId = forumId;
            this.Name = name;
            this.Url = url;
            this.Description = description;
            this.Position = position;
            this.Moderators = moderators;
            this.Series = series;
            this.Stats = stats;
            this.LastTopic = lastTopic;
            this.Admin = admin;
        }

        /// <summary>
        /// Gets or Sets ForumId
        /// </summary>
        [DataMember(Name = "forum_id", EmitDefaultValue = false)]
        public long ForumId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public long Position { get; set; }

        /// <summary>
        /// Gets or Sets Moderators
        /// </summary>
        [DataMember(Name = "moderators", EmitDefaultValue = false)]
        public List<ForumAdminModelV1> Moderators { get; set; }

        /// <summary>
        /// Gets or Sets Series
        /// </summary>
        [DataMember(Name = "series", EmitDefaultValue = false)]
        public SeriesModelSearchV1 Series { get; set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [DataMember(Name = "stats", EmitDefaultValue = false)]
        public ForumForumModelListV1Stats Stats { get; set; }

        /// <summary>
        /// Gets or Sets LastTopic
        /// </summary>
        [DataMember(Name = "last_topic", EmitDefaultValue = false)]
        public ForumTopicModelSearchV1 LastTopic { get; set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name = "admin", EmitDefaultValue = false)]
        public ForumForumModelListV1Admin Admin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ForumForumModelListV1 {\n");
            sb.Append("  ForumId: ").Append(ForumId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Moderators: ").Append(Moderators).Append("\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  LastTopic: ").Append(LastTopic).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ForumForumModelListV1);
        }

        /// <summary>
        /// Returns true if ForumForumModelListV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of ForumForumModelListV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForumForumModelListV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ForumId == input.ForumId ||
                    this.ForumId.Equals(input.ForumId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && 
                (
                    this.Moderators == input.Moderators ||
                    this.Moderators != null &&
                    input.Moderators != null &&
                    this.Moderators.SequenceEqual(input.Moderators)
                ) && 
                (
                    this.Series == input.Series ||
                    (this.Series != null &&
                    this.Series.Equals(input.Series))
                ) && 
                (
                    this.Stats == input.Stats ||
                    (this.Stats != null &&
                    this.Stats.Equals(input.Stats))
                ) && 
                (
                    this.LastTopic == input.LastTopic ||
                    (this.LastTopic != null &&
                    this.LastTopic.Equals(input.LastTopic))
                ) && 
                (
                    this.Admin == input.Admin ||
                    (this.Admin != null &&
                    this.Admin.Equals(input.Admin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ForumId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Position.GetHashCode();
                if (this.Moderators != null)
                {
                    hashCode = (hashCode * 59) + this.Moderators.GetHashCode();
                }
                if (this.Series != null)
                {
                    hashCode = (hashCode * 59) + this.Series.GetHashCode();
                }
                if (this.Stats != null)
                {
                    hashCode = (hashCode * 59) + this.Stats.GetHashCode();
                }
                if (this.LastTopic != null)
                {
                    hashCode = (hashCode * 59) + this.LastTopic.GetHashCode();
                }
                if (this.Admin != null)
                {
                    hashCode = (hashCode * 59) + this.Admin.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

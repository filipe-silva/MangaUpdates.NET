/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MangaUpdates.Client.OpenAPIDateConverter;

namespace MangaUpdates.Model
{
    /// <summary>
    /// GroupsModelV1Social
    /// </summary>
    [DataContract(Name = "GroupsModelV1Social")]
    public partial class GroupsModelV1Social : IEquatable<GroupsModelV1Social>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsModelV1Social" /> class.
        /// </summary>
        /// <param name="site">site.</param>
        /// <param name="facebook">facebook.</param>
        /// <param name="twitter">twitter.</param>
        /// <param name="irc">irc.</param>
        /// <param name="forum">forum.</param>
        /// <param name="discord">discord.</param>
        public GroupsModelV1Social(string site = default(string), string facebook = default(string), string twitter = default(string), GroupsModelV1SocialIrc irc = default(GroupsModelV1SocialIrc), string forum = default(string), string discord = default(string))
        {
            this.Site = site;
            this.Facebook = facebook;
            this.Twitter = twitter;
            this.Irc = irc;
            this.Forum = forum;
            this.Discord = discord;
        }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [DataMember(Name = "site", EmitDefaultValue = false)]
        public string Site { get; set; }

        /// <summary>
        /// Gets or Sets Facebook
        /// </summary>
        [DataMember(Name = "facebook", EmitDefaultValue = false)]
        public string Facebook { get; set; }

        /// <summary>
        /// Gets or Sets Twitter
        /// </summary>
        [DataMember(Name = "twitter", EmitDefaultValue = false)]
        public string Twitter { get; set; }

        /// <summary>
        /// Gets or Sets Irc
        /// </summary>
        [DataMember(Name = "irc", EmitDefaultValue = false)]
        public GroupsModelV1SocialIrc Irc { get; set; }

        /// <summary>
        /// Gets or Sets Forum
        /// </summary>
        [DataMember(Name = "forum", EmitDefaultValue = false)]
        public string Forum { get; set; }

        /// <summary>
        /// Gets or Sets Discord
        /// </summary>
        [DataMember(Name = "discord", EmitDefaultValue = false)]
        public string Discord { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupsModelV1Social {\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  Facebook: ").Append(Facebook).Append("\n");
            sb.Append("  Twitter: ").Append(Twitter).Append("\n");
            sb.Append("  Irc: ").Append(Irc).Append("\n");
            sb.Append("  Forum: ").Append(Forum).Append("\n");
            sb.Append("  Discord: ").Append(Discord).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupsModelV1Social);
        }

        /// <summary>
        /// Returns true if GroupsModelV1Social instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupsModelV1Social to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupsModelV1Social input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Site == input.Site ||
                    (this.Site != null &&
                    this.Site.Equals(input.Site))
                ) && 
                (
                    this.Facebook == input.Facebook ||
                    (this.Facebook != null &&
                    this.Facebook.Equals(input.Facebook))
                ) && 
                (
                    this.Twitter == input.Twitter ||
                    (this.Twitter != null &&
                    this.Twitter.Equals(input.Twitter))
                ) && 
                (
                    this.Irc == input.Irc ||
                    (this.Irc != null &&
                    this.Irc.Equals(input.Irc))
                ) && 
                (
                    this.Forum == input.Forum ||
                    (this.Forum != null &&
                    this.Forum.Equals(input.Forum))
                ) && 
                (
                    this.Discord == input.Discord ||
                    (this.Discord != null &&
                    this.Discord.Equals(input.Discord))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Site != null)
                {
                    hashCode = (hashCode * 59) + this.Site.GetHashCode();
                }
                if (this.Facebook != null)
                {
                    hashCode = (hashCode * 59) + this.Facebook.GetHashCode();
                }
                if (this.Twitter != null)
                {
                    hashCode = (hashCode * 59) + this.Twitter.GetHashCode();
                }
                if (this.Irc != null)
                {
                    hashCode = (hashCode * 59) + this.Irc.GetHashCode();
                }
                if (this.Forum != null)
                {
                    hashCode = (hashCode * 59) + this.Forum.GetHashCode();
                }
                if (this.Discord != null)
                {
                    hashCode = (hashCode * 59) + this.Discord.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

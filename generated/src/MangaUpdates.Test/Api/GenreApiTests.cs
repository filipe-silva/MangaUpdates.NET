/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using MangaUpdates.Client;
using MangaUpdates.Api;
// uncomment below to import models
//using MangaUpdates.Model;

namespace MangaUpdates.Test.Api
{
    /// <summary>
    ///  Class for testing GenreApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GenreApiTests : IDisposable
    {
        private GenreApi instance;

        public GenreApiTests()
        {
            instance = new GenreApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GenreApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GenreApi
            //Assert.IsType<GenreApi>(instance);
        }

        /// <summary>
        /// Test AddGenre
        /// </summary>
        [Fact]
        public void AddGenreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GenreModelUpdateV1 genreModelUpdateV1 = null;
            //var response = instance.AddGenre(genreModelUpdateV1);
            //Assert.IsType<ApiResponseV1>(response);
        }

        /// <summary>
        /// Test DeleteGenre
        /// </summary>
        [Fact]
        public void DeleteGenreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.DeleteGenre(id);
            //Assert.IsType<ApiResponseV1>(response);
        }

        /// <summary>
        /// Test RetrieveGenreById
        /// </summary>
        [Fact]
        public void RetrieveGenreByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //bool? unrenderedFields = null;
            //var response = instance.RetrieveGenreById(id, unrenderedFields);
            //Assert.IsType<GenreModelStatsV1>(response);
        }

        /// <summary>
        /// Test RetrieveGenres
        /// </summary>
        [Fact]
        public void RetrieveGenresTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.RetrieveGenres();
            //Assert.IsType<List<GenreModelStatsV1>>(response);
        }

        /// <summary>
        /// Test UpdateGenre
        /// </summary>
        [Fact]
        public void UpdateGenreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //GenreModelUpdateV1 genreModelUpdateV1 = null;
            //var response = instance.UpdateGenre(id, genreModelUpdateV1);
            //Assert.IsType<ApiResponseV1>(response);
        }
    }
}

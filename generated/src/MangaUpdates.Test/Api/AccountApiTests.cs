/*
 * MangaUpdates API
 *
 * This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using MangaUpdates.Client;
using MangaUpdates.Api;
// uncomment below to import models
//using MangaUpdates.Model;

namespace MangaUpdates.Test.Api
{
    /// <summary>
    ///  Class for testing AccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountApiTests : IDisposable
    {
        private AccountApi instance;

        public AccountApiTests()
        {
            instance = new AccountApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AccountApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AccountApi
            //Assert.IsType<AccountApi>(instance);
        }

        /// <summary>
        /// Test Captcha
        /// </summary>
        [Fact]
        public void CaptchaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Captcha();
            //Assert.IsType<ApiResponseV1>(response);
        }

        /// <summary>
        /// Test ConfirmAndChangePassword
        /// </summary>
        [Fact]
        public void ConfirmAndChangePasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authHash = null;
            //UserModelUpdatePasswordV1 userModelUpdatePasswordV1 = null;
            //var response = instance.ConfirmAndChangePassword(authHash, userModelUpdatePasswordV1);
            //Assert.IsType<ApiResponseV1>(response);
        }

        /// <summary>
        /// Test ConfirmDeleteAccount
        /// </summary>
        [Fact]
        public void ConfirmDeleteAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authHash = null;
            //var response = instance.ConfirmDeleteAccount(authHash);
            //Assert.IsType<ApiResponseV1>(response);
        }

        /// <summary>
        /// Test ConfirmRegistration
        /// </summary>
        [Fact]
        public void ConfirmRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authHash = null;
            //var response = instance.ConfirmRegistration(authHash);
            //Assert.IsType<ApiResponseV1>(response);
        }

        /// <summary>
        /// Test DeleteAccount
        /// </summary>
        [Fact]
        public void DeleteAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string captchaResponse = null;
            //var response = instance.DeleteAccount(captchaResponse);
            //Assert.IsType<ApiResponseV1>(response);
        }

        /// <summary>
        /// Test ForgotPassword
        /// </summary>
        [Fact]
        public void ForgotPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string captchaResponse = null;
            //AccountForgotPassModelV1 accountForgotPassModelV1 = null;
            //var response = instance.ForgotPassword(captchaResponse, accountForgotPassModelV1);
            //Assert.IsType<ApiResponseV1>(response);
        }

        /// <summary>
        /// Test Login
        /// </summary>
        [Fact]
        public void LoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccountLoginModelV1 accountLoginModelV1 = null;
            //var response = instance.Login(accountLoginModelV1);
            //Assert.IsType<ApiResponseV1>(response);
        }

        /// <summary>
        /// Test Logout
        /// </summary>
        [Fact]
        public void LogoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Logout();
            //Assert.IsType<ApiResponseV1>(response);
        }

        /// <summary>
        /// Test Profile
        /// </summary>
        [Fact]
        public void ProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Profile();
            //Assert.IsType<UserModelV1>(response);
        }

        /// <summary>
        /// Test RegisterMember
        /// </summary>
        [Fact]
        public void RegisterMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string captchaResponse = null;
            //UserModelRegisterV1 userModelRegisterV1 = null;
            //var response = instance.RegisterMember(captchaResponse, userModelRegisterV1);
            //Assert.IsType<ApiResponseV1>(response);
        }

        /// <summary>
        /// Test ResendAuthEmail
        /// </summary>
        [Fact]
        public void ResendAuthEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //var response = instance.ResendAuthEmail(id);
            //Assert.IsType<ApiResponseV1>(response);
        }

        /// <summary>
        /// Test SendForgotEmail
        /// </summary>
        [Fact]
        public void SendForgotEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //var response = instance.SendForgotEmail(id);
            //Assert.IsType<ApiResponseV1>(response);
        }
    }
}
